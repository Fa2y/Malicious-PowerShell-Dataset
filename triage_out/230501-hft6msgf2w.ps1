##########################################################################################################################################
# This is an auto-generated file - for more info contact Timna SCA team in timna_sca@microsoft.com
##########################################################################################################################################

##########################################################################################################################################
# Section 1 - Definition of the output generic EtwProvider
##########################################################################################################################################

#region Definition of the output generic EtwProvider

<# 
{
"Data":{
    "IsPII":true,
    "ScrubMethod":3,
    "ScrubType":21,
    "PropertyType":1,
    "PropertyValue":"[
        {\"HResult\":0,\"Key\":\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate\\\\ManagePreviewBuilds",\"Type\":3,\"Value\":\"1\"},
        {\"HResult\":0,\"Key\":\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate\\\\DeferFeatureUpdates",\"Type\":3,\"Value\":\"0\"},
    ]
 }
#>
$Source = @"
                        using System;
                        using System.Text;
                        using System.Diagnostics.Tracing;
                        using Microsoft.PowerShell.Commands;
                        
                        public static class TvmBaselineAssessorEtwProvider
                        {
                            public static EventSource log = new EventSource("Microsoft.Windows.Sense.TvmBaselineAssessorEtw", EventSourceSettings.EtwSelfDescribingEventFormat);
                        }

                        [EventData] // [EventData] makes it possible to pass an instance of the class as an argument to EventSource.Write().
                        public class CollectedBaselineValue
                        {
							    public int HResult { get; set; }
                                public String Key { get; set; }
                                public String Value { get; set; }

                                public CollectedBaselineValue(int hResult, string key, string value)
                                {
									this.HResult = hResult;
                                    this.Key = key;
                                    this.Value = value;
                                }
                        }        
                        
                        [EventData] 
                        public class CollectedBaselineValues
                        {
							    public String Data { get; set; }

                                public CollectedBaselineValues(string data)
                                {
							        this.Data = data;
                                }
                        }     
"@

Add-Type -TypeDefinition $Source -Language CSharp -IgnoreWarnings

#endregion Definition of the output generic EtwProvider


##########################################################################################################################################
# Section 2 - Auxiliary inner functions
##########################################################################################################################################

# Setting the error global variable to STOP
$ErrorActionPreference = "Stop"

#region Auxiliary inner functions

<#
    This aux function retrivies the localAccountsData if not already loaded
#>
$global:localAccountsData = $null;
Function GetLocalAccountsData
{ 
    if ($global:localAccountsData -eq $null)
    {
        $global:localAccountsData = Get-WmiObject -Namespace 'Root\CIMV2' -Query "SELECT * from Win32_UserAccount where LocalAccount = 'True'"
	}
    return $global:localAccountsData
}

$global:accessMask = [ordered]@{
      [uint32]'0x80000000' = 'generic_read'
      [uint32]'0x40000000' = 'generic_write'
      [uint32]'0x20000000' = 'generic_execute'
      [uint32]'0x10000000' = 'GenericAll'
      [uint32]'0x02000000' = 'MaximumAllowed'
      [uint32]'0x01000000' = 'AccessSystemSecurity'
      [uint32]'0x00100000' = 'standard_synchronize'
      [uint32]'0x00080000' = 'standard_write_owner'
      [uint32]'0x00040000' = 'standard_write_dac'
      [uint32]'0x00020000' = 'standard_read_control'
      [uint32]'0x00010000' = 'standard_delete'
      [uint32]'0x00000100' = 'file_write_attributes'
      [uint32]'0x00000080' = 'file_read_attributes'
      [uint32]'0x00000040' = 'file_delete_child'
      [uint32]'0x00000020' = 'file_execute'
      [uint32]'0x00000010' = 'file_write_ea'
      [uint32]'0x00000008' = 'file_read_ea'
      [uint32]'0x00000004' = 'file_append_data'
      [uint32]'0x00000002' = 'file_write_data'
      [uint32]'0x00000001' = 'file_read_data'
    }

$global:regAccessMask = [ordered]@{
    [uint32]'0x80000000' = 'generic_read'
    [uint32]'0x40000000' = 'generic_write'
    [uint32]'0x20000000' = 'generic_execute'
    [uint32]'0x10000000' = 'GenericAll'
    [uint32]'0x02000000' = 'MaximumAllowed'
    [uint32]'0x01000000' = 'AccessSystemSecurity'
    [uint32]'0x00100000' = 'standard_synchronize'
    [uint32]'0x00080000' = 'standard_write_owner'
    [uint32]'0x00040000' = 'standard_write_dac'
    [uint32]'0x00020000' = 'standard_read_control'
    [uint32]'0x00010000' = 'standard_delete'
    [uint32]'0x00001000' = 'access_system_security'
    [uint32]'0x00000300' = 'key_wow64_res'
    [uint32]'0x00000200' = 'key_wow64_32key'
    [uint32]'0x00000100' = 'key_wow64_64key'
    [uint32]'0x00000080' = 'file_read_attributes'
    [uint32]'0x00000040' = 'file_delete_child'
    [uint32]'0x00000020' = 'key_create_link'
    [uint32]'0x00000010' = 'key_notify'
    [uint32]'0x00000008' = 'key_enumerate_sub_keys'
    [uint32]'0x00000004' = 'key_create_sub_key'
    [uint32]'0x00000002' = 'key_set_value'
    [uint32]'0x00000001' = 'key_query_data'
}


<#
    This function retrieves the name from a sid
#>
Function Get-TrusteeName
{ 
    Param(
        [Parameter()]
        [String]
        $SidRegulaRExpression
    )

    $hResult = 0

    # Get all local users
    $localAccountsData = GetLocalAccountsData       
    
    # Filter by SID
    $userSidAccountsData = $localAccountsData | where  SID -match $SidRegulaRExpression
    
    # Return the name
    $trusteeName = $userSidAccountsData.Name

    return $hResult, $trusteeName
}

<#
    This function compares sid name to an dynamic expected value
#>
Function Compare-ToDynamicTrusteeName
{ 
    Param(
        [Parameter()]
        [String]
        $SidRegulaRExpression,

        [Parameter()]
        [String]
        $DynamicExpectedValueField,

        [Parameter()]
        [String]
        $FixedExpectedValue
    )

    $hResult = 0

    $sidNameDiffer = "false"

    # Get all local users
    $localAccountsData = GetLocalAccountsData       
    
    # Filter by SID
    $userSidAccountsData = $localAccountsData | where  SID -match $SidRegulaRExpression
    
    # Build expected value
    $dynamicExpectedValuePart =  $userSidAccountsData | select -ExpandProperty $DynamicExpectedValueField
    $expectedValue = ($DynamicExpectedValueField + $FixedExpectedValue).ToLower()

    # Return the name
    $trusteeName = $userSidAccountsData.Name.ToLower()
    if ($trusteeName -ne $expectedValue)
    {
        $sidNameDiffer = "true"
    }

    return $hResult, $sidNameDiffer
}

<#
    This function checks whether file exist (by $Path)
#>
Function Check-FileExistenceByPath
{ 
    Param(
        [Parameter(Mandatory=$true)]
        [String]
        $Path
    )

    $hResult = 0

    #Expand environmental variables
    $ExpandedPath = [System.Environment]::ExpandEnvironmentVariables($Path)

    # Test Path
    try
    {
        $FileExists = Test-Path -Path $Path -PathType "Leaf"
    }
    catch
    {
        $FileExists = $False
    }
    

    return $hResult, $FileExists
}



<#
    This function retrieves the count of local users (by $SidRegulaRExpression) that fulfils the conditoin defined by $PropertyNameToCheck and $PropertyValueToCheck
#>
Function Get-LocalUserCountBySid
{ 
    Param(
        [Parameter()]
        [String]
        $SidRegulaRExpression,

        [Parameter()]
        [String]
        $PropertyNameToCheck,

        [Parameter()]
        [String]
        $PropertyValueToCheck,

        [Parameter()]
        [String]
        $useMatchRegexToCompare = "false"

    )

    $hResult = 0

    # Get all local users
    $localAccountsData = GetLocalAccountsData       
    
    # Filter by SID
    $userSidAccountsData = $localAccountsData | where  SID -match $SidRegulaRExpression
    
    # Filter by PropertyNameToCheck and PropertyValueToCheck
    if ($useMatchRegexToCompare -eq "true")
    {
        $userDataOutput = $userSidAccountsData | Where-Object{$_.$($PropertyNameToCheck).ToString() -match $PropertyValueToCheck}
    }
    else
    {
        $userDataOutput = $userSidAccountsData | Where-Object{$_.$($PropertyNameToCheck).ToString() -EQ $PropertyValueToCheck}
    }

    # Return the count of users that fulfils the conditions 
    $userCountForCondition = $($userDataOutput | measure).Count

    return $hResult, $userCountForCondition
}

<#
    This function retrieves the count of local users (by $UserName) 
#>
Function Get-LocalUserCountByName
{ 
    Param(
        [Parameter()]
        [String]
        $UserName
    )

    $hResult = 0

    # Get all local users
    $localAccountsData = GetLocalAccountsData       
    
    # Filter by Name
    $userNameAccountsData = $localAccountsData | where  Name -EQ $UserName
    
    # Return the count of users with name
    $userCountForName = $($userNameAccountsData | measure).Count

    return $hResult, $userCountForName
}

<#
    This function returns a tupple of (HResult, RgistryValue).
    if the value exists it is returned with HResult 0
    if the value doesn't exists it is returned as an empty string with HResult -2147024894
    if the an error occurs the is HResult -1
#>
Function Get-WmiObjectValue
{ 
    Param(
        [Parameter()]
        [String]
        $Namespace,

        [Parameter()]
        [String]
        $Query,

        [Parameter()]
        [String]
        $OutputFieldName
    )

    $wmiQueryResult = Get-WmiObject -Namespace $Namespace -Query $Query
        
    if ($wmiQueryResult -eq $null -or $wmiQueryResult -eq "")
    {
        $hResult = -2147024894 # wmi value not found error code
        $wmiObjectValue = $null
    }
    else
    {
        $hResult = 0
        $wmiObjectValue = $wmiQueryResult[$OutputFieldName]
    }

    return $hResult, $wmiObjectValue
}

<# Helper function to split on Or operator substring and remove empty results#>
Function SplitOnOrSubString
{
    Param(
    [Parameter()]
    [String]
    $ToSplit
    )

    $Option = [System.StringSplitOptions]::RemoveEmptyEntries
    $Separator = [string[]]@("||")

    $splitted = $ToSplit.Split($Separator, $Option)
    if ($splitted.Length -le 1)
    {
        # Make sure that the returned value is an array and not a single string object to preserve behavior
        return , $splitted
    }
    return $splitted
}

<#
    This function returns a tupple of (HResult, AllEqual).
    if the query succeeds, all of the objects are compared with the expected value, if they all equal, the function returns "true" with HResult 0
    if the query doesn't succeed function returns "false" with HResult -2147024894
#>
Function Compare-AllWmiObjects
{ 
    Param(
        [Parameter()]
        [String]
        $Namespace,

        [Parameter()]
        [String]
        $Query,

        [Parameter()]
        [String]
        $OutputFieldName,

        [Parameter()]
        [String]
        $ExpectedValue,

        [Parameter()]
        [String]
        $allOrNone
    )

    $wmiQueryResult = Get-WmiObject -Namespace $Namespace -Query $Query
        
    if ($wmiQueryResult -eq $null -or $wmiQueryResult -eq "")
    {
        $hResult = -2147024894 # wmi value not found error code
        return $hResult, "false"
    }
    else
    {
        $hResult = 0
        foreach ($result in $wmiQueryResult)
        {
            if ($allOrNone -eq "all")
            {
                if ($result[$OutputFieldName] -ne $ExpectedValue)
                {
                    return $hResult, "false"
                }
            }
            else
            {
                # $allOrNone has to be "none"
                if ($result[$OutputFieldName] -eq $ExpectedValue)
                {
                    return $hResult, "false"
                }
            }
        }
    }
    return $hResult, "true"
}

<#
    This function compares wmi object value with multiple accepted values.
    If the object value is acceptable (0,"true") is returned, else (0, "false") is returned.
    In case object doesn't exist, (-2147024894, "false") is returned.
#>
Function Compare-WmiWithMultipleValues
{ 
    Param(
        [Parameter()]
        [String]
        $Namespace,

        [Parameter()]
        [String]
        $Query,

        [Parameter()]
        [String]
        $OutputFieldNamesString,

        [Parameter()]
        [String]
        $ExpectedValuesString
    )

    $OutputFieldNames = SplitOnOrSubString -ToSplit $OutputFieldNamesString
    $ExpectedValues = SplitOnOrSubString -ToSplit $ExpectedValuesString

    $wmiQueryResult = Get-WmiObject -Namespace $Namespace -Query $Query
        
    if ($wmiQueryResult -eq $null -or $wmiQueryResult -eq "")
    {
        return -2147024894, "false" # wmi value not found error code
    }
    else
    {
        $hResult = 0
        for ($i = 0; $i -lt $ExpectedValues.Length; $i++)
        {
            $wmiObjectValue = $wmiQueryResult[$OutputFieldNames[$i]]
            if ($wmiObjectValue -eq $ExpectedValues[$i])
            {
                return 0, "true"
            }
        }
    }
    return 0, "false"
}

<#
    This function returns a tupple of (HResult, resultCount).
    if the value exists it is returned with HResult 0
    if the value doesn't exists it is returned as an empty string with HResult -2147024894
    if an error occurs the is HResult -1
#>
Function Get-WmiObjectCount
{ 
    Param(
        [Parameter()]
        [String]
        $Namespace,

        [Parameter()]
        [String]
        $Query
    )
    try
    {
        $wmiQueryResult = Get-WmiObject -Namespace $Namespace -Query $Query
        if ($wmiQueryResult -eq $null)
        {
            $hResult = 0
            $wmiObjectCount = 0
        }
        else
        {
            $hResult = 0
            $wmiObjectCount = $wmiQueryResult.count
        }
    }
    catch
    {
        $hResult = -2147024894 # wmi value not found error code   
        $wmiObjectCount = -1
    }

    return $hResult, $wmiObjectCount
}


<#
    This function returns a tupple of (HResult, RgistryValue).
    if the registry value exists it is returned with HResult 0
    if the registry value doesn't exists it is returned as an empty string with HResult -2147024894
    Example of use:  Get-RegistryValue -RegistryLocation "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa" -RegistryKey "LimitBlankPasswordUse"
#>
Function Get-RegistryValue
{ 
    Param(
        [Parameter()]
        [String]
        $RegistryLocation,

        [Parameter()]
        [String]
        $RegistryKey
    )

    $registryResult = Get-ItemProperty -Path  "Registry::$RegistryLocation" -Name $RegistryKey -ErrorAction SilentlyContinue
    if ($registryResult -eq $null)
    {
        # we changed the hResult value from  -2147024894 (Registry not found error code) to 0 to support tests where the required state is "registry not exists"
        $hResult = 0 
        $registryValue = "null"
    }
    else
    {
        $hResult = 0
        $registryValue = $registryResult.$registryKey
    }

    return $hResult, $registryValue
}

<#
    This function returns a tupple of (HResult, value).
    if the registry value exists and equals the expected value, true is returned with HResult 0
    if the registry value doesn't exists true is returned with HResult 0
    Example of use: Compare-RegistryValueOrNotExist -RegistryLocation "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa" -RegistryKey "LimitBlankPasswordUse" -ExpectedValue 3
#>
Function Compare-RegistryValueOrNotExist
{ 
    Param(
        [Parameter()]
        [String]
        $RegistryLocation,

        [Parameter()]
        [String]
        $RegistryKey,

        [Parameter()]
        [String]
        $ExpectedValue

    )
                
    $hResult = 0
    $result = "false"    

    if ($RegistryLocation.EndsWith('\') -eq $True)
    {
        $RegistryLocation = $RegistryLocation.TrimEnd('\')
    }
    $registryResult = Get-RegistryValue -RegistryLocation $RegistryLocation -RegistryKey $registryKey
    if ($registryResult[1] -eq "null")
    {
        # if registry does not exist, it's ok
        $result = "true"
    }
    else
    {
        if ([string]$registryResult[1] -eq $expectedValue)
        {
            $result = "true"    
        }
    }

    return $hResult, $result
}

<#
    This function returns a tupple of (HResult, BitwiseAndValueIsValid).
    if the registry value exists it is and its bitwise value with the expected value is valid, 1 is returned with HResult 0
    if the registry value doesn't exists 0 with HResult 0
    Example of use:  Check-BitwiseAndValue -RegistryLocation "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa" -RegistryKey "LimitBlankPasswordUse" -ExpectedValue 1
#>
Function Check-BitwiseAndValue
{ 
    Param(
        [Parameter()]
        [String]
        $RegistryLocation,

        [Parameter()]
        [String]
        $RegistryKey,

        [Parameter()]
        [String]
        $ExpectedValue
    )

    $registryResult = Get-ItemProperty -Path  "Registry::$RegistryLocation" -Name $RegistryKey -ErrorAction SilentlyContinue
    $hResult = 0 
    $BitwiseAndValueIsValid = 0
    $expectedValueAsInt = [int]$ExpectedValue
    if ($registryResult -ne $null)
    {
        $registryValue = [int]($registryResult.$registryKey)
        if (($registryValue -band $expectedValueAsInt) -eq $expectedValueAsInt)
        {
            $BitwiseAndValueIsValid = 1
        }
    }

    return $hResult, $BitwiseAndValueIsValid
}

<#
    This function returns a tupple of (HResult, isValueExpected).
    if the registry value exists and it is one of the expected values "true" is returned with HResult 0
    if the registry value doesn't exists and it should be, it is returned as "null" string with HResult 0
    if the registry value doesn't exists and it may not exist, "true" is returned with HResult 0
    Example of use:  Compare-RegistryWithMultipleAcceptedValues -RegistryLocation "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa" -RegistryKey "LimitBlankPasswordUse" -AcceptedValuesString "1,3,8" -RegistryMayNotExist "true"
#>
Function Compare-RegistryWithMultipleAcceptedValues
{ 
    Param(
        [Parameter()]
        [String]
        $RegistryLocation,

        [Parameter()]
        [String]
        $RegistryKey,

        [Parameter()]
        [String]
        $AcceptedValuesString,

        [Parameter()]
        [String]
        $RegistryMayNotExist,

        [Parameter()]
        [String]
        $CompareMethods,

        [Parameter()]
        [String]
        $AllValueMustMatch = "false"
    )

    $registryResult = Get-ItemProperty -Path  "Registry::$RegistryLocation" -Name $RegistryKey -ErrorAction SilentlyContinue
    if ($registryResult -eq $null)
    {
        if ($RegistryMayNotExist -eq "true")
        {
            # The case where non existing registry is a good result (for example considered disabled)
            return 0, "true"
        }
        # we changed the hResult value from  -2147024894 (Registry not found error code) to 0 to support tests where the required state is "registry not exists"
        $hResult = 0 
        $valueIsValid = "null"
    }
    else
    {
        $valueIsValid = "false"
        $hResult = 0
        
        # expected values and conditions
        $expectedValues = SplitOnOrSubString -ToSplit $AcceptedValuesString
        $conditions = SplitOnOrSubString -ToSplit $CompareMethods

        #registry real value
        $registryValue = [string]($registryResult.$registryKey)

        for($idx = 0; $idx -lt $expectedValues.Count; $idx++)
        {
            $res = Compare-ResultAndExpectedAccordingToCondition -result $registryValue -expectedValue $expectedValues[$idx] -McmCondition $conditions[$idx]
            if ($res -eq $True)
            {
                if ($AllValueMustMatch -eq "false")
                {
                    $valueIsValid = "true"
                    return $hResult, $valueIsValid
                }
            }
            else
            {
                if ($AllValueMustMatch -eq "true")
                {
                    $valueIsValid = "false"
                    return $hResult, $valueIsValid
                }
            }
        }
    }
    if ($AllValueMustMatch -eq "true")
    {
        $valueIsValid = "true"
    }

    return $hResult, $valueIsValid
}

<#
    This function returns a tupple of (HResult, atLeastOneReigstryExists).
    if at least one registry exists true is returned with HResult 0
    if not, false will be returned with HResult 0
    Example of use:  Check-AtLeastOneRegistryExists -$RegistryLocationsString "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa||HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa" -$RegistryKeysString "LimitBlankPasswordUse||scenoapplylegacyauditpolicy"
#>
Function Check-AtLeastOneRegistryExists
{ 
       Param(
        [Parameter()]
        [String]
        $RegistryLocationsString,

        [Parameter()]
        [String]
        $RegistryKeysString
    )

    $RegistryLocations = SplitOnOrSubString -ToSplit $RegistryLocationsString
    $RegistryKeys = SplitOnOrSubString -ToSplit $RegistryKeysString
    $AtLeastOneReigstryExists = "false"

    if ($RegistryLocations.Count -eq 1 -and $RegistryKeys.Count -eq 0)
    {
        # Check existence of subkey without expected specific keys
        $RegistryLocation = "Registry::" + $RegistryLocations[0]
        if((Test-Path $RegistryLocation) -eq $True)
        {
            return 0, "true"
        }   
        return 0, "false"
    }

    for ($index = 0; $index -lt $RegistryLocations.Count; $index++)
    {
        $RegistryLocation = "Registry::" + $RegistryLocations[$index]
        if((Test-Path $RegistryLocation) -eq $False)
        {
            continue
        }
        $registryResult = Get-Item -Path  $RegistryLocation -ErrorAction SilentlyContinue
        $valuesNames = $registryResult.GetValueNames()

        $matchResults = $valuesNames -match $RegistryKeys[$index]

        if($matchResults.Count -gt 0)
        {
            $hResult = 0 
            $AtLeastOneReigstryExists = "true"
            break 
        }
    }
    return $hResult, $AtLeastOneReigstryExists
}

<#
    This function returns a tupple of (HResult, valueNameByPatternExists).
    If at least one registry value name matches the name pattern true is returned with HResult 0
    if not, false will be returned with HResult 0
    Example of use:  Check-RegistryValueNameExistanceByPattern -$RegistryLocationsString "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa" -NamePattern ".*"
#>
Function Check-RegistryValueNameExistanceByPattern
{ 
    Param(
        [Parameter()]
        [String]
        $RegistryLocationString,

        [Parameter()]
        [String]
        $NamePattern
    )
    
       
       $normalizedRegistryLocation = "Registry::" + $RegistryLocationString

       if((Test-Path $normalizedRegistryLocation) -eq $False)
        {
            $hResult = 0 
            $valueByPatternExists = "false"
        }
        else
        {
            $registryResult = Get-Item -Path  $normalizedRegistryLocation -ErrorAction SilentlyContinue
            $valuesNames = $registryResult.GetValueNames()

            $matchResults = $valuesNames -match $NamePattern

            if($matchResults.Count -gt 0)
            {
                $hResult = 0 
                $valueByPatternExists = "true"            
            }
            else
            {
                $hResult = 0 
                $valueByPatternExists = "false"            
            }
        }
        return $hResult, $valueByPatternExists
}

<#
    This function returns a tupple of (HResult, $registryValue).
    If a registry value with name matches the name pattern the registry value is returned with HResult 0
    if not, null will be returned with HResult 0
    if there is more than one much, all values concatenated with ',' will be returned with HResult 0
    Example of use:  Get-RegistryValueByNamePattern -$RegistryLocations "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa" -$NamePattern ".*"
#>
Function Get-RegistryValueByNamePattern
{ 
    Param(
        [Parameter()]
        [String]
        $RegistryLocation,

        [Parameter()]
        [String]
        $NamePattern
    )
    
       
        $normalizedRegistryLocation = "Registry::" + $RegistryLocation

        if((Test-Path $normalizedRegistryLocation) -eq $False)
        {
            $hResult = 0 
            $registryValue = "null"
        }
        else
        {
            $registryResult = Get-Item -Path  $normalizedRegistryLocation -ErrorAction SilentlyContinue
            $valuesNames = $registryResult.GetValueNames()

            $matchResults = $valuesNames -match $NamePattern

            if ($matchResults.Count -ne 1)
            {
                # If registry does not exists there's nothing to return,
                # In current existing tests we should never get more than one result, for now decided to return null in case we do
                $hResult = 0 
                $registryValue = "null"           
            }
            else
            {
                $hResult = 0 
                $registryValue = $registryResult.GetValue($matchResults[0])     
            }
        }
        return $hResult, $registryValue
}

<#
    This function returns a tupple of (HResult, valueByPatternExists).
    If all values matches the expected value 1 is returned with HResult 0
    if not, 0 will be returned with HResult 0
    if registry doesn't exist null is returned with HResult 0
    Example of use:  Check-RegistryValueNameExistanceByPattern -$RegistryLocationsString "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa" -NamePattern ".*"
#>
Function Check-RegistryValueByPattern
{ 
    Param(
        [Parameter()]
        [String]
        $RegistryLocation,

        [Parameter()]
        [String]
        $RegistryKey,

        [Parameter()]
        [String]
        $expectedValue
    )

    $registryResult = Get-ItemProperty -Path  "Registry::$RegistryLocation" -Name $RegistryKey -ErrorAction SilentlyContinue
    
    if ($registryResult -eq $null)
    {
        # we changed the hResult value from  -2147024894 (Registry not found error code) to 0 to support tests where the required state is "registry not exists"
        $hResult = 0 
        $registryValue = "null"
    }
    else
    {
        $registryValue = $registryResult.$registryKey

        foreach($value in $registryValue)
        {
            if($value -notmatch $expectedValue)
            {
                return "0", "0"   # not all values match condition. test failed
            }
        }

        return "0", "1"   # all values match condition. test failed
    }    
}


<#
    This function returns a tupple of (HResult, RgistryValue).
    if the registry value exists it is returned with HResult 0
    if the registry value doesn't exists it is returned as an empty string with HResult -2147024894
    Example of use:  Get-RegistryKeyNameByValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses" -RegistryKeyValue "{d48179be-ec20-11d1-b6b8-00c04fa372a7}"
#>
Function Get-RegistryKeyNameByValue
{ 
    Param(
        [Parameter()]
        [String]
        $RegistryLocation,

        [Parameter()]
        [String]
        $RegistryKeyValue
    )

    $narmalizedPath = "Registry::$RegistryLocation"

    if((Test-Path $narmalizedPath) -eq $False)
    {
        $hResult = -2147024894 # Registry not found error code
        return $hResult,$null
    }

    $key =(Get-Item $narmalizedPath)

    $valueNames = $Key.GetValueNames() 
    foreach ($valueName in $valueNames){
            if($Key.GetValue($valueName) -eq $RegistryKeyValue)
            {
                $hResult = 0
                $returnKeyName = $valueName
                return $hResult, $returnKeyName
            } 
        }

    $hResult = -2147024894 # Registry not found error code
    return $hResult,$null    
}


<#
Helper function to get the status of the policy with the min precedence (the effective policy)
#>
Function Get-SettingOfMinPrecedencePolicy{
    Param(
        $WmiQueryResult
    )

    return $WmiQueryResult | Where {$_.precedence -eq ($WmiQueryResult.precedence | Measure -Minimum).Minimum}

}

<#
    This function returns the account lockout policy and passwod policy by using the data obtained via net.exe accounts.
    if the specified property value doesn't exists it is returned as an empty string with HResult -2147024894
#>
Function Get-AccountsPoliciesState {
 Param(
    [Parameter(Mandatory=$true)]
    [ValidateSet('ForceUserLogoff','MinimumPasswordAge','MaximumPasswordAge','MinimumPasswordLength','LengthOfPasswordHistory','LockoutThreshold','LockoutDuration','LockoutObservationWindow','PasswordComplexity','ReversibleEncryption')]  #validate that the input contains valid classification value
    [String]$PropertyToCheck
    )

    $accountSettings = c:\windows\system32\net.exe accounts | ForEach-Object {$res = $_.Split(':'); if ($res[1] -ne $null){New-Object -TypeName PSObject -Property @{
                            Setting = $res[0].Trim()
                            Value = $res[1].Trim()}}}

    switch($PropertyToCheck){
        'ForceUserLogoff'
        {
            if($accountSettings[0].Value -match "[0-9]+") #if Force logoff value is a number than return the value 
            {
                $propertyValue = [convert]::ToInt32($accountSettings[0].Value,10);
            }
            else
            {
                $propertyValue = "-1"
            }
            break;
        }
        'MinimumPasswordAge'
        {
            $propertyValue = [convert]::ToInt32($accountSettings[1].Value,10) * 86400; # resutls are in days. multiply by 24*60*60 to get resutls in seconds
            break;
        }
        'MaximumPasswordAge'
        {
            if($accountSettings[2].Value -match "[0-9]+") #if Maximum Password Age value is a number than return the value 
            {
                $propertyValue = [convert]::ToInt32($accountSettings[2].Value,10) * 86400 # resutls are in days. multiply by 24*60*60 to get resutls in seconds   
            }
            else  #if Maximum Password Age value is not a number than the value is "Unlimited" (the value for never is display in the GUI local language). return 0
            {
                $propertyValue = "0" 
            }                 
            break;
        }
        'MinimumPasswordLength'
        {
            $propertyValue = [convert]::ToInt32($accountSettings[3].Value,10)
            break;
        }
       'LengthOfPasswordHistory'
        {

            if($accountSettings[5].Value -match "[0-9]+") #if length of password history is not a number than the value is "None" (the value for never is display in the GUI language)
            {
                $propertyValue = [convert]::ToInt32($accountSettings[4].Value,10)
            }
            else
            {
                $propertyValue = "0"
            }
            break;
        }        
        'LockoutThreshold'
        {
            if($accountSettings[5].Value -match "[0-9]+") #if lockout threshold is not a number than the value is "Never" (the value for never is display in the GUI language)
            {
                $propertyValue = [convert]::ToInt32($accountSettings[5].Value,10)    
            }
            else
            {
                $propertyValue = "0"
            }
                 
            break;
        }        
        'LockoutDuration'
        {
            $propertyValue = [convert]::ToInt32($accountSettings[6].Value,10)* 60 # resutls are in minutes. multiply by 60 to get resutls in seconds   
            break;
        }
        'LockoutObservationWindow'
        {
            $propertyValue = [convert]::ToInt32($accountSettings[7].Value,10) * 60 # resutls are in minutes. multiply by 60 to get resutls in seconds   
            break;
        }
        'PasswordComplexity'
        {
            $passwordComplexityPolicies = Get-WmiObject -Namespace "ROOT\RSOP\Computer" -Query "SELECT Setting, precedence FROM RSOP_SecuritySettingBoolean WHERE KeyName='PasswordComplexity'"
            $passwordComplexity = Get-SettingOfMinPrecedencePolicy -WmiQueryResult $passwordComplexityPolicies
            if($passwordComplexity.Setting -EQ "True")
            {
                $propertyValue = 1     
			}
            else
            {
                $propertyValue = 0
			}
            break;
        }
        'ReversibleEncryption'
        {
            $reversibleEncryptionPolicies = Get-WmiObject -Namespace "ROOT\RSOP\Computer" -Query "SELECT Setting, precedence FROM RSOP_SecuritySettingBoolean WHERE KeyName='ClearTextPassword'"
            $reversibleEncryption =  Get-SettingOfMinPrecedencePolicy -WmiQueryResult $reversibleEncryptionPolicies
            if($reversibleEncryption.Setting -EQ "True")
            {
                $propertyValue = 1     
			}
            else
            {
                $propertyValue = 0
			}
            break;
        }
        default:
        {
            throw new Exception(string.Format("Unknown parameter to check value: {0}", $PropertyToCheck));
        }
   }

    $hResult = 0

    if ($propertyValue -eq $null)
    {
        $propertyValue = $null
        $hResult = -2147024894 # item not found error code
    }

    return $hResult, $propertyValue
}

<#
    This function compares the account lockout policy to expected values, by using the data obtained via net.exe accounts.
    if the specified property value doesn't exists it is returned as an empty string with HResult -2147024894
#>
Function Compare-LockoutValues {
 Param(
    [Parameter()]
    [String]
    
    $propertiesToCheckString,
    [Parameter()]
    [String]
    
    $conditionsString,
    [Parameter()]
    [String]
    
    $expectedValuesString
    )
    $propertiesToCheck = SplitOnOrSubString -ToSplit $propertiesToCheckString
    $conditions = SplitOnOrSubString -ToSplit $conditionsString
    $expectedValues = SplitOnOrSubString -ToSplit $expectedValuesString
    
    
    for ( $i = 0; $i -lt $propertiesToCheck.Length; $i++)
    {
        $propertyValue = Get-AccountsPoliciesState -PropertyToCheck $propertiesToCheck[$i]
        if ($propertyValue[0] -eq -2147024894 -AND $propertyValue[1] -eq $null)
        {
            # Get-AccountsPoliciesState returned failure
            $propertyValue = "false"
            $hResult = -2147024894 # item not found error code
            return $hResult, $propertyValue
        }

        try
        {
            $checkResult = (Compare-ResultAndExpectedAccordingToCondition -result $propertyValue[1] -expectedValue $expectedValues[$i] -McmCondition $conditions[$i])
        }
        catch [System.Management.Automation.RuntimeException]
        {
            # means we had conversion issue from result value to double in case of gt,gte,lt,lte comparision
            $checkResult = $False
        }
        if ($checkResult -eq $True)
        {
            return 0 , "true"
        }
    }
    return 0 , "false"
}


$AuditConstants=@{
  "Success and Failure" = "AUDIT_SUCCESS_FAILURE";
  "Success" = "AUDIT_SUCCESS";
  "Failure" = "AUDIT_FAILURE";
  "No Auditing" = "AUDIT_NONE"
}

<#
    This function returns the audit event policy subcategory state given a subcategory GUID
#>
Function Get-AuditEventPolicySubcategoriesState {
 Param(
        [Parameter()]
        [String]
        $AuditEventGuidToCheck
    )

    # Get adit data from auditpol command
    # e.g. 
    #            Machine Name      : YAIYUN-T480
    #            Policy Target     : System
    #            Subcategory       : Account Lockout
    #            Subcategory GUID  : {0CCE9217-69AE-11D9-BED3-505054503030}
    #            Inclusion Setting : Success and Failure
    #            Exclusion Setting :
    $auditData = c:\windows\system32\auditpol.exe /get /subcategory:"{$AuditEventGuidToCheck}" /r
    $auditDataObject = $auditData | ConvertFrom-Csv -Delim ',' 

    $auditState = $auditDataObject."Inclusion Setting"

    # Convert "Success and Failure" to "AUDIT_SUCCESS_FAILURE"
    $propertyValue = $AuditConstants[$auditState]
    $hResult = 0

    return $hResult, $propertyValue
}

<#
    This function runs the given $PowershellFunction and return a CollectedBaselineValue object of (hResult, Key, valueToReport).
#>
Function Create-CollectedBaselineValueObject
{ 
    Param(
        [Parameter()]
        [System.Object[]]
        $CollectedDataResult,

        [Parameter()]
        [String]
        $Key
    )

    New-Object CollectedBaselineValue($CollectedDataResult[0], $Key, $CollectedDataResult[1])
}

<#
    C# class which uses interop to get the user rights information,
#>
$lsaCode = @"
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;

namespace Lsa
{
    [StructLayout(LayoutKind.Sequential)]
    public struct LSA_UNICODE_STRING
    {
        public UInt16 Length;
        public UInt16 MaximumLength;
        [MarshalAs(UnmanagedType.LPWStr)]
        public string Buffer;
    }

    public struct LSA_ENUMERATION_INFORMATION
    {
        public IntPtr Sid;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct LSA_OBJECT_ATTRIBUTES
    {
        public UInt32 Length;
        public IntPtr RootDirectory;
        public UInt32 Attributes;
        public LSA_UNICODE_STRING ObjectName;
        public IntPtr SecurityDescriptor;
        public IntPtr SecurityQualityOfService;
    }

    [Flags]
    internal enum LsaAccessPolicy : uint
    {
        POLICY_VIEW_LOCAL_INFORMATION = 0x00000001,
        POLICY_VIEW_AUDIT_INFORMATION = 0x00000002,
        POLICY_GET_PRIVATE_INFORMATION = 0x00000004,
        POLICY_TRUST_ADMIN = 0x00000008,
        POLICY_CREATE_ACCOUNT = 0x00000010,
        POLICY_CREATE_SECRET = 0x00000020,
        POLICY_CREATE_PRIVILEGE = 0x00000040,
        POLICY_SET_DEFAULT_QUOTA_LIMITS = 0x00000080,
        POLICY_SET_AUDIT_REQUIREMENTS = 0x00000100,
        POLICY_AUDIT_LOG_ADMIN = 0x00000200,
        POLICY_SERVER_ADMIN = 0x00000400,
        POLICY_LOOKUP_NAMES = 0x00000800,
        POLICY_NOTIFICATION = 0x00001000
    }

    internal class Win32Lsa
    {
        internal const UInt32 STATUS_SUCCESS = 0;

        [StructLayout(LayoutKind.Sequential)]
        public struct LUID
        {
            public UInt32 LowPart;
            public Int32 HighPart;
        }

        [DllImport("advapi32.dll")]
        static extern bool LookupPrivilegeValue(string lpSystemName, string lpName, ref LUID lpLuid);

        [DllImport("advapi32.dll", EntryPoint = "LsaOpenPolicy", SetLastError = true, CharSet = CharSet.Auto,
        CallingConvention = CallingConvention.StdCall)]
        internal extern static UInt32 LsaOpenPolicy(ref LSA_UNICODE_STRING SystemName, ref LSA_OBJECT_ATTRIBUTES ObjectAttributes,
        UInt32 DesiredAcces, out IntPtr PolicyHandle);

        [DllImport("advapi32.dll", EntryPoint = "LsaClose", SetLastError = true, CharSet = CharSet.Auto,
        CallingConvention = CallingConvention.StdCall)]
        internal extern static UInt32 LsaClose(IntPtr PolicyHandle);

        [DllImport("advapi32.dll", EntryPoint = "LsaFreeMemory", SetLastError = true, CharSet = CharSet.Auto,
        CallingConvention = CallingConvention.StdCall)]
        internal extern static UInt32 LsaFreeMemory(IntPtr Buffer);

        [DllImport("advapi32.dll", EntryPoint = "LsaEnumerateAccountRights", SetLastError = true, CharSet = CharSet.Auto)]
        internal static extern UInt32 LsaEnumerateAccountRights(IntPtr PolicyHandle, IntPtr AccountSid, out IntPtr UserRights, out int CountOfRights);

        [DllImport("advapi32.dll", EntryPoint = "LsaEnumerateAccountsWithUserRight", SetLastError = true, CharSet = CharSet.Auto,
        CallingConvention = CallingConvention.StdCall)]
        internal extern static UInt32 LsaEnumerateAccountsWithUserRight(IntPtr PolicyHandle, ref LSA_UNICODE_STRING UserRights,
            out IntPtr EnumerationBuffer,
            out UInt32 CountReturned);

        [DllImport("advapi32.dll", EntryPoint = "ConvertSidToStringSid", CallingConvention = CallingConvention.Winapi, SetLastError = true)]
        internal static extern bool ConvertSidToStringSid(
            IntPtr lpSid,
            out string lpStringSid);

        [DllImport("advapi32.dll", EntryPoint = "ConvertStringSidToSid", CallingConvention = CallingConvention.Winapi, SetLastError = true)]
        internal static extern bool ConvertStringSidToSid(
            string lpStringSid,
            ref IntPtr lpSid);

        [DllImport("advapi32.dll", EntryPoint = "FreeSid", SetLastError = true, CharSet = CharSet.Auto)]
        public static extern void FreeSid(IntPtr pSid);

        [DllImport("advapi32.dll", EntryPoint = "LsaNtStatusToWinError", SetLastError = true, CharSet = CharSet.Auto,
        CallingConvention = CallingConvention.StdCall)]
        internal extern static UInt32 LsaNtStatusToWinError(UInt32 Status);
}

    public sealed class LsaLib
    {
        readonly static Dictionary<string, string> PrivilegesConstant = new Dictionary<string, string>()
        {
            {"SE_ASSIGNPRIMARYTOKEN_NAME","SeAssignPrimaryTokenPrivilege" },            
            {"SE_AUDIT_NAME","SeAuditPrivilege" },
            {"SE_BACKUP_NAME","SeBackupPrivilege" },
            {"SE_BATCH_LOGON_NAME","SeBatchLogonRight" },
            {"SE_CHANGE_NOTIFY_NAME","SeChangeNotifyPrivilege" },
            {"SE_CREATE_GLOBAL_NAME","SeCreateGlobalPrivilege" },
            {"SE_CREATE_PAGEFILE_NAME","SeCreatePagefilePrivilege" },
            {"SE_CREATE_PERMANENT_NAME","SeCreatePermanentPrivilege" },
            {"SE_CREATE_SYMBOLIC_LINK_NAME","SeCreateSymbolicLinkPrivilege" },
            {"SE_CREATE_TOKEN_NAME","SeCreateTokenPrivilege" },
            {"SE_DEBUG_NAME","SeDebugPrivilege" },
            {"SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME","SeDelegateSessionUserImpersonatePrivilege" },
            {"SE_DENY_NETWORK_LOGON_NAME","SeDenyNetworkLogonRight" },
            {"SE_DENY_BATCH_LOGON_NAME","SeDenyBatchLogonRight" },
            {"SE_DENY_INTERACTIVE_LOGON_NAME","SeDenyInteractiveLogonRight" },
            {"SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME","SeDenyRemoteInteractiveLogonRight" },
            {"SE_DENY_SERVICE_LOGON_NAME","SeDenyServiceLogonRight" },
            {"SE_ENABLE_DELEGATION_NAME","SeEnableDelegationPrivilege" },
            {"SE_IMPERSONATE_NAME","SeImpersonatePrivilege" },
            {"SE_INC_BASE_PRIORITY_NAME","SeIncreaseBasePriorityPrivilege" },
            {"SE_INCREASE_QUOTA_NAME","SeIncreaseQuotaPrivilege" },
            {"SE_INC_WORKING_SET_NAME","SeIncreaseWorkingSetPrivilege" },
            {"SE_INTERACTIVE_LOGON_NAME","SeInteractiveLogonRight" },
            {"SE_LOAD_DRIVER_NAME", "SeLoadDriverPrivilege" },
            {"SE_LOCK_MEMORY_NAME","SeLockMemoryPrivilege" },
            {"SE_MACHINE_ACCOUNT_NAME","SeMachineAccountPrivilege" },
            {"SE_MANAGE_VOLUME_NAME","SeManageVolumePrivilege" },
            {"SE_NETWORK_LOGON_NAME","SeNetworkLogonRight" },
            {"SE_PROF_SINGLE_PROCESS_NAME","SeProfileSingleProcessPrivilege" },
            {"SE_RELABEL_NAME","SeRelabelPrivilege" },
            {"SE_REMOTE_SHUTDOWN_NAME","SeRemoteShutdownPrivilege" },
            {"SE_REMOTE_INTERACTIVE_LOGON_NAME","SeRemoteInteractiveLogonRight" },            
            {"SE_RESTORE_NAME","SeRestorePrivilege" },
            {"SE_SECURITY_NAME","SeSecurityPrivilege" },
            {"SE_SERVICE_LOGON_NAME","SeServiceLogonRight" },
            {"SE_SHUTDOWN_NAME","SeShutdownPrivilege" },
            {"SE_SYNC_AGENT_NAME","SeSyncAgentPrivilege" },
            {"SE_SYSTEM_ENVIRONMENT_NAME","SeSystemEnvironmentPrivilege" },
            {"SE_SYSTEM_PROFILE_NAME","SeSystemProfilePrivilege" },
            {"SE_SYSTEMTIME_NAME","SeSystemtimePrivilege" },
            {"SE_TAKE_OWNERSHIP_NAME","SeTakeOwnershipPrivilege" },
            {"SE_TCB_NAME","SeTcbPrivilege" },
            {"SE_TIME_ZONE_NAME","SeTimeZonePrivilege" },
            {"SE_TRUSTED_CREDMAN_ACCESS_NAME","SeTrustedCredManAccessPrivilege" },
            {"SE_UNDOCK_NAME","SeUndockPrivilege" },
            {"SE_UNSOLICITED_INPUT_NAME","SeUnsolicitedInputPrivilege" },
            {"setrustedcredmanaccessnameright", "SeTrustedCredManAccessPrivilege" },
            {"senetworklogonright", "SeNetworkLogonRight" },
            {"setcbprivilege", "SeTcbPrivilege" },
            {"seinteractivelogonright", "SeInteractiveLogonRight" },
            {"sebackupprivilege", "SeBackupPrivilege" },
            {"secreatepagefileprivilege", "SeCreatePagefilePrivilege" },
            {"secreatetokenprivilege", "SeCreateTokenPrivilege" },
            {"secreateglobalprivilege", "SeCreateGlobalPrivilege" },
            {"secreatepermanentprivilege", "SeCreatePermanentPrivilege" },
            {"sedebugprivilege", "SeDebugPrivilege"},
            {"secreatesymboliclinkprivilege", "SeCreateSymbolicLinkPrivilege" },
            {"seenabledelegationprivilege", "SeEnableDelegationPrivilege" },
            {"seremoteshutdownprivilege", "SeRemoteShutdownPrivilege" },
            {"seimpersonateprivilege", "SeImpersonatePrivilege" },
            {"seloaddriverprivilege", "SeLoadDriverPrivilege" },
            {"selockmemoryprivilege", "SeLockMemoryPrivilege" },
            {"sesecurityprivilege", "SeSecurityPrivilege" },
            {"sesystemenvironmentprivilege", "SeSystemEnvironmentPrivilege" },
            {"semanagevolumeprivilege", "SeManageVolumePrivilege" },
            {"seprofilesingleprocessprivilege", "SeProfileSingleProcessPrivilege" },
            {"serestoreprivilege", "SeRestorePrivilege" },
            {"setakeownershipprivilege", "SeTakeOwnershipPrivilege" },
            {"sedenyservicelogonright", "SeDenyServiceLogonRight" },
            {"sedenyinteractivelogonright", "SeDenyInteractiveLogonRight" },
            {"sedenynetworklogonright", "SeDenyNetworkLogonRight" },
            { "sedenyremoteInteractivelogonright", "SeDenyRemoteInteractiveLogonRight" },
            {"sesystemtimeprivilege", "SeSystemtimePrivilege" },
            {"sedenybatchLogonright", "SeDenyBatchLogonRight" },
            {"semachineaccountprivilege", "SeMachineAccountPrivilege"},
            {"seremoteinteractivelogonright", "seremoteinteractivelogonright"},
            {"seauditprivilege","SeAuditPrivilege"},
            {"seincreasebasepriorityprivilege", "SeIncreaseBasePriorityPrivilege"}
        };

        private static readonly Dictionary<string, string> _SIDSToUserNames = new Dictionary<string, string>()
        {
            { "S-1-5-32-544", "Administrators" },
            { "S-1-5-32-546", "Guests" },
            { "S-1-5-32-555", "Remote Desktop Users" },
            { "S-1-5-32-545", "Users" },
            { "S-1-5-80-3169285310-278349998-1452333686-3865143136-4212226833", "NT SERVICE\\autotimesvc" },
            { "S-1-5-19", "LOCAL SERVICE" },
            { "S-1-5-20", "NETWORK SERVICE" },
            { "S-1-5-6", "SERVICE" },
            { "S-1-5-21-.*-519", "Enterprise Admins" },
            { "S-1-5-21-.*-512", "Domain Admins" },
            { "S-1-1-0", "Everyone" },
            { "S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122", "Event Log process" },
            { "S-1-5-18", "SYSTEM" },
            { "S-1-15-2-1", "APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES" },
            { "S-1-5-113", "Local account"},
            { "S-1-5-114", "Local account and member of Administrators group"},
            { "S-1-5-11", "Authenticated Users"},
            { "S-1-5-9", "ENTERPRISE DOMAIN CONTROLLERS"},
            { "S-1-5-83-0", "NT VIRTUAL MACHINE\\Virtual Machines"}
        };

        public static string ConvertSIDToUserName(string sid)
        {
            foreach (var key in _SIDSToUserNames.Keys)
            {
                if (Regex.Match(sid, key).Success)
                {
                    return _SIDSToUserNames[key];
                }
            }
            // we compare only to STIG possible expected values for users\group checks, if no match found, then we're not interested in that specific user 
            return string.Empty;
        }

        public static string[] EnumerateAccountsWithRight(string privilegeName)
        {
            UInt32 ntStatus;           
            LSA_UNICODE_STRING computer = new LSA_UNICODE_STRING();
            computer.Buffer = string.Empty;
            computer.Length = (UInt16)(computer.Buffer.Length * UnicodeEncoding.CharSize);
            computer.MaximumLength = (UInt16)((computer.Buffer.Length + 1) * UnicodeEncoding.CharSize);

            LSA_OBJECT_ATTRIBUTES ObjectAttributes = new LSA_OBJECT_ATTRIBUTES();
            IntPtr policyHandle;
            ntStatus = Win32Lsa.LsaOpenPolicy(ref computer, ref ObjectAttributes, (uint)(LsaAccessPolicy.POLICY_LOOKUP_NAMES | LsaAccessPolicy.POLICY_VIEW_LOCAL_INFORMATION), out policyHandle);
            if (ntStatus != Win32Lsa.STATUS_SUCCESS)
            {
                ntStatus = Win32Lsa.LsaNtStatusToWinError(ntStatus);
                throw new Exception(ntStatus.ToString());
            }

            LSA_UNICODE_STRING Privilege = new LSA_UNICODE_STRING();
            Privilege.Buffer = PrivilegesConstant[privilegeName];
            Privilege.Length = (UInt16)(Privilege.Buffer.Length * UnicodeEncoding.CharSize);
            Privilege.MaximumLength = (UInt16)((Privilege.Buffer.Length + 1) * UnicodeEncoding.CharSize);

            IntPtr enumerationBuffer;
            UInt32 countReturned;
            ntStatus = Win32Lsa.LsaEnumerateAccountsWithUserRight(policyHandle, ref Privilege, out enumerationBuffer, out countReturned);
            if (ntStatus != Win32Lsa.STATUS_SUCCESS)
            {
                ntStatus = Win32Lsa.LsaNtStatusToWinError(ntStatus);
                if (ntStatus == 259)
                {
                    return new string[0];
                }

                Win32Lsa.LsaClose(policyHandle);
                throw new Exception(ntStatus.ToString());
            }
            LSA_ENUMERATION_INFORMATION sid = new LSA_ENUMERATION_INFORMATION();

            UInt32 StructSize = (UInt32)Marshal.SizeOf(typeof(LSA_ENUMERATION_INFORMATION));
            IntPtr enumerationItem;

            var stringSids = new List<string>();
            for (int i = 0; i < countReturned; i++)
            {
                enumerationItem = (IntPtr)(enumerationBuffer.ToInt64() + (StructSize * i));
                sid = (LSA_ENUMERATION_INFORMATION)(Marshal.PtrToStructure(enumerationItem, typeof(LSA_ENUMERATION_INFORMATION)));

                var stringSid = String.Empty;
                Win32Lsa.ConvertSidToStringSid(sid.Sid, out stringSid);

                stringSids.Add(stringSid);
            }

            ntStatus = Win32Lsa.LsaClose(policyHandle);
            if (ntStatus != Win32Lsa.STATUS_SUCCESS)
            {
                ntStatus = Win32Lsa.LsaNtStatusToWinError(ntStatus);
                throw new Exception(ntStatus.ToString());
            }

            return stringSids.ToArray();
        }

        public static string[] GetAccountRights(SecurityIdentifier si)
        {
            UInt32 ntStatus;

            IntPtr sid = IntPtr.Zero;

            Win32Lsa.ConvertStringSidToSid(si.Value, ref sid);

            LSA_UNICODE_STRING computer = new LSA_UNICODE_STRING();
            computer.Buffer = String.Empty;
            computer.Length = (UInt16)(computer.Buffer.Length * UnicodeEncoding.CharSize);
            computer.MaximumLength = (UInt16)((computer.Buffer.Length + 1) * UnicodeEncoding.CharSize);

            LSA_OBJECT_ATTRIBUTES ObjectAttributes = new LSA_OBJECT_ATTRIBUTES();
            IntPtr policyHandle;
            ntStatus = Win32Lsa.LsaOpenPolicy(ref computer, ref ObjectAttributes, (uint)(LsaAccessPolicy.POLICY_LOOKUP_NAMES | LsaAccessPolicy.POLICY_VIEW_LOCAL_INFORMATION), out policyHandle);
            if (ntStatus != Win32Lsa.STATUS_SUCCESS)
            {
                ntStatus = Win32Lsa.LsaNtStatusToWinError(ntStatus);
                throw new Exception(ntStatus.ToString());
            }

            int countOfRights = 0;
            IntPtr userRightsPtr = IntPtr.Zero;
            ntStatus = Win32Lsa.LsaEnumerateAccountRights(policyHandle, sid, out userRightsPtr, out countOfRights);
            if (ntStatus != Win32Lsa.STATUS_SUCCESS)
            {
                ntStatus = Win32Lsa.LsaNtStatusToWinError(ntStatus);
                if (ntStatus == 2)
                {
                    return new string[0];
                }

                Win32Lsa.LsaClose(policyHandle);
                throw new Exception(ntStatus.ToString());
            }

            LSA_UNICODE_STRING userRight;
            var userRights = new string[countOfRights];

            for (int i = 0; i < countOfRights; i++)
            {
                userRight = (LSA_UNICODE_STRING)Marshal.PtrToStructure(userRightsPtr, typeof(LSA_UNICODE_STRING));
                userRights[i] = userRight.Buffer;
            }

            ntStatus = Win32Lsa.LsaClose(policyHandle);
            if (ntStatus != Win32Lsa.STATUS_SUCCESS)
            {
                ntStatus = Win32Lsa.LsaNtStatusToWinError(ntStatus);
                throw new Exception(ntStatus.ToString());
            }

            return userRights;
        }
    }
}
"@

Add-Type -TypeDefinition $lsaCode -Language CSharp -IgnoreWarnings


Function Get-PrivilegeUsers
{ 
    Param(
        [Parameter()]
        [String]
        $privilegeName                
    )
    
    $hResult = 0    
    $sidsWithPrivilege = @()

    try
    {
        $sidsWithPrivilege = ([type]'Lsa.LsaLib')::EnumerateAccountsWithRight($privilegeName)  # use LSA library to enumerate the assigned sids
        $sidsWithPrivilege = $sidsWithPrivilege -join ";"    
        return $hResult, $sidsWithPrivilege   # all the sid with the privilege match the condition. the test succeeded (even if the number of sid is smaller that the recommended, test only failed if unexpected sid have the privilege
    }
    catch
    {
        $hResult = -2147024894 #error getting privilege's users from LSA library
        return $hResult, $null
    }    
}

<#
    Check the sids that assigned to a privilege against a condition.
    that check is used is various situations:
    1. when we want to check that no one have a privilege.
    2. when we want to check that someone is includes in the list of the privileged users.
    3. when we want to check that all the users with a privilege are in a known list.
    
    examples for such test:
    check that no one has the SE_TRUSTED_CREDMAN_ACCESS_NAME privilege:
    Get-PrivilegeUsersWithCondition -PrivilegeName 'SE_TRUSTED_CREDMAN_ACCESS_NAME'  -operation 'equals' -SidRegulaRExpression '' 

    check that no other user but "Builtin\Remote Desktop Users" group (S-1-5-32-555) and "Builtin\Administrators" group (S-1-5-32-544) having the "SE_NETWORK_LOGON_NAME" privilege
    Get-PrivilegeUsersWithCondition -PrivilegeName 'SE_NETWORK_LOGON_NAME'  -operation 'pattern match' -SidRegulaRExpression 'S-1-5-32-(544|555)' 

    check "Builtin\Administrators" group (S-1-5-32-544) are include in the users with "SE_BACKUP_NAME" privilege
    Get-PrivilegeUsersWithCondition -PrivilegeName 'SE_BACKUP_NAME'  -operation 'equals' -SidRegulaRExpression 'S-1-5-32-544' 
#>
Function Get-PrivilegeUsersWithCondition
{ 
    Param(
        [Parameter()]
        [String]
        $privilegeName,
                
        [Parameter()]
        [String]
        $operation,  #equal or match. we use equal to check specific condition (like if a specific user exist or if no user exist) and match to check more general condition like if a user includes in the results.

        [Parameter()]
        [String]
        $SidRegulaRExpression,

        [Parameter()]
        [String]
        $AtLeastOneCheck = "false"

    )
    
    $hResult = 0    
    $sidsWithPrivilege = @()

    try
    {
        $sidsWithPrivilege = ([type]'Lsa.LsaLib')::EnumerateAccountsWithRight($privilegeName)  # use LSA library to enumerate the assigned sids

        if($SidRegulaRExpression -eq "")  # we need to check that count of the assigned user is 0
        {
			if($sidsWithPrivilege.Count -eq 0)
            {
                return $hResult, 1    # no sid found, test successed - return true
            }
            else
            {           
                return $hResult, 0    # test failed - return flase
            }
		}

        switch($operation)
        {
            "equals"    # equals is being used only for one expected results. we need to check that there is only one results and the it equals to the exptected resutls.
            {
                if ($AtLeastOneCheck -eq "false")
                {
                    if(($sidsWithPrivilege.Count -eq 1) -AND ($sidsWithPrivilege -eq $SidRegulaRExpression))
                    {
                        return $hResult, 1   # if we found a match the test succeed
                    }
                    else
                    {
                        return $hResult, 0   # if we got to that line the we have not found a match and the test failed
                    }
                }
                else
                {
                    foreach ( $sidWithPrivilege in $sidsWithPrivilege)
                    {
                        if($sidWithPrivilege -eq $SidRegulaRExpression)
                        {
                            return $hResult, 1   # we found a sid which equals the expected value, the test succeed
                        }
                    }

                    return $hResult, 0   # none of privileges users are equal to the expected user - test fails
                }
                break
		    }
            "pattern match" # we need to check that all the sids with the privilege are match to the condition.
            {

                foreach ( $sidWithPrivilege in $sidsWithPrivilege)
                {
                    if($sidWithPrivilege -notmatch $SidRegulaRExpression)
                    {
                        return $hResult, 0   # we found a sid which doesn't match the assignment condition, the test failed       
                    }
                }

                return $hResult, 1   # all the sid with the privilege match the condition. the test succeeded (even if the number of sid is smaller that the recommended, test only failed if unexpected sid have the privilege
		    }
            default:
            {
                throw new Exception(string.Format("Unknown operation: {0}", $operation));
            }
        }    
    }
    catch
    {
        $hResult = -2147024894 #error getting privilege's users from LSA library
        return $hResult, $null
    }    
}


<# Helper function to check whether one of the privileged users is equal to the given SID#>
Function FindSIDEqualMatch
{
    Param(
        [Parameter()]
        [String]
        $userName,
                
        [Parameter()]
        [String[]]
        $sidsWithPrivilege
    )

    # simpe case in which we have only one sid to compare with
    foreach ($sidWithPrivilege in $sidsWithPrivilege)
    {
        $nameOfSid = ([type]'Lsa.LsaLib')::ConvertSIDToUserName($sidWithPrivilege)  # use LSA library to enumerate the assigned sids
        if ($nameOfSid -ne "" -AND $nameOfSid -eq $userName)
        {
            return $True;
        }
    }
    return $False;
}

<# Helper function to check whether all of the privileged users matching to the given SID or filters if exist#>
Function AllPrivilegedUsersMatchRegex
{
    Param(
        [Parameter()]
        [String]
        $sidRegulaRExpression,

        [Parameter()]
        [String]
        $userFilters,
                
        [Parameter()]
        [String[]]
        $sidsWithPrivilege
    )

    $filters = SplitOnOrSubString -ToSplit $userFilters
    foreach ($sidWithPrivilege in $sidsWithPrivilege)
    {
        if (($sidWithPrivilege -match $sidRegulaRExpression) -ne $True)
        {
            $nameOfSid = ([type]'Lsa.LsaLib')::ConvertSIDToUserName($sidWithPrivilege)  # Support for when filter is specifeid by user name
            if (($nameOfSid -ne "" -AND $filters.Contains($nameOfSid) -eq $True) -OR ($filters.Contains($sidWithPrivilege)))
            {
                # In case there are filters, if this user name is filtered, ignore it
                continue;
            }
            return $False; # all SIDs must match the expression.
        }
    }
    return $True;
}

<# Helper function to check whether none of the privileged users matching to the given SID or filters if exist #>
 Function NonePrivilegedUsersMatchRegex
{
    Param(
        [Parameter()]
        [String]
        $sidRegulaRExpression,

        [Parameter()]
        [String]
        $userFilters,
                
        [Parameter()]
        [String[]]
        $sidsWithPrivilege
        )

    $filters = SplitOnOrSubString -ToSplit $userFilters
    foreach ($sidWithPrivilege in $sidsWithPrivilege)
    {
        if (($sidWithPrivilege -match $sidRegulaRExpression) -eq $True)
        {
            $nameOfSid = ([type]'Lsa.LsaLib')::ConvertSIDToUserName($sidWithPrivilege)  # Support for when filter is specifeid by user name
            if (($nameOfSid -ne "" -AND $filters.Contains($nameOfSid) -eq $True) -OR ($filters.Contains($sidWithPrivilege)))
            {
                # In case there are filters, if this user name is filtered, ignore it
                continue;
            }
            return $False; # all SIDs must match the expression.
        }
    }
    return $True;
}

<#
    Check the sids that assigned to a privilege against a condition.
    that check is used is various situations:
    1. when we want to check that no one have a privilege.
    2. when we want to check that someone is includes in the list of the privileged users.
    3. when we want to check that all the users with a privilege are in a known list.
    
    examples for such test:
    check that no one has the SE_TRUSTED_CREDMAN_ACCESS_NAME privilege:
    Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'SE_TRUSTED_CREDMAN_ACCESS_NAME'  -operation 'pattern match' -SidRegulaRExpression '.*' -ShouldHavePrivilege "0" 

    check that no other user but "Builtin\Remote Desktop Users" group (S-1-5-32-555) and "Builtin\Administrators" group (S-1-5-32-544) having the "SE_NETWORK_LOGON_NAME" privilege
    Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'SE_NETWORK_LOGON_NAME'  -operation 'pattern match' -SidRegulaRExpression 'S-1-5-32-(544|555) -ShouldHavePrivilege "1"

    check "Builtin\Administrators" group (S-1-5-32-544) are include in the users with "SE_BACKUP_NAME" privilege
    Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'SE_BACKUP_NAME'  -operation 'equals' -SidRegulaRExpression 'S-1-5-32-544' -ShouldHavePrivilege "1"
#>
Function Check-UsersPrivilegeBySidAndPrivilege
{ 
    Param(
        [Parameter()]
        [String]
        $PrivilegeName,
                
        [Parameter()]
        [String]
        $operations,  #equal or match for each SidRegularExpressio. we use equal to check specific condition (like if a specific user exist or if no user exist) and match to check more general condition like if a user includes in the results.

        [Parameter()]
        [String]
        $SidRegularExpressions,

        [Parameter()]
        [String]
        $ShouldHavePrivilege,

        [Parameter()]
        [String]
        $UserFiltersString
    )
    
    $hResult = 0    
    $sidsWithPrivilege = @()

    $SidRegularExpressionList = SplitOnOrSubString -ToSplit $SidRegularExpressions
    $operationList = SplitOnOrSubString -ToSplit $operations

    try
    {
        $sidsWithPrivilege = ([type]'Lsa.LsaLib')::EnumerateAccountsWithRight($PrivilegeName)  # use LSA library to enumerate the assigned sids
        for ($i = 0; $i -lt $SidRegularExpressionList.Count; $i++)
        {
            $operation = $operationList[$i]
            switch($operation)
            {
                "equals"    # equals is being used only for one expected results. we need to check that there is only one results and the it equals to the exptected resutls.
                {
                    $foundMatch = FindSIDEqualMatch -userName $SidRegularExpressionList[$i] -sidsWithPrivilege $sidsWithPrivilege
                    if ($ShouldHavePrivilege -eq "1")
                    {
                        # Check that the specified user has the privilege
                        if ($foundMatch -eq $True)
                        {
                            return $hResult, 1
                        }
                    }
                    else
                    {
                        # Check that none of the privileged users is the specifed user
                        if ($foundMatch -ne $True)
                        {
                            return $hResult, 1 # the specifed user has the privilege - test failed
                        }
                    }
                    break
		        }
                "pattern match" 
                {
                    if ($ShouldHavePrivilege -eq "1")
                    {
                        # we need to check that all the sids with the privilege are match to the condition.
                        if ((AllPrivilegedUsersMatchRegex -sidRegulaRExpression $SidRegularExpressionList[$i] -userFilters $UserFiltersString -sidsWithPrivilege $sidsWithPrivilege) -eq $True)
                        {
                            return $hResult, 1
                        }
                    }
                    else
                    {
                        # we need to check that none of the sids with the privilege are match to the condition.
                        if ((NonePrivilegedUsersMatchRegex -sidRegulaRExpression $SidRegularExpressionList[$i] -userFilters $UserFiltersString -sidsWithPrivilege $sidsWithPrivilege) -eq $True)
                        {
                            return $hResult, 1
                        }
                    }
                    break 
		        }
                default
                {
                    throw new Exception(string.Format("Unknown operation: {0}", $operation));
                }
            }
        }
        # if we got here - the specified users doesn't have the specified privilege or all users which have the privilege shouldn't have them
        return $hResult, 0
    }
    catch
    {
        $hResult = -2147024894 #error getting privilege's users from LSA library
        return $hResult, $null
    }    
}

 
<#
    Get user SID pattern, regsity key, and value. 
    return the values of all the users profile who match the sid pattern.
    for user's sid pattern: "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$", regisry key path: \software\policies\microsoft\windows\control panel\desktop   and regsity key: "screensaveactive" the results will be (incase the key value is 1):
    HKEY_USERS\S-1-5-21-12345678-1234567890-123456789-123456\Software\Policies\Microsoft\Windows\Control Panel\Desktop\ScreenSaveActive=1
#>
Function Get-UsersRegistryValuesByUserPattern
{ 
    Param(
        [Parameter()]
        [String]
        $UsersSidPattern,  #the users' sid pattern to search. like '^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$'

        [Parameter()]
        [String]
        $RegistryLocation,  #the registy key path. like '\Software\Policies\Microsoft\Windows\Control Panel\Desktop'

        [Parameter()]
        [String]
        $RegistryKey    #the registry value to search. like 'ScreenSaveActive'
    )

    $hResult = -2147024894 # Registry not found error code
    $registryValues = @()
    
    $HKU = Get-Item Registry::HKEY_USERS

    $matchesProfiles = $HKU.GetSubKeyNames() -match $UsersSidPattern   #find all users' profiles who matches the user's sid pattern

    if($matchesProfiles -ne $null)
    {
        foreach($userProfile in $matchesProfiles)  #for each profile build the expected registy key path, search if the key exists, and get its value.
        {
            $normalizedRegistryKey = "HKEY_USERS\$userProfile$RegistryLocation"
            $registryResult = Get-ItemProperty -Path  "Registry::$normalizedRegistryKey" -Name $RegistryKey -ErrorAction SilentlyContinue
            
            if ($registryResult -ne $null)
            {
                # if the registry key exists. concatenate the full registy key path with the value so we could check in the backend if the result string matches the required regex.
                # for example:  for user's sid pattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$", regisry key path \software\policies\microsoft\windows\control panel\desktop   and regsity key "screensaveactive" the results will be:
                # HKEY_USERS\S-1-5-21-12345678-1234567890-123456789-123456\Software\Policies\Microsoft\Windows\Control Panel\Desktop\ScreenSaveActive=1
                $registryValues += "$normalizedRegistryKey\$RegistryKey=$(($registryResult).$RegistryKey)"                                                       
            
                $hResult = 0
            }
        }
    }
    $registryValues = $registryValues -join ";"
    return $hResult, $registryValues
}

<#
    Helper function for Check-SubCriteriaTest to compare assessor result according to Mcm condition
#>
Function Compare-ResultAndExpectedAccordingToCondition
{ 
    Param(
        [Parameter()]
        [String]
        $result,  # assessor result

        [Parameter()]
        [String]
        $expectedValue,  # Mcm expected value

        [Parameter()]
        [String]
        $McmCondition  # Mcm condition
    )

    switch($McmCondition)
    {
        "equals"
        {
            return $result -eq $expectedValue
        }
        "case insensitive equals"
        {
            return ($result.ToLower()) -eq  ($ExpectedValue.ToLower())
        }
        "greater than"
        {
            return [double]$result -gt [double]$expectedValue
        }
        "greater than or equal"
        {
            return [double]$result -ge [double]$expectedValue
        }
        "less than"
        {
            return [double]$result -lt [double]$expectedValue
        }
        "less than or equal"
        {
            return [double]$result -le [double]$expectedValue
        }
        "not equal"
        {
            return $result -ne $expectedValue
        }
        "case insensitive not equal"
        {
            return ($result.ToLower()) -ne  ($ExpectedValue.ToLower())
        }
        "pattern match"
        {
            return $result -match $expectedValue
        }
        default
        {
            throw string.Format("Unknown Mcm condition: {0}", $McmCondition);
        }
    }
}

<# Helper function to trnaslate user names to sids#>
Function TranslateUserNamesToSID
{
    Param(
        [Parameter()]
        [String[]]
        $userNamesWithRights
    )

    for ($i = 0; $i -lt $userNamesWithRights.Count; $i++)
    {
        try
        {
            $objUser = New-Object System.Security.Principal.NTAccount($userNamesWithRights[$i])
            $strSID = $objUser.Translate([System.Security.Principal.SecurityIdentifier])
            $userNamesWithRights[$i] = $strSID.Value
        }
        catch
        {
            if ($userNamesWithRights[$i].StartsWith("APPLICATION PACKAGE AUTHORITY") -eq $True)
            {
                $userNameWithoutPrefix = $userNamesWithRights[$i].Split('\\')[1]
                $objUser = New-Object System.Security.Principal.NTAccount($userNameWithoutPrefix)
                $strSID = $objUser.Translate([System.Security.Principal.SecurityIdentifier])
                $userNamesWithRights[$i] = $strSID.Value
            }
        }
    }

    return $userNamesWithRights
}

<# Helper function to check that all users permissions are as expected #>
 Function AllUsersPrivilegeMatchExpectedValues
{
    Param(
        [Parameter()]
        [String[]]
        $sidsWithPrivilege,

        [Parameter()]
        [String[]]
        $sidsPrivileges,

        [Parameter()]
        [String]
        $userFilters,

        [Parameter()]
        [String]
        $rightsString,

        [Parameter()]
        [String]
        $rightsExpectedStatusString
                

    )

    $filters = SplitOnOrSubString -ToSplit $userFilters
    $rights = SplitOnOrSubString -ToSplit $rightsString
    $rightsExpectedStatus = SplitOnOrSubString -ToSplit $rightsExpectedStatusString


    for ($i = 0; $i -lt $sidsPrivileges.Count; $i++)
    {
        $sidWithPrivilege = $sidsWithPrivilege[$i]
        $nameOfSid = ([type]'Lsa.LsaLib')::ConvertSIDToUserName($sidWithPrivilege)  # Support for when filter is specifeid by user name
        if (($nameOfSid -ne "" -AND $filters.Contains($nameOfSid) -eq $True) -OR ($filters.Contains($sidWithPrivilege)))
        {
            # In case there are filters, if this user name is filtered, ignore it
            continue;
        }
        $CurrSidPrivileges = SplitOnOrSubString -ToSplit $sidsPrivileges[$i]
        for ($rightIdx = 0; $rightIdx -lt $rights.Count; $rightIdx++)
        {
            if (($rightsExpectedStatus[$rightIdx] -eq "false") -OR ($rightsExpectedStatus[$rightIdx] -eq "0"))
            {
                # User shouldn't have current right, if he has the test fails
                if ($rights[$rightIdx] -in $CurrSidPrivileges)
                {
                    return $False;
                }
            }
            else
            {
                # User should have current right, if he doesn't have it, the test fails
                if (($rights[$rightIdx] -in $CurrSidPrivileges) -eq $False)
                {
                    return $False;
                }
            }
        }
    }
    return $True;
}

<# Helper function to get file path from registries #>
Function GetFilePathFromRegistry
{
    Param(
        [Parameter()]
        [String]
        $systemRootRegistryLocation,

        [Parameter()]
        [String]
        $systemRootRegistryName,

        [Parameter()]
        [String]
        $pathToFileRegexCapturePattern,

        [Parameter()]
        [String]
        $pathToFileRegistryLocation,

        [Parameter()]
        [String]
        $pathToFileRegistryName,

        [Parameter()]
        [String]
        $pathFromSystemRoot
    )
    
    $filePath = $pathFromSystemRoot # if pathToFileRegistryLocation is "\" the path relative to systemroot should appear in pathFromSystemRoot
    if ($pathToFileRegistryLocation -ne "\" -AND $pathFromSystemRoot -eq "\")
    {
        $registryFilePath = (Get-RegistryValue -RegistryLocation $pathToFileRegistryLocation -RegistryKey $pathToFileRegistryName)[1]
        if ($registryFilePath -eq "null")
        {
            return "null" # file path registry doesn't exist
        }
    }


    if ($systemRootRegistryLocation -ne "\")
    {
        # if needed get system root and concat paths
        $systemRootPath = (Get-RegistryValue -RegistryLocation $systemRootRegistryLocation -RegistryKey $systemRootRegistryName)[1]
        if ($systemRootPath -eq "null")
        {
            return "null" # system root registry doesn't exist
        }
    }

    if ($pathToFileRegexCapturePattern -ne "null")
    {
        if ($registryFilePath -match $pathToFileRegexCapturePattern -ne $True)
        {
            if ($registryFilePath.StartsWith($systemRootPath) -eq $True) # sometimes path is already expanded depend on registry type
            {
                $filePath = $registryFilePath
            }
            else
            {
                return "null" # Registry value is missing or its value doesn't match the file path pattern
            }
         
        }
        else
        {
            if ($systemRootRegistryLocation -ne "\")
            {
                # if needed get concat paths
                $filePath = "$systemRootPath$filePath"
            }
            else
            {
                $filePath = $Matches[1]
            }
        }
    }
    else
    {
        if ($systemRootRegistryLocation -ne "\")
        {
            # if needed get concat paths
            $filePath = "$systemRootPath$filePath"
        }
    }
    return $filePath
}

<#
    Check the sids that have rights to a file according to the file ACL.
    that check is used when we want to check specific file privileges of the sids match the specified regex, exceppt for specific users specified as filters.
    file path can be specified as strict path or to be built for example by concatenate system root path with the file path.
    example:
    Check that no one but SYSTEM has rights to the Applicaion event log-
    Check-FileEffectiveRight -SidRegularExpression ".*" -userFiltersString "SYSTEM" -systemRootRegistryLocation "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion" -systemRootRegistryName "SystemRoot" -pathToFileRegexCapturePattern "^%.*%(.*)$" -pathToFileRegistryLocation -"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog\Application" -pathToFileRegistryName "file" -rightsString "standard_delete||standard_write_owner" -rightsExpectedStatusString "false||false"

#>
Function Check-SpecificFileEffectiveRight
{ 
    Param(
        [Parameter()]
        [String]
        $SidRegularExpression,

        [Parameter()]
        [String]
        $UserFiltersString,

        [Parameter()]
        [String]
        $systemRootRegistryLocation,

        [Parameter()]
        [String]
        $systemRootRegistryName,

        [Parameter()]
        [String]
        $pathToFileRegexCapturePattern,

        [Parameter()]
        [String]
        $pathToFileRegistryLocation,

        [Parameter()]
        [String]
        $pathToFileRegistryName,

        [Parameter()]
        [String]
        $pathFromSystemRoot,

        [Parameter()]
        [String]
        $rightsString,

        [Parameter()]
        [String]
        $rightsExpectedStatusString
    )
    
    $hResult = 0    
    # Get file path
    $filePath = GetFilePathFromRegistry -systemRootRegistryLocation $systemRootRegistryLocation -systemRootRegistryName $systemRootRegistryName -pathToFileRegexCapturePattern $pathToFileRegexCapturePattern -pathToFileRegistryLocation $pathToFileRegistryLocation -pathToFileRegistryName $pathToFileRegistryName -pathFromSystemRoot $pathFromSystemRoot
    if ($filePath -eq "null")
    {
        return -1, "false" # couldn't build path - one of the registry doesn't exist
    }

    try
    {
        # get all usernames that has rights to the file
        $ACLList =  Get-Acl -Path $filePath
        $userNamesWithRights = $ACLList.access.IdentityReference.Value

        # get rights per user
        $fileSystemRights = $ACLList |
                        Select-Object -Expand Access |
                        Select-Object -Expand FileSystemRights
        $permissions = @()
        foreach ($right in $fileSystemRights)
        {
            $curPermissions = @()
            $curPermissions += $global:accessMask.Keys |
                    Where-Object { $right.value__ -band $_ } |
                    ForEach-Object { $global:accessMask[$_] }
            $permissions += $curPermissions -join "||"
        }

        # convert usernames to sids
        $userNamesWithRights = TranslateUserNamesToSID -userNamesWithRights $userNamesWithRights

        # we need to check for each user the status of its privilege against the expected privilege stauts.
        if ((AllUsersPrivilegeMatchExpectedValues -sidsWithPrivilege $userNamesWithRights -sidsPrivileges $permissions -userFilters $UserFiltersString -rightsString $rightsString -rightsExpectedStatusString $rightsExpectedStatusString) -eq $True)
        {
            return $hResult, "true"
        }
        return $hResult, "false"
    }
    catch
    {
        $hResult = -2147024894 #error getting the file ACL
        return $hResult, "false"
    }    
}

<#
    Check the sids that have rights to a file according to the file ACL.
    that check is used when we want to check that none of the sids match the specified regex have a rights to the rule, but specific users specified as filters.
    file path can be specified as strict path or to be built for example by concatenate system root path with the file path.
    example:
    Check that no one but SYSTEM has rights to the Applicaion event log-
    Check-FileEffectiveRight -SidRegularExpression ".*" -userFiltersString "SYSTEM" -systemRootRegistryLocation "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion" -systemRootRegistryName "SystemRoot" -pathToFileRegexCapturePattern "^%.*%(.*)$" -pathToFileRegistryLocation -"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog\Application" -pathToFileRegistryName "file" 

#>
Function Check-FileEffectiveRight
{ 
    Param(
        [Parameter()]
        [String]
        $SidRegularExpression,

        [Parameter()]
        [String]
        $UserFiltersString,

        [Parameter()]
        [String]
        $systemRootRegistryLocation,

        [Parameter()]
        [String]
        $systemRootRegistryName,

        [Parameter()]
        [String]
        $pathToFileRegexCapturePattern,

        [Parameter()]
        [String]
        $pathToFileRegistryLocation,

        [Parameter()]
        [String]
        $pathToFileRegistryName,

        [Parameter()]
        [String]
        $pathFromSystemRoot
    )
    
    $hResult = 0    
    # Get file path
    $filePath = GetFilePathFromRegistry -systemRootRegistryLocation $systemRootRegistryLocation -systemRootRegistryName $systemRootRegistryName -pathToFileRegexCapturePattern $pathToFileRegexCapturePattern -pathToFileRegistryLocation $pathToFileRegistryLocation -pathToFileRegistryName $pathToFileRegistryName -pathFromSystemRoot $pathFromSystemRoot
    if ($filePath -eq "null")
    {
        return -1, "false" # couldn't build path - one of the registry doesn't exist
    }

    try
    {
        # get all usernames that has rights to the file
        $ACLList =  Get-Acl -Path $filePath
        $userNamesWithRights = $ACLList.access.IdentityReference.Value

        # convert usernames to sids
        $userNamesWithRights = TranslateUserNamesToSID -userNamesWithRights $userNamesWithRights

        # we need to check that none of the sids with the privilege are match to the condition.
        if ((NonePrivilegedUsersMatchRegex -sidRegulaRExpression $SidRegularExpression -userFilters $UserFiltersString -sidsWithPrivilege $userNamesWithRights) -eq $True)
        {
            return $hResult, "true"
        }
        return $hResult, "false"
    }
    catch
    {
        $hResult = -2147024894 #error getting the file ACL
        return $hResult, "false"
    }    
}

<#
    Check the sids that have rights to a registry key according to the file ACL.
    that check is used when we want to check specific file privileges of the sids match the specified regex, exceppt for specific users specified as filters.
    file path can be specified as strict path or to be built for example by concatenate system root path with the file path.
    example:
    Check that no one but SYSTEM has rights to the Applicaion event log-
    Check-SpecificRegEffectiveRight -SidRegularExpression ".*" -userFiltersString "SYSTEM"  -registryKey "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\Application"  -rightsString "standard_delete||standard_write_owner" -rightsExpectedStatusString "false||false"

#>
Function Check-SpecificRegEffectiveRight
{ 
    Param(
        [Parameter()]
        [String]
        $SidRegularExpression,

        [Parameter()]
        [String]
        $UserFiltersString,

        [Parameter()]
        [String]
        $RegistryHive,

        [Parameter()]
        [String]
        $RegistryKey,


        [Parameter()]
        [String]
        $rightsString,

        [Parameter()]
        [String]
        $rightsExpectedStatusString
    )
    
    $hResult = 0    
    # Get file path

    try
    {
        # get all usernames that has rights to the file
        $ACLList =  Get-Acl -Path "${RegistryHive}:\$RegistryKey"
        $userNamesWithRights = $ACLList.access.IdentityReference.Value

        # get rights per user
        $fileSystemRights = $ACLList |
                        Select-Object -Expand Access |
                        Select-Object -Expand RegistryRights
        $permissions = @()
        foreach ($right in $fileSystemRights)
        {
            $curPermissions = @()
            $curPermissions += $global:regAccessMask.Keys |
                    Where-Object { $right.value__ -band $_ } |
                    ForEach-Object { $global:regAccessMask[$_] }
            $permissions += $curPermissions -join "||"
        }

        # convert usernames to sids
        $userNamesWithRights = TranslateUserNamesToSID -userNamesWithRights $userNamesWithRights

        # we need to check for each user the status of its privilege against the expected privilege stauts.
        if ((AllUsersPrivilegeMatchExpectedValues -sidsWithPrivilege $userNamesWithRights -sidsPrivileges $permissions -userFilters $UserFiltersString -rightsString $rightsString -rightsExpectedStatusString $rightsExpectedStatusString) -eq $True)
        {
            return $hResult, "true"
        }
        return $hResult, "false"
    }
    catch
    {
        $hResult = -2147024894 #error getting the file ACL
        return $hResult, "false"
    }    
}

<#
    Check the sids that have rights to a registry key according to the file ACL.
    that check is used when we want to check that none of the sids match the specified regex have a rights to the rule, but specific users specified as filters.
    file path can be specified as strict path or to be built for example by concatenate system root path with the file path.
    example:
    Check that no one but SYSTEM has rights to the Applicaion event log-
    Check-RegEffectiveRight -SidRegularExpression ".*" -userFiltersString "SYSTEM"  -registryKey "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\Application"

#>
Function Check-RegEffectiveRight
{ 
    Param(
        [Parameter()]
        [String]
        $SidRegularExpression,

        [Parameter()]
        [String]
        $UserFiltersString,

        [Parameter()]
        [String]
        $RegistryHive,

        [Parameter()]
        [String]
        $RegistryKey

    )
    
    $hResult = 0    

    try
    {
        # get all usernames that has rights to the file
        $ACLList =  Get-Acl -Path "${RegistryHive}:\$RegistryKey"
        $userNamesWithRights = $ACLList.access.IdentityReference.Value

        # convert usernames to sids
        $userNamesWithRights = TranslateUserNamesToSID -userNamesWithRights $userNamesWithRights

        # we need to check that none of the sids with the privilege are match to the condition.
        if ((NonePrivilegedUsersMatchRegex -sidRegulaRExpression $SidRegularExpression -userFilters $UserFiltersString -sidsWithPrivilege $userNamesWithRights) -eq $True)
        {
            return $hResult, "true"
        }
        return $hResult, "false"
    }
    catch
    {
        $hResult = -2147024894 #error getting the file ACL
        return $hResult, "false"
    }    
}


<#
    Check sub criteria result. 
    If all sub criteria tests pass returns the tuple (0,"true"), else returns (0,"false").
    If an exception was caught returns (-1,"false")
#>
Function Check-SubCriteriaTest
{ 
    Param(
        [Parameter()]
        [String]
        $CommandsString,  #all sub tests commands (corresponding enum from collection functions as string)

        [Parameter()]
        [String]
        $ExecutionParamsString,  #all sub tests params separated between tests by '|' and between each tests params by ','

        [Parameter()]
        [String]
        $AssessorConditionsString,  #each test assessor condition

        [Parameter()]
        [String]
        $AssessorValuesString,  #each test assessor expected value

        [Parameter()]
        [String]
        $McmConditionsString,  #each test Mcm condition

        [Parameter()]
        [String]
        $McmValuesString,  #each test Mcm expected value

        [Parameter()]
        [String]
        $SubCriteriaOperator,  #sub criteria logical operator

        [Parameter()]
        [String]
        $NestingLevel  #sub criteria nesting level
    )

    $Option = [System.StringSplitOptions]::RemoveEmptyEntries
    $NestedSubCriteriaTestSeparator = [string[]]@("<!#!>" + $NestingLevel + "</!#!>")
    $subTestParamsSeparator = [string[]]@("<,>")
    $Separator = [string[]]@("<#>" + $NestingLevel + "</#>")
    $NestedSubCriteriaTestSeparator = [string[]]@("<!#!>" + $NestingLevel + "</!#!>")

    $commands = $CommandsString.Split($Separator,$Option)
    $executionParams = $ExecutionParamsString.Split($Separator,$Option)
    $assessorConditions = $AssessorConditionsString.Split($Separator,$Option)
    $assessorExpectedValues = $AssessorValuesString.Split($Separator,$Option)
    $mcmConditions = $McmConditionsString.Split($Separator,$Option)
    $mcmExpectedValues = $McmValuesString.Split($Separator,$Option)

            for ($i = 0; $i -lt $commands.Count; $i++)
            {
                $subTestExecutionParams = $executionParams[$i].Split($subTestParamsSeparator, $Option);
                try
                {
                    switch ($commands[$i])
                    {
                        "GetRegistryValue"
                        {
                            $assessorResult = Get-RegistryValue -RegistryLocation $subTestExecutionParams[0] -RegistryKey $subTestExecutionParams[1]
                            break;
                        }                        
                        "GetRegistryNameByValue"
                        {
                            $assessorResult = Get-RegistryKeyNameByValue -RegistryLocation $subTestExecutionParams[0] -RegistryKeyValue $assessorExpectedValues[$i]
                            break;
                        }
                        "GetRegistryValueByPattern"
                        {
                            $assessorResult = Get-UsersRegistryValuesByUserPattern -UsersSidPattern $subTestExecutionParams[0] -RegistryLocation $subTestExecutionParams[1] -RegistryKey $subTestExecutionParams[2]
                            break;
                        }
                        "CheckRegistryValueByPattern"
                        {
                            $assessorResult = Check-RegistryValueByPattern -RegistryLocation $subTestExecutionParams[0] -RegistryKey $subTestExecutionParams[1] -expectedValue $assessorExpectedValues[$i]
                            break;
                        }
                        "CompareRegistryValueOrNotExist"
                        {
                            $assessorResult = Compare-RegistryValueOrNotExist -RegistryLocation $subTestExecutionParams[0] -RegistryKey $subTestExecutionParams[1] -ExpectedValue $subTestExecutionParams[2]
                            break;
                        }
                        "GetWmiValue"
                        {
                            $assessorResult = Get-WmiObjectValue -Namespace $subTestExecutionParams[0] -Query $subTestExecutionParams[1] -OutputFieldName $subTestExecutionParams[2]
                            break;
                        }
                        "CompareAllWmiObjects"
                        {
                            $assessorResult = Compare-AllWmiObjects -Namespace $subTestExecutionParams[0] -Query $subTestExecutionParams[1] -OutputFieldName $subTestExecutionParams[2] -ExpectedValue $subTestExecutionParams[3] -allOrNone $subTestExecutionParams[4]
                            break;
                        }
                        "CompareWmiWithMultipleValues"
                        {
                            $assessorResult = Compare-WmiWithMultipleValues -Namespace $subTestExecutionParams[0] -Query $subTestExecutionParams[1] -OutputFieldNamesString $subTestExecutionParams[2] -ExpectedValuesString $subTestExecutionParams[3]
                            break;
                        }
                        "GetWmiCount"
                        {
                            $assessorResult = Get-WmiObjectCount -Namespace $subTestExecutionParams[0] -Query $subTestExecutionParams[1]
                            break;
                        }
                        "GetPrivilegeUsersByCondition"
                        {
                            $assessorResult = Get-PrivilegeUsersWithCondition -privilegeName $subTestExecutionParams[0] -operation $subTestExecutionParams[1] -SidRegulaRExpression $subTestExecutionParams[2] -AtLeastOneCheck $subTestExecutionParams[3]
                            break;
                        }
                        "CheckUsersPrivilegeBySidAndPrivilege"
                        {
                            $assessorResult = Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName $subTestExecutionParams[0] -operations $subTestExecutionParams[1] -SidRegularExpressions $subTestExecutionParams[2] -ShouldHavePrivilege $subTestExecutionParams[3] -UserFiltersString $subTestExecutionParams[4]
                            break;
                        }
                        "GetAccountPolicyValue"
                        {
                            $assessorResult = Get-AccountsPoliciesState -PropertyToCheck $subTestExecutionParams[0]
                            break;
                        }
                        "GetAuditEventPolicySubcategoriesValue"
                        {
                            $assessorResult = Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck $subTestExecutionParams[0]
                            break;
                        }
                        "GetUserCountByCondition"
                        {
                            $assessorResult = Get-LocalUserCountBySid -SidRegulaRExpression $subTestExecutionParams[0] -PropertyNameToCheck $subTestExecutionParams[1] -PropertyValueToCheck $subTestExecutionParams[2]
                            break;
                        }
                        "GetUserCountByPossibleMatchCondition"
                        {
                            $assessorResult = Get-LocalUserCountBySid -SidRegulaRExpression $subTestExecutionParams[0] -PropertyNameToCheck $subTestExecutionParams[1] -PropertyValueToCheck $subTestExecutionParams[2] -useMatchRegexToCompare $subTestExecutionParams[3]
                            break;
                        }
                        "GetUserCountByName"
                        {
                            $assessorResult = Get-LocalUserCountByName -UserName $subTestExecutionParams[0]
                            break;
                        }
                        "GetTrusteeName"
                        {
                            $assessorResult = Get-TrusteeName -SidRegulaRExpression $subTestExecutionParams[0]
                            break;
                        }
                        "SubCriteria"
                        {
                            $subTestExecutionParams = $executionParams[$i].Split($NestedSubCriteriaTestSeparator, $Option)
                            $subNestingLevel = [string]([int]($NestingLevel) + 1)
                            $assessorResult = Check-SubCriteriaTest -CommandsString $subTestExecutionParams[0] -ExecutionParamsString $subTestExecutionParams[1] -AssessorConditionsString $subTestExecutionParams[2] -AssessorValuesString $subTestExecutionParams[3] -McmConditionsString $subTestExecutionParams[4] -McmValuesString $subTestExecutionParams[5] -SubCriteriaOperator $subTestExecutionParams[6] -NestingLevel $subNestingLevel
                            break;
                        }
                        "CheckFileExistenceByPathCmd"
                        {
                            $assessorResult = Check-FileExistenceByPath -Path $subTestExecutionParams[0]
                            break;
                        }
                        "CompareToDynamicTrusteeName"
                        {
                            $assessorResult = Compare-ToDynamicTrusteeName -SidRegulaRExpression $subTestExecutionParams[0] -DynamicExpectedValueField $subTestExecutionParams[1] -FixedExpectedValue $subTestExecutionParams[2]
                            break;
                        }
                        "CompareRegistryWithMultipleAcceptedValues"
                        {
                            $AllValueMustMatch = "false"
                            if ($subTestExecutionParams.Count -eq 6)
                            {
                                $AllValueMustMatch = $subTestExecutionParams[5] 
                            }
                            $assessorResult = Compare-RegistryWithMultipleAcceptedValues -RegistryLocation $subTestExecutionParams[0] -RegistryKey $subTestExecutionParams[1] -AcceptedValuesString $subTestExecutionParams[2] -RegistryMayNotExist $subTestExecutionParams[3] -CompareMethods $subTestExecutionParams[4] -AllValueMustMatch $AllValueMustMatch
                        }
                        "CheckAtLeastOneRegistryExists"
                        {
                            $assessorResult = Check-AtLeastOneRegistryExists -RegistryLocationsString $subTestExecutionParams[0] -RegistryKeysString $subTestExecutionParams[1]
                            break;
                        }
                        "CheckRegistryValueNameExistenceByPattern"
                        {
                            $assessorResult = Check-RegistryValueNameExistanceByPattern -RegistryLocationString $subTestExecutionParams[0] -NamePattern $subTestExecutionParams[1]
                            break;
                        }
                        "CheckBitwiseAndValue"
                        {
                            $assessorResult = Check-BitwiseAndValue -RegistryLocation $subTestExecutionParams[0] -RegistryKey $subTestExecutionParams[1] -ExpectedValue $subTestExecutionParams[2]
                            break;
                        }
                        "CompareLockoutValues"
                        {
                            $assessorResult = Compare-LockoutValues -propertiesToCheckString $subTestExecutionParams[0] -conditionsString $subTestExecutionParams[1] -expectedValuesString $subTestExecutionParams[2]
                            break;
                        }
                        "CheckFileEffectiveRight"
                        {
                            $assessorResult = Check-FileEffectiveRight -SidRegularExpression $subTestExecutionParams[0] -UserFiltersString $subTestExecutionParams[1] -systemRootRegistryLocation $subTestExecutionParams[2] -systemRootRegistryName $subTestExecutionParams[3] -pathToFileRegexCapturePattern $subTestExecutionParams[4] -pathToFileRegistryLocation $subTestExecutionParams[5] -pathToFileRegistryName $subTestExecutionParams[6] -pathFromSystemRoot $subTestExecutionParams[7]
                            break;
                        }
                        "CheckSpecificFileEffectiveRight"
                        {
                            $assessorResult = Check-SpecificFileEffectiveRight -SidRegularExpression $subTestExecutionParams[0] -UserFiltersString $subTestExecutionParams[1] -systemRootRegistryLocation $subTestExecutionParams[2] -systemRootRegistryName $subTestExecutionParams[3] -pathToFileRegexCapturePattern $subTestExecutionParams[4] -pathToFileRegistryLocation $subTestExecutionParams[5] -pathToFileRegistryName $subTestExecutionParams[6] -pathFromSystemRoot $subTestExecutionParams[7] -rightsString $subTestExecutionParams[8] -rightsExpectedStatusString $subTestExecutionParams[9]
                            break;
                        }
                        "CheckRegEffectiveRight"
                        {
                            $assessorResult = Check-RegEffectiveRight -SidRegularExpression $subTestExecutionParams[0] -UserFiltersString $subTestExecutionParams[1] -RegistryHive $subTestExecutionParams[2] -RegistryKey $subTestExecutionParams[3]
                            break;
                        }
                        "CheckSpecificRegEffectiveRight"
                        {
                            $assessorResult = Check-SpecificRegEffectiveRight -SidRegularExpression $subTestExecutionParams[0] -UserFiltersString $subTestExecutionParams[1] -RegistryHive $subTestExecutionParams[2] -RegistryKey $subTestExecutionParams[3] -rightsString $subTestExecutionParams[4] -rightsExpectedStatusString $subTestExecutionParams[5]
                            break;
                        }
                        "GetRegistryValueByNamePattern"
                        {
                            $assessorResult = Get-RegistryValueByNamePattern -RegistryLocation $subTestExecutionParams[0] -NamePattern $subTestExecutionParams[1]
                            break;
                        }
                        default
                        {
                            throw new Exception("subcriteria contains unrecognized test option")
                        }
                    }
                }
                catch
                {
                    return -1, "false"
                }

                try
                {
                    $checkResult = (Compare-ResultAndExpectedAccordingToCondition -result $assessorResult[1] -expectedValue $mcmExpectedValues[$i] -McmCondition $mcmConditions[$i])
                }
                catch [System.Management.Automation.RuntimeException]
                {
                    # means we had conversion issue from result value to double in case of gt,gte,lt,lte comparision
                    $checkResult = $False
                }
                
                if ($checkResult -ne $True)
                {
                    if ($SubCriteriaOperator -eq "AND")
                    {
                        return 0, "false"
                    }
                }
                else
                {
                    if ($SubCriteriaOperator -eq "OR")
                    {
                        return 0, "true"
                    }   
                }
            }

            if ($SubCriteriaOperator -eq "OR")
            {
                # if we got here we have OR operator and none of the test succeded
                return 0, "false"
            }  

            # if we got here we have AND operator and all tests succeded
            return 0, "true"
        }

#endregion Auxiliary inner functions

##########################################################################################################################################
# Section 3 - Collcet data - The below commands are sutogenerated from an XCCDF and OVAL baseline files:
##########################################################################################################################################

# Initilize the collected values list:
$collectedBaselineValues = @()
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "password_hist_len" -CollectedDataResult (Get-AccountsPoliciesState -PropertyToCheck "LengthOfPasswordHistory" ) } catch { New-Object CollectedBaselineValue(-1,"password_hist_len", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "max_passwd_age" -CollectedDataResult (Get-AccountsPoliciesState -PropertyToCheck "MaximumPasswordAge" ) } catch { New-Object CollectedBaselineValue(-1,"max_passwd_age", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "min_passwd_age" -CollectedDataResult (Get-AccountsPoliciesState -PropertyToCheck "MinimumPasswordAge" ) } catch { New-Object CollectedBaselineValue(-1,"min_passwd_age", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "min_passwd_len" -CollectedDataResult (Get-AccountsPoliciesState -PropertyToCheck "MinimumPasswordLength" ) } catch { New-Object CollectedBaselineValue(-1,"min_passwd_len", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "password_complexity" -CollectedDataResult (Get-AccountsPoliciesState -PropertyToCheck "PasswordComplexity" ) } catch { New-Object CollectedBaselineValue(-1,"password_complexity", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "reversible_encryption" -CollectedDataResult (Get-AccountsPoliciesState -PropertyToCheck "ReversibleEncryption" ) } catch { New-Object CollectedBaselineValue(-1,"reversible_encryption", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "lockout_duration" -CollectedDataResult (Get-AccountsPoliciesState -PropertyToCheck "LockoutDuration" ) } catch { New-Object CollectedBaselineValue(-1,"lockout_duration", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "lockout_threshold" -CollectedDataResult (Get-AccountsPoliciesState -PropertyToCheck "LockoutThreshold" ) } catch { New-Object CollectedBaselineValue(-1,"lockout_threshold", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "lockout_observation_window" -CollectedDataResult (Get-AccountsPoliciesState -PropertyToCheck "LockoutObservationWindow" ) } catch { New-Object CollectedBaselineValue(-1,"lockout_observation_window", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_TRUSTED_CREDMAN_ACCESS_NAME_User_Count_equals_0" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_TRUSTED_CREDMAN_ACCESS_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_TRUSTED_CREDMAN_ACCESS_NAME_User_Count_equals_0", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_NETWORK_LOGON_NAME_list_pattern_match_S-1-5-32-_544_555_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_NETWORK_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_NETWORK_LOGON_NAME_list_pattern_match_S-1-5-32-_544_555_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_TCB_NAME_User_Count_equals_0" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_TCB_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_TCB_NAME_User_Count_equals_0", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_INCREASE_QUOTA_NAME_list_pattern_match_S-1-5-_32-544_19_20_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_INCREASE_QUOTA_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_INCREASE_QUOTA_NAME_list_pattern_match_S-1-5-_32-544_19_20_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_INTERACTIVE_LOGON_NAME_list_pattern_match_S-1-5-32-_544_545_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_INTERACTIVE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_INTERACTIVE_LOGON_NAME_list_pattern_match_S-1-5-32-_544_545_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_REMOTE_INTERACTIVE_LOGON_NAME_list_pattern_match_S-1-5-32-_544_555_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_REMOTE_INTERACTIVE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_REMOTE_INTERACTIVE_LOGON_NAME_list_pattern_match_S-1-5-32-_544_555_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_BACKUP_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_BACKUP_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_BACKUP_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_SYSTEMTIME_NAME_list_pattern_match_S-1-5-_32-544_19_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_SYSTEMTIME_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_SYSTEMTIME_NAME_list_pattern_match_S-1-5-_32-544_19_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_TIME_ZONE_NAME_list_pattern_match_S-1-5-_32-544_19_32-545_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_TIME_ZONE_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_TIME_ZONE_NAME_list_pattern_match_S-1-5-_32-544_19_32-545_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_CREATE_PAGEFILE_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_CREATE_PAGEFILE_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_CREATE_PAGEFILE_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_CREATE_TOKEN_NAME_User_Count_equals_0" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_CREATE_TOKEN_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_CREATE_TOKEN_NAME_User_Count_equals_0", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_CREATE_GLOBAL_NAME_list_pattern_match_S-1-5-_32-544_19_20_6_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_CREATE_GLOBAL_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_CREATE_GLOBAL_NAME_list_pattern_match_S-1-5-_32-544_19_20_6_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_CREATE_PERMANENT_NAME_User_Count_equals_0" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_CREATE_PERMANENT_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_CREATE_PERMANENT_NAME_User_Count_equals_0", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_CREATE_SYMBOLIC_LINK_NAME_list_pattern_match_S-1-5-_32-544_83-0_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_CREATE_SYMBOLIC_LINK_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_CREATE_SYMBOLIC_LINK_NAME_list_pattern_match_S-1-5-_32-544_83-0_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DEBUG_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DEBUG_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DEBUG_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_NETWORK_LOGON_NAME_equals_S-1-5-32-546_at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_NETWORK_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_NETWORK_LOGON_NAME_equals_S-1-5-32-546_at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_NETWORK_LOGON_NAME_equals_S-1-5-113_at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_NETWORK_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_NETWORK_LOGON_NAME_equals_S-1-5-113_at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_BATCH_LOGON_NAME_equals_S-1-5-32-546_at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_BATCH_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_BATCH_LOGON_NAME_equals_S-1-5-32-546_at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_SERVICE_LOGON_NAME_equals_S-1-5-32-546_at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_SERVICE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_SERVICE_LOGON_NAME_equals_S-1-5-32-546_at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_INTERACTIVE_LOGON_NAME_equals_S-1-5-32-546_at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_INTERACTIVE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_INTERACTIVE_LOGON_NAME_equals_S-1-5-32-546_at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME_equals_S-1-5-32-546_at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME_equals_S-1-5-32-546_at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME_equals_S-1-5-113_at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME_equals_S-1-5-113_at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_ENABLE_DELEGATION_NAME_User_Count_equals_0" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_ENABLE_DELEGATION_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_ENABLE_DELEGATION_NAME_User_Count_equals_0", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_REMOTE_SHUTDOWN_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_REMOTE_SHUTDOWN_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_REMOTE_SHUTDOWN_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_AUDIT_NAME_list_pattern_match_S-1-5-_19_20_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_AUDIT_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_AUDIT_NAME_list_pattern_match_S-1-5-_19_20_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_IMPERSONATE_NAME_list_pattern_match_S-1-5-_32-544_19_20_6_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_IMPERSONATE_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_IMPERSONATE_NAME_list_pattern_match_S-1-5-_32-544_19_20_6_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_INC_BASE_PRIORITY_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_INC_BASE_PRIORITY_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_INC_BASE_PRIORITY_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_LOAD_DRIVER_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_LOAD_DRIVER_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_LOAD_DRIVER_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_LOCK_MEMORY_NAME_User_Count_equals_0" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_LOCK_MEMORY_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_LOCK_MEMORY_NAME_User_Count_equals_0", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_BATCH_LOGON_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_BATCH_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_BATCH_LOGON_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_SERVICE_LOGON_NAME_User_Count_equals_0" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_SERVICE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_SERVICE_LOGON_NAME_User_Count_equals_0", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_SECURITY_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_SECURITY_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_SECURITY_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_RELABEL_NAME_User_Count_equals_0" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_RELABEL_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_RELABEL_NAME_User_Count_equals_0", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_SYSTEM_ENVIRONMENT_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_SYSTEM_ENVIRONMENT_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_SYSTEM_ENVIRONMENT_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_MANAGE_VOLUME_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_MANAGE_VOLUME_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_MANAGE_VOLUME_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_PROF_SINGLE_PROCESS_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_PROF_SINGLE_PROCESS_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_PROF_SINGLE_PROCESS_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_SYSTEM_PROFILE_NAME_list_pattern_match_S-1-5-_32-544_80_-_d{9,10}_{1,5}_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_SYSTEM_PROFILE_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_SYSTEM_PROFILE_NAME_list_pattern_match_S-1-5-_32-544_80_-_d{9,10}_{1,5}_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_ASSIGNPRIMARYTOKEN_NAME_list_pattern_match_S-1-5-_19_20_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_ASSIGNPRIMARYTOKEN_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_ASSIGNPRIMARYTOKEN_NAME_list_pattern_match_S-1-5-_19_20_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_RESTORE_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_RESTORE_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_RESTORE_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_SHUTDOWN_NAME_list_pattern_match_S-1-5-32-_544_545_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_SHUTDOWN_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_SHUTDOWN_NAME_list_pattern_match_S-1-5-32-_544_545_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_TAKE_OWNERSHIP_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_TAKE_OWNERSHIP_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_TAKE_OWNERSHIP_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "_S_-1_-5_-21_-_d+_-_d+_-_d+_-500__Disabled_False" -CollectedDataResult (Get-LocalUserCountBySid -SidRegulaRExpression '^S\-1\-5\-21\-\d+\-\d+\-\d+\-500$' -PropertyNameToCheck "Disabled" -PropertyValueToCheck "False" ) } catch { New-Object CollectedBaselineValue(-1,"_S_-1_-5_-21_-_d+_-_d+_-_d+_-500__Disabled_False", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\noconnecteduser" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "noconnecteduser"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\noconnecteduser", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "_S_-1_-5_-21_-_d+_-_d+_-_d+_-501__Disabled_False" -CollectedDataResult (Get-LocalUserCountBySid -SidRegulaRExpression '^S\-1\-5\-21\-\d+\-\d+\-\d+\-501$' -PropertyNameToCheck "Disabled" -PropertyValueToCheck "False" ) } catch { New-Object CollectedBaselineValue(-1,"_S_-1_-5_-21_-_d+_-_d+_-_d+_-501__Disabled_False", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\limitblankpassworduse" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "limitblankpassworduse"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\limitblankpassworduse", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "Administrator_none_exist" -CollectedDataResult (Get-LocalUserCountByName -Username 'Administrator' ) } catch { New-Object CollectedBaselineValue(-1,"Administrator_none_exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "Guest_none_exist" -CollectedDataResult (Get-LocalUserCountByName -Username 'Guest' ) } catch { New-Object CollectedBaselineValue(-1,"Guest_none_exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\scenoapplylegacyauditpolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "scenoapplylegacyauditpolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\scenoapplylegacyauditpolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\crashonauditfail" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "crashonauditfail"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\crashonauditfail", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\allocatedasd" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon" -RegistryKey "allocatedasd"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\allocatedasd", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\print\providers\lanman print services\servers\addprinterdrivers" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\print\providers\lanman print services\servers" -RegistryKey "addprinterdrivers"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\print\providers\lanman print services\servers\addprinterdrivers", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\requiresignorseal" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters" -RegistryKey "requiresignorseal"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\requiresignorseal", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\sealsecurechannel" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters" -RegistryKey "sealsecurechannel"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\sealsecurechannel", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\signsecurechannel" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters" -RegistryKey "signsecurechannel"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\signsecurechannel", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\disablepasswordchange" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters" -RegistryKey "disablepasswordchange"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\disablepasswordchange", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\maximumpasswordage" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters" -RegistryKey "maximumpasswordage"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\maximumpasswordage", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\requirestrongkey" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters" -RegistryKey "requirestrongkey"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\requirestrongkey", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\dontdisplaylastusername" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "dontdisplaylastusername"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\dontdisplaylastusername", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\disablecad" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "disablecad"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\disablecad", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\maxdevicepasswordfailedattempts" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "maxdevicepasswordfailedattempts"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\maxdevicepasswordfailedattempts", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\inactivitytimeoutsecs" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "inactivitytimeoutsecs"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\inactivitytimeoutsecs", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\legalnoticetext_Pattern_match_.+" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "legalnoticetext" -expectedValue ".+" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\legalnoticetext_Pattern_match_.+", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\legalnoticecaption_Pattern_match_.+" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "legalnoticecaption" -expectedValue ".+" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\legalnoticecaption_Pattern_match_.+", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\cachedlogonscount_Pattern_match_^[43210]$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon" -RegistryKey "cachedlogonscount" -expectedValue "^[43210]$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\cachedlogonscount_Pattern_match_^[43210]$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\passwordexpirywarning" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon" -RegistryKey "passwordexpirywarning"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\passwordexpirywarning", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\scremoveoption_Pattern_match_^(1|2|3)$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon" -RegistryKey "scremoveoption" -expectedValue "^(1|2|3)$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\scremoveoption_Pattern_match_^(1|2|3)$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters\requiresecuritysignature" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters" -RegistryKey "requiresecuritysignature"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters\requiresecuritysignature", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters\enablesecuritysignature" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters" -RegistryKey "enablesecuritysignature"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters\enablesecuritysignature", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters\enableplaintextpassword" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters" -RegistryKey "enableplaintextpassword"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters\enableplaintextpassword", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\autodisconnect" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "autodisconnect"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\autodisconnect", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\requiresecuritysignature" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "requiresecuritysignature"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\requiresecuritysignature", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\enablesecuritysignature" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "enablesecuritysignature"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\enablesecuritysignature", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\enableforcedlogoff" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "enableforcedlogoff"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\enableforcedlogoff", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\smbservernamehardeninglevel" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "smbservernamehardeninglevel"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\smbservernamehardeninglevel", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_rsop_computer_SELECT_Setting_FROM_RSOP_SecuritySettingBoolean_WHERE_KeyName=_LSAAnonymousNameLookup__AND_Precedence=1_setting" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\rsop\computer" -Query "SELECT Setting FROM RSOP_SecuritySettingBoolean WHERE KeyName='LSAAnonymousNameLookup' AND Precedence=1" -OutputFieldName "setting" ) } catch { New-Object CollectedBaselineValue(-1,"root_rsop_computer_SELECT_Setting_FROM_RSOP_SecuritySettingBoolean_WHERE_KeyName=_LSAAnonymousNameLookup__AND_Precedence=1_setting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\restrictanonymoussam" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "restrictanonymoussam"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\restrictanonymoussam", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\restrictanonymous" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "restrictanonymous"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\restrictanonymous", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\disabledomaincreds" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "disabledomaincreds"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\disabledomaincreds", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\everyoneincludesanonymous" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "everyoneincludesanonymous"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\everyoneincludesanonymous", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionpipes_Pattern_match_.+" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "nullsessionpipes" -expectedValue ".+" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionpipes_Pattern_match_.+", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedexactpaths\machine_Pattern_match_^((System\\CurrentControlSet\\Control\\ProductOptions)|(System\\CurrentControlSet\\Control\\Server Applications)|(Software\\Microsoft\\Windows NT\\CurrentVersion))$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedexactpaths" -RegistryKey "machine" -expectedValue "^((System\\CurrentControlSet\\Control\\ProductOptions)|(System\\CurrentControlSet\\Control\\Server Applications)|(Software\\Microsoft\\Windows NT\\CurrentVersion))$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedexactpaths\machine_Pattern_match_^((System\\CurrentControlSet\\Control\\ProductOptions)|(System\\CurrentControlSet\\Control\\Server Applications)|(Software\\Microsoft\\Windows NT\\CurrentVersion))$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths\machine_Pattern_match_^((System\\CurrentControlSet\\Control\\Print\\Printers)|(System\\CurrentControlSet\\Services\\Eventlog)|(Software\\Microsoft\\OLAP Server)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Print)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows)|(System\\CurrentControlSet\\Control\\ContentIndex)|(System\\CurrentControlSet\\Control\\Terminal Server)|(System\\CurrentControlSet\\Control\\Terminal Server\\UserConfig)|(System\\CurrentControlSet\\Control\\Terminal Server\\DefaultUserConfiguration)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Perflib)|(System\\CurrentControlSet\\Services\\SysmonLog))$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths" -RegistryKey "machine" -expectedValue "^((System\\CurrentControlSet\\Control\\Print\\Printers)|(System\\CurrentControlSet\\Services\\Eventlog)|(Software\\Microsoft\\OLAP Server)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Print)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows)|(System\\CurrentControlSet\\Control\\ContentIndex)|(System\\CurrentControlSet\\Control\\Terminal Server)|(System\\CurrentControlSet\\Control\\Terminal Server\\UserConfig)|(System\\CurrentControlSet\\Control\\Terminal Server\\DefaultUserConfiguration)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Perflib)|(System\\CurrentControlSet\\Services\\SysmonLog))$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths\machine_Pattern_match_^((System\\CurrentControlSet\\Control\\Print\\Printers)|(System\\CurrentControlSet\\Services\\Eventlog)|(Software\\Microsoft\\OLAP Server)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Print)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows)|(System\\CurrentControlSet\\Control\\ContentIndex)|(System\\CurrentControlSet\\Control\\Terminal Server)|(System\\CurrentControlSet\\Control\\Terminal Server\\UserConfig)|(System\\CurrentControlSet\\Control\\Terminal Server\\DefaultUserConfiguration)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Perflib)|(System\\CurrentControlSet\\Services\\SysmonLog))$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\restrictnullsessaccess" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "restrictnullsessaccess"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\restrictnullsessaccess", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\restrictremotesam" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "restrictremotesam"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\restrictremotesam", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionshares" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "nullsessionshares"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionshares", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionshares_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "nullsessionshares" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionshares_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\forceguest" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "forceguest"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\forceguest", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\usemachineid" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "usemachineid"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\usemachineid", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\allownullsessionfallback" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0" -RegistryKey "allownullsessionfallback"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\allownullsessionfallback", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\pku2u\allowonlineid" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa\pku2u" -RegistryKey "allowonlineid"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\pku2u\allowonlineid", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters\supportedencryptiontypes" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters" -RegistryKey "supportedencryptiontypes"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters\supportedencryptiontypes", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\nolmhash" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "nolmhash"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\nolmhash", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\lmcompatibilitylevel" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "lmcompatibilitylevel"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\lmcompatibilitylevel", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\ldap\ldapclientintegrity" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\ldap" -RegistryKey "ldapclientintegrity"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\ldap\ldapclientintegrity", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\ntlmminclientsec" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0" -RegistryKey "ntlmminclientsec"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\ntlmminclientsec", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\ntlmminserversec" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0" -RegistryKey "ntlmminserversec"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\ntlmminserversec", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\cryptography\forcekeyprotection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\cryptography" -RegistryKey "forcekeyprotection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\cryptography\forcekeyprotection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\session manager\kernel\obcaseinsensitive" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\session manager\kernel" -RegistryKey "obcaseinsensitive"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\session manager\kernel\obcaseinsensitive", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\session manager\protectionmode" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\session manager" -RegistryKey "protectionmode"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\session manager\protectionmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\filteradministratortoken" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "filteradministratortoken"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\filteradministratortoken", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\enableuiadesktoptoggle" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "enableuiadesktoptoggle"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\enableuiadesktoptoggle", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\consentpromptbehavioradmin" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "consentpromptbehavioradmin"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\consentpromptbehavioradmin", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\consentpromptbehavioruser" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "consentpromptbehavioruser"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\consentpromptbehavioruser", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\enableinstallerdetection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "enableinstallerdetection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\enableinstallerdetection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\enablesecureuiapaths" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "enablesecureuiapaths"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\enablesecureuiapaths", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\enablelua" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "enablelua"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\enablelua", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\promptonsecuredesktop" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "promptonsecuredesktop"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\promptonsecuredesktop", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\enablevirtualization" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "enablevirtualization"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\enablevirtualization", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\bthhfsrv\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\bthhfsrv" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\bthhfsrv\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\bthserv\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\bthserv" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\bthserv\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\browser\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\browser" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\browser\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\mapsbroker\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\mapsbroker" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\mapsbroker\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lfsvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lfsvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lfsvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\homegrouplistener\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\homegrouplistener" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\homegrouplistener\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\homegroupprovider\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\homegroupprovider" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\homegroupprovider\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\iisadmin\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\iisadmin" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\iisadmin\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\irmon\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\irmon" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\irmon\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\sharedaccess\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\sharedaccess" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\sharedaccess\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lltdsvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lltdsvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lltdsvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lxssmanager\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lxssmanager" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lxssmanager\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\ftpsvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\ftpsvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\ftpsvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\msiscsi\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\msiscsi" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\msiscsi\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\pnrpsvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\pnrpsvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\pnrpsvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\p2psvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\p2psvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\p2psvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\p2pimsvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\p2pimsvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\p2pimsvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\pnrpautoreg\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\pnrpautoreg" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\pnrpautoreg\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\wercplsupport\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\wercplsupport" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\wercplsupport\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\rasauto\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\rasauto" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\rasauto\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\sessionenv\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\sessionenv" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\sessionenv\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\termservice\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\termservice" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\termservice\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\umrdpservice\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\umrdpservice" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\umrdpservice\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\rpclocator\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\rpclocator" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\rpclocator\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\remoteregistry\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\remoteregistry" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\remoteregistry\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\remoteaccess\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\remoteaccess" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\remoteaccess\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\simptcp\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\simptcp" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\simptcp\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\snmp\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\snmp" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\snmp\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\ssdpsrv\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\ssdpsrv" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\ssdpsrv\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\upnphost\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\upnphost" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\upnphost\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\wmsvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\wmsvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\wmsvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\wersvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\wersvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\wersvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\wecsvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\wecsvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\wecsvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\wmpnetworksvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\wmpnetworksvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\wmpnetworksvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\icssvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\icssvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\icssvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\wpnservice\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\wpnservice" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\wpnservice\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\pushtoinstall\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\pushtoinstall" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\pushtoinstall\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\winrm\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\winrm" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\winrm\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\installservice\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\installservice" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\installservice\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\w3svc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\w3svc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\w3svc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\xboxgipsvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\xboxgipsvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\xboxgipsvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\xbgm\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\xbgm" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\xbgm\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\xblauthmanager\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\xblauthmanager" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\xblauthmanager\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\xblgamesave\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\xblgamesave" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\xblgamesave\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\xboxnetapisvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\xboxnetapisvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\xboxnetapisvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\enablefirewall" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile" -RegistryKey "enablefirewall"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\enablefirewall", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\defaultinboundaction" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile" -RegistryKey "defaultinboundaction"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\defaultinboundaction", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\defaultoutboundaction" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile" -RegistryKey "defaultoutboundaction"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\defaultoutboundaction", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\disablenotifications" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile" -RegistryKey "disablenotifications"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\disablenotifications", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\logging\logfilepath" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\logging" -RegistryKey "logfilepath"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\logging\logfilepath", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\logging\logfilesize" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\logging" -RegistryKey "logfilesize"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\logging\logfilesize", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\logging\logdroppedpackets" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\logging" -RegistryKey "logdroppedpackets"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\logging\logdroppedpackets", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\logging\logsuccessfulconnections" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\logging" -RegistryKey "logsuccessfulconnections"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\domainprofile\logging\logsuccessfulconnections", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\enablefirewall" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile" -RegistryKey "enablefirewall"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\enablefirewall", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\defaultinboundaction" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile" -RegistryKey "defaultinboundaction"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\defaultinboundaction", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\defaultoutboundaction" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile" -RegistryKey "defaultoutboundaction"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\defaultoutboundaction", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\disablenotifications" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile" -RegistryKey "disablenotifications"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\disablenotifications", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\logging\logfilepath" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\logging" -RegistryKey "logfilepath"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\logging\logfilepath", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\logging\logfilesize" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\logging" -RegistryKey "logfilesize"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\logging\logfilesize", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\logging\logdroppedpackets" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\logging" -RegistryKey "logdroppedpackets"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\logging\logdroppedpackets", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\logging\logsuccessfulconnections" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\logging" -RegistryKey "logsuccessfulconnections"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\privateprofile\logging\logsuccessfulconnections", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\enablefirewall" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile" -RegistryKey "enablefirewall"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\enablefirewall", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\defaultinboundaction" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile" -RegistryKey "defaultinboundaction"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\defaultinboundaction", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\defaultoutboundaction" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile" -RegistryKey "defaultoutboundaction"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\defaultoutboundaction", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\disablenotifications" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile" -RegistryKey "disablenotifications"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\disablenotifications", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\allowlocalpolicymerge" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile" -RegistryKey "allowlocalpolicymerge"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\allowlocalpolicymerge", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\allowlocalipsecpolicymerge" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile" -RegistryKey "allowlocalipsecpolicymerge"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\allowlocalipsecpolicymerge", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\logging\logfilepath" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\logging" -RegistryKey "logfilepath"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\logging\logfilepath", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\logging\logfilesize" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\logging" -RegistryKey "logfilesize"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\logging\logfilesize", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\logging\logdroppedpackets" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\logging" -RegistryKey "logdroppedpackets"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\logging\logdroppedpackets", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\logging\logsuccessfulconnections" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\logging" -RegistryKey "logsuccessfulconnections"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\publicprofile\logging\logsuccessfulconnections", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "credential_validation" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce923f-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"credential_validation", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "application_group_management" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9239-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"application_group_management", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "computer_account_management" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9236-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"computer_account_management", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "other_account_management_events" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce923a-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"other_account_management_events", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "security_group_management" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9237-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"security_group_management", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "user_account_management" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9235-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"user_account_management", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "pnp_activity" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9248-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"pnp_activity", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "process_creation" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce922b-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"process_creation", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "account_lockout" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9217-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"account_lockout", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "group_membership" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9249-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"group_membership", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "logoff" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9216-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"logoff", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "logon" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9215-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"logon", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "other_logon_logoff_events" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce921c-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"other_logon_logoff_events", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "special_logon" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce921b-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"special_logon", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "file_share" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9224-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"file_share", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "other_object_access_events" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9227-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"other_object_access_events", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "removable_storage" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9245-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"removable_storage", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "audit_policy_change" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce922f-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"audit_policy_change", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "authentication_policy_change" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9230-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"authentication_policy_change", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "authorization_policy_change" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9231-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"authorization_policy_change", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "sensitive_privilege_use" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9228-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"sensitive_privilege_use", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "ipsec_driver" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9213-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"ipsec_driver", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "other_system_events" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9214-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"other_system_events", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "security_state_change" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9210-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"security_state_change", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "security_system_extension" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9211-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"security_system_extension", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "system_integrity" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9212-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"system_integrity", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\personalization\nolockscreencamera" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\personalization" -RegistryKey "nolockscreencamera"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\personalization\nolockscreencamera", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\personalization\nolockscreenslideshow" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\personalization" -RegistryKey "nolockscreenslideshow"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\personalization\nolockscreenslideshow", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\inputpersonalization\allowinputpersonalization" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\inputpersonalization" -RegistryKey "allowinputpersonalization"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\inputpersonalization\allowinputpersonalization", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\allowonlinetips" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer" -RegistryKey "allowonlinetips"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\allowonlinetips", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\gpextensions\{d76b9641-3288-4f75-942d-087de603e3ea}\dllname" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\gpextensions\{d76b9641-3288-4f75-942d-087de603e3ea}" -RegistryKey "dllname"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\gpextensions\{d76b9641-3288-4f75-942d-087de603e3ea}\dllname", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft services\admpwd\pwdexpirationprotectionenabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft services\admpwd" -RegistryKey "pwdexpirationprotectionenabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft services\admpwd\pwdexpirationprotectionenabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft services\admpwd\admpwdenabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft services\admpwd" -RegistryKey "admpwdenabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft services\admpwd\admpwdenabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft services\admpwd\passwordcomplexity" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft services\admpwd" -RegistryKey "passwordcomplexity"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft services\admpwd\passwordcomplexity", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft services\admpwd\passwordlength" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft services\admpwd" -RegistryKey "passwordlength"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft services\admpwd\passwordlength", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft services\admpwd\passwordagedays" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft services\admpwd" -RegistryKey "passwordagedays"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft services\admpwd\passwordagedays", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\localaccounttokenfilterpolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "localaccounttokenfilterpolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\localaccounttokenfilterpolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\mrxsmb10\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\mrxsmb10" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\mrxsmb10\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\smb1" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "smb1"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\smb1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\session manager\kernel\disableexceptionchainvalidation" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\session manager\kernel" -RegistryKey "disableexceptionchainvalidation"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\session manager\kernel\disableexceptionchainvalidation", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\mpengine\mpenablepus" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\mpengine" -RegistryKey "mpenablepus"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\mpengine\mpenablepus", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\securityproviders\wdigest\uselogoncredential" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\securityproviders\wdigest" -RegistryKey "uselogoncredential"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\securityproviders\wdigest\uselogoncredential", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\autoadminlogon" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon" -RegistryKey "autoadminlogon"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\autoadminlogon", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\tcpip6\parameters\disableipsourcerouting" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\tcpip6\parameters" -RegistryKey "disableipsourcerouting"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\tcpip6\parameters\disableipsourcerouting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\disableipsourcerouting" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters" -RegistryKey "disableipsourcerouting"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\disableipsourcerouting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\rasman\parameters\disablesavepassword" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\rasman\parameters" -RegistryKey "disablesavepassword"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\rasman\parameters\disablesavepassword", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\enableicmpredirect" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters" -RegistryKey "enableicmpredirect"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\enableicmpredirect", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\keepalivetime" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters" -RegistryKey "keepalivetime"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\keepalivetime", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\netbt\parameters\nonamereleaseondemand" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\netbt\parameters" -RegistryKey "nonamereleaseondemand"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\netbt\parameters\nonamereleaseondemand", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\performrouterdiscovery" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters" -RegistryKey "performrouterdiscovery"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\performrouterdiscovery", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\session manager\safedllsearchmode" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\session manager" -RegistryKey "safedllsearchmode"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\session manager\safedllsearchmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\screensavergraceperiod" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon" -RegistryKey "screensavergraceperiod"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\screensavergraceperiod", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\tcpip6\parameters\tcpmaxdataretransmissions" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\tcpip6\parameters" -RegistryKey "tcpmaxdataretransmissions"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\tcpip6\parameters\tcpmaxdataretransmissions", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\tcpmaxdataretransmissions" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters" -RegistryKey "tcpmaxdataretransmissions"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\tcpmaxdataretransmissions", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\eventlog\security\warninglevel" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\eventlog\security" -RegistryKey "warninglevel"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\eventlog\security\warninglevel", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\netbt\parameters\nodetype" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\netbt\parameters" -RegistryKey "nodetype"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\netbt\parameters\nodetype", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\dnsclient\enablemulticast\0_May_Not_Exist" -CollectedDataResult (Compare-RegistryValueOrNotExist -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\dnsclient" -RegistryKey "enablemulticast" -ExpectedValue "0" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\dnsclient\enablemulticast\0_May_Not_Exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\enablefontproviders" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "enablefontproviders"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\enablefontproviders", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\lanmanworkstation\allowinsecureguestauth" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\lanmanworkstation" -RegistryKey "allowinsecureguestauth"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\lanmanworkstation\allowinsecureguestauth", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\lltd\allowlltdioondomain" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\lltd" -RegistryKey "allowlltdioondomain"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\lltd\allowlltdioondomain", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\lltd\prohibitlltdioonprivatenet" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\lltd" -RegistryKey "prohibitlltdioonprivatenet"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\lltd\prohibitlltdioonprivatenet", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\lltd\enablelltdio" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\lltd" -RegistryKey "enablelltdio"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\lltd\enablelltdio", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\lltd\allowlltdioonpublicnet" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\lltd" -RegistryKey "allowlltdioonpublicnet"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\lltd\allowlltdioonpublicnet", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\lltd\allowrspndrondomain" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\lltd" -RegistryKey "allowrspndrondomain"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\lltd\allowrspndrondomain", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\lltd\prohibitrspndronprivatenet" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\lltd" -RegistryKey "prohibitrspndronprivatenet"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\lltd\prohibitrspndronprivatenet", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\lltd\enablerspndr" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\lltd" -RegistryKey "enablerspndr"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\lltd\enablerspndr", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\lltd\allowrspndronpublicnet" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\lltd" -RegistryKey "allowrspndronpublicnet"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\lltd\allowrspndronpublicnet", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\peernet\disabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\peernet" -RegistryKey "disabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\peernet\disabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\network connections\nc_allownetbridge_nla" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\network connections" -RegistryKey "nc_allownetbridge_nla"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\network connections\nc_allownetbridge_nla", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\network connections\nc_showsharedaccessui" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\network connections" -RegistryKey "nc_showsharedaccessui"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\network connections\nc_showsharedaccessui", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\network connections\nc_stddomainusersetlocation" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\network connections" -RegistryKey "nc_stddomainusersetlocation"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\network connections\nc_stddomainusersetlocation", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths\\\*\netlogon_Pattern_match_[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1.*[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths" -RegistryKey "\\*\netlogon" -expectedValue "[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1.*[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths\\\*\netlogon_Pattern_match_[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1.*[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths\\\*\sysvol_Pattern_match_[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1.*[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths" -RegistryKey "\\*\sysvol" -expectedValue "[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1.*[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths\\\*\sysvol_Pattern_match_[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1.*[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\tcpip6\parameters\disabledcomponents" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\tcpip6\parameters" -RegistryKey "disabledcomponents"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\tcpip6\parameters\disabledcomponents", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\wcn\registrars\enableregistrars" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\wcn\registrars" -RegistryKey "enableregistrars"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\wcn\registrars\enableregistrars", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\wcn\registrars\disablewpdregistrar" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\wcn\registrars" -RegistryKey "disablewpdregistrar"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\wcn\registrars\disablewpdregistrar", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\wcn\registrars\disableflashconfigregistrar" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\wcn\registrars" -RegistryKey "disableflashconfigregistrar"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\wcn\registrars\disableflashconfigregistrar", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\wcn\registrars\disableinband802dot11registrar" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\wcn\registrars" -RegistryKey "disableinband802dot11registrar"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\wcn\registrars\disableinband802dot11registrar", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\wcn\registrars\disableupnpregistrar" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\wcn\registrars" -RegistryKey "disableupnpregistrar"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\wcn\registrars\disableupnpregistrar", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\wcn\ui\disablewcnui" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\wcn\ui" -RegistryKey "disablewcnui"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\wcn\ui\disablewcnui", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\wcmsvc\grouppolicy\fminimizeconnections" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\wcmsvc\grouppolicy" -RegistryKey "fminimizeconnections"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\wcmsvc\grouppolicy\fminimizeconnections", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\wcmsvc\grouppolicy\fblocknondomain" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\wcmsvc\grouppolicy" -RegistryKey "fblocknondomain"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\wcmsvc\grouppolicy\fblocknondomain", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\wcmsvc\wifinetworkmanager\config\autoconnectallowedoem" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\wcmsvc\wifinetworkmanager\config" -RegistryKey "autoconnectallowedoem"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\wcmsvc\wifinetworkmanager\config\autoconnectallowedoem", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\audit\processcreationincludecmdline_enabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\audit" -RegistryKey "processcreationincludecmdline_enabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\audit\processcreationincludecmdline_enabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\credentialsdelegation\allowprotectedcreds" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\credentialsdelegation" -RegistryKey "allowprotectedcreds"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\credentialsdelegation\allowprotectedcreds", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceguard\enablevirtualizationbasedsecurity" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceguard" -RegistryKey "enablevirtualizationbasedsecurity"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceguard\enablevirtualizationbasedsecurity", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceguard\requireplatformsecurityfeatures" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceguard" -RegistryKey "requireplatformsecurityfeatures"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceguard\requireplatformsecurityfeatures", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceguard\hypervisorenforcedcodeintegrity" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceguard" -RegistryKey "hypervisorenforcedcodeintegrity"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceguard\hypervisorenforcedcodeintegrity", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceguard\hvcimatrequired" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceguard" -RegistryKey "hvcimatrequired"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceguard\hvcimatrequired", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceguard\lsacfgflags" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceguard" -RegistryKey "lsacfgflags"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceguard\lsacfgflags", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceids" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions" -RegistryKey "denydeviceids"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceids", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceids\1" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceids" -RegistryKey "1"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceids\1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceidsretroactive" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions" -RegistryKey "denydeviceidsretroactive"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceidsretroactive", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions" -RegistryKey "denydeviceclasses"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses\{d48179be-ec20-11d1-b6b8-00c04fa372a7}" -CollectedDataResult (Get-RegistryKeyNameByValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses" -RegistryKeyValue "{d48179be-ec20-11d1-b6b8-00c04fa372a7}" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses\{d48179be-ec20-11d1-b6b8-00c04fa372a7}", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses\{6bdd1fc1-810f-11d0-bec7-08002be2092f}" -CollectedDataResult (Get-RegistryKeyNameByValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses" -RegistryKeyValue "{6bdd1fc1-810f-11d0-bec7-08002be2092f}" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses\{6bdd1fc1-810f-11d0-bec7-08002be2092f}", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses\{c06ff265-ae09-48f0-812c-16753d7cba83}" -CollectedDataResult (Get-RegistryKeyNameByValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses" -RegistryKeyValue "{c06ff265-ae09-48f0-812c-16753d7cba83}" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses\{c06ff265-ae09-48f0-812c-16753d7cba83}", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses\{7ebefbc0-3200-11d2-b4c2-00a0C9697d07}" -CollectedDataResult (Get-RegistryKeyNameByValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses" -RegistryKeyValue "{7ebefbc0-3200-11d2-b4c2-00a0C9697d07}" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses\{7ebefbc0-3200-11d2-b4c2-00a0C9697d07}", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclassesretroactive" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions" -RegistryKey "denydeviceclassesretroactive"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclassesretroactive", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\policies\earlylaunch\driverloadpolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\policies\earlylaunch" -RegistryKey "driverloadpolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\policies\earlylaunch\driverloadpolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\group policy\{35378eac-683f-11d2-a89a-00c04fbbcfa2}\nobackgroundpolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\group policy\{35378eac-683f-11d2-a89a-00c04fbbcfa2}" -RegistryKey "nobackgroundpolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\group policy\{35378eac-683f-11d2-a89a-00c04fbbcfa2}\nobackgroundpolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\group policy\{35378eac-683f-11d2-a89a-00c04fbbcfa2}\nogpolistchanges" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\group policy\{35378eac-683f-11d2-a89a-00c04fbbcfa2}" -RegistryKey "nogpolistchanges"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\group policy\{35378eac-683f-11d2-a89a-00c04fbbcfa2}\nogpolistchanges", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\enablecdp" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "enablecdp"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\enablecdp", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\disablebkgndgrouppolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "disablebkgndgrouppolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\disablebkgndgrouppolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\explorer\nousestoreopenwith" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\explorer" -RegistryKey "nousestoreopenwith"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\explorer\nousestoreopenwith", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\printers\disablewebpnpdownload" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\printers" -RegistryKey "disablewebpnpdownload"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\printers\disablewebpnpdownload", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\tabletpc\preventhandwritingdatasharing" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\tabletpc" -RegistryKey "preventhandwritingdatasharing"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\tabletpc\preventhandwritingdatasharing", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\handwritingerrorreports\preventhandwritingerrorreports" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\handwritingerrorreports" -RegistryKey "preventhandwritingerrorreports"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\handwritingerrorreports\preventhandwritingerrorreports", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\internet connection wizard\exitonmsicw" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\internet connection wizard" -RegistryKey "exitonmsicw"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\internet connection wizard\exitonmsicw", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\nowebservices" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer" -RegistryKey "nowebservices"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\nowebservices", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\printers\disablehttpprinting" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\printers" -RegistryKey "disablehttpprinting"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\printers\disablehttpprinting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\registration wizard control\noregistration" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\registration wizard control" -RegistryKey "noregistration"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\registration wizard control\noregistration", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\searchcompanion\disablecontentfileupdates" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\searchcompanion" -RegistryKey "disablecontentfileupdates"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\searchcompanion\disablecontentfileupdates", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\noonlineprintswizard" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer" -RegistryKey "noonlineprintswizard"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\noonlineprintswizard", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\nopublishingwizard" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer" -RegistryKey "nopublishingwizard"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\nopublishingwizard", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\messenger\client\ceip" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\messenger\client" -RegistryKey "ceip"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\messenger\client\ceip", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\sqmclient\windows\ceipenable" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\sqmclient\windows" -RegistryKey "ceipenable"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\sqmclient\windows\ceipenable", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windows error reporting\disabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windows error reporting" -RegistryKey "disabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windows error reporting\disabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\pchealth\errorreporting\doreport" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\pchealth\errorreporting" -RegistryKey "doreport"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\pchealth\errorreporting\doreport", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters\devicepkinitbehavior" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters" -RegistryKey "devicepkinitbehavior"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters\devicepkinitbehavior", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters\devicepkinitenabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters" -RegistryKey "devicepkinitenabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters\devicepkinitenabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\control panel\international\blockuserinputmethodsforsignin" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\control panel\international" -RegistryKey "blockuserinputmethodsforsignin"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\control panel\international\blockuserinputmethodsforsignin", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\blockuserfromshowingaccountdetailsonsignin" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "blockuserfromshowingaccountdetailsonsignin"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\blockuserfromshowingaccountdetailsonsignin", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\dontdisplaynetworkselectionui" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "dontdisplaynetworkselectionui"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\dontdisplaynetworkselectionui", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\dontenumerateconnectedusers" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "dontenumerateconnectedusers"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\dontenumerateconnectedusers", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\enumeratelocalusers" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "enumeratelocalusers"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\enumeratelocalusers", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\disablelockscreenappnotifications" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "disablelockscreenappnotifications"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\disablelockscreenappnotifications", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\blockdomainpicturepassword" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "blockdomainpicturepassword"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\blockdomainpicturepassword", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\allowdomainpinlogon" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "allowdomainpinlogon"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\allowdomainpinlogon", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\power\powersettings\f15576e8-98b7-4186-b944-eafa664402d9\dcsettingindex" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\power\powersettings\f15576e8-98b7-4186-b944-eafa664402d9" -RegistryKey "dcsettingindex"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\power\powersettings\f15576e8-98b7-4186-b944-eafa664402d9\dcsettingindex", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\power\powersettings\f15576e8-98b7-4186-b944-eafa664402d9\acsettingindex" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\power\powersettings\f15576e8-98b7-4186-b944-eafa664402d9" -RegistryKey "acsettingindex"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\power\powersettings\f15576e8-98b7-4186-b944-eafa664402d9\acsettingindex", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\power\powersettings\abfc2519-3608-4c2a-94ea-171b0ed546ab\dcsettingindex" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\power\powersettings\abfc2519-3608-4c2a-94ea-171b0ed546ab" -RegistryKey "dcsettingindex"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\power\powersettings\abfc2519-3608-4c2a-94ea-171b0ed546ab\dcsettingindex", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\power\powersettings\abfc2519-3608-4c2a-94ea-171b0ed546ab\acsettingindex" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\power\powersettings\abfc2519-3608-4c2a-94ea-171b0ed546ab" -RegistryKey "acsettingindex"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\power\powersettings\abfc2519-3608-4c2a-94ea-171b0ed546ab\acsettingindex", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\power\powersettings\0e796bdb-100d-47d6-a2d5-f7d2daa51f51\dcsettingindex" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\power\powersettings\0e796bdb-100d-47d6-a2d5-f7d2daa51f51" -RegistryKey "dcsettingindex"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\power\powersettings\0e796bdb-100d-47d6-a2d5-f7d2daa51f51\dcsettingindex", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\power\powersettings\0e796bdb-100d-47d6-a2d5-f7d2daa51f51\acsettingindex" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\power\powersettings\0e796bdb-100d-47d6-a2d5-f7d2daa51f51" -RegistryKey "acsettingindex"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\power\powersettings\0e796bdb-100d-47d6-a2d5-f7d2daa51f51\acsettingindex", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fallowunsolicited" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "fallowunsolicited"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fallowunsolicited", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fallowtogethelp" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "fallowtogethelp"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fallowtogethelp", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\rpc\enableauthepresolution" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\rpc" -RegistryKey "enableauthepresolution"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\rpc\enableauthepresolution", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\rpc\restrictremoteclients" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\rpc" -RegistryKey "restrictremoteclients"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\rpc\restrictremoteclients", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\scripteddiagnosticsprovider\policy\disablequeryremoteserver" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\scripteddiagnosticsprovider\policy" -RegistryKey "disablequeryremoteserver"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\scripteddiagnosticsprovider\policy\disablequeryremoteserver", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\wdi\{9c5a40da-b965-4fc3-8781-88dd50a6299d}\scenarioexecutionenabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\wdi\{9c5a40da-b965-4fc3-8781-88dd50a6299d}" -RegistryKey "scenarioexecutionenabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\wdi\{9c5a40da-b965-4fc3-8781-88dd50a6299d}\scenarioexecutionenabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\advertisinginfo\disabledbygrouppolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\advertisinginfo" -RegistryKey "disabledbygrouppolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\advertisinginfo\disabledbygrouppolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\timeproviders\ntpclient\enabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\timeproviders\ntpclient" -RegistryKey "enabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\timeproviders\ntpclient\enabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\timeproviders\ntpserver\enabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\timeproviders\ntpserver" -RegistryKey "enabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\timeproviders\ntpserver\enabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\currentversion\appmodel\statemanager\allowsharedlocalappdata" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\currentversion\appmodel\statemanager" -RegistryKey "allowsharedlocalappdata"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\currentversion\appmodel\statemanager\allowsharedlocalappdata", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\msaoptional" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "msaoptional"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\msaoptional", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\blockhostedappaccesswinrt" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "blockhostedappaccesswinrt"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\blockhostedappaccesswinrt", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\explorer\noautoplayfornonvolume" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\explorer" -RegistryKey "noautoplayfornonvolume"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\explorer\noautoplayfornonvolume", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\noautorun" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer" -RegistryKey "noautorun"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\noautorun", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\nodrivetypeautorun" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer" -RegistryKey "nodrivetypeautorun"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\nodrivetypeautorun", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\biometrics\facialfeatures\enhancedantispoofing" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\biometrics\facialfeatures" -RegistryKey "enhancedantispoofing"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\biometrics\facialfeatures\enhancedantispoofing", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvdiscoveryvolumetype" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvdiscoveryvolumetype"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvdiscoveryvolumetype", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvrecovery" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvrecovery"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvrecovery", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvmanagedra" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvmanagedra"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvmanagedra", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvrecoverypassword" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvrecoverypassword"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvrecoverypassword", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvrecoverykey" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvrecoverykey"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvrecoverykey", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvhiderecoverypage" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvhiderecoverypage"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvhiderecoverypage", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvactivedirectorybackup" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvactivedirectorybackup"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvactivedirectorybackup", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvactivedirectoryinfotostore" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvactivedirectoryinfotostore"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvactivedirectoryinfotostore", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvrequireactivedirectorybackup" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvrequireactivedirectorybackup"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvrequireactivedirectorybackup", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvhardwareencryption" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvhardwareencryption"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvhardwareencryption", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvallowsoftwareencryptionfailover" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvallowsoftwareencryptionfailover"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvallowsoftwareencryptionfailover", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvrestricthardwareencryptionalgorithms" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvrestricthardwareencryptionalgorithms"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvrestricthardwareencryptionalgorithms", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvallowedhardwareencryptionalgorithms" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvallowedhardwareencryptionalgorithms"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvallowedhardwareencryptionalgorithms", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvpassphrase" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvpassphrase"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvpassphrase", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvallowusercert" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvallowusercert"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvallowusercert", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvenforceusercert" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvenforceusercert"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvenforceusercert", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\useenhancedpin" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "useenhancedpin"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\useenhancedpin", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\osallowsecurebootforintegrity" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "osallowsecurebootforintegrity"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\osallowsecurebootforintegrity", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\osrecovery" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "osrecovery"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\osrecovery", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\osmanagedra" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "osmanagedra"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\osmanagedra", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\osrecoverypassword" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "osrecoverypassword"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\osrecoverypassword", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\osrecoverykey" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "osrecoverykey"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\osrecoverykey", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\oshiderecoverypage" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "oshiderecoverypage"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\oshiderecoverypage", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\osactivedirectorybackup" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "osactivedirectorybackup"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\osactivedirectorybackup", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\osactivedirectoryinfotostore" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "osactivedirectoryinfotostore"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\osactivedirectoryinfotostore", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\osrequireactivedirectorybackup" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "osrequireactivedirectorybackup"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\osrequireactivedirectorybackup", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\minimumpin" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "minimumpin"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\minimumpin", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\oshardwareencryption" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "oshardwareencryption"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\oshardwareencryption", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\osallowsoftwareencryptionfailover" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "osallowsoftwareencryptionfailover"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\osallowsoftwareencryptionfailover", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\osrestricthardwareencryptionalgorithms" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "osrestricthardwareencryptionalgorithms"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\osrestricthardwareencryptionalgorithms", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\osallowedhardwareencryptionalgorithms" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "osallowedhardwareencryptionalgorithms"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\osallowedhardwareencryptionalgorithms", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\ospassphrase" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "ospassphrase"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\ospassphrase", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\useadvancedstartup" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "useadvancedstartup"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\useadvancedstartup", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\enablebdewithnotpm" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "enablebdewithnotpm"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\enablebdewithnotpm", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\usetpm" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "usetpm"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\usetpm", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\usetpmpin" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "usetpmpin"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\usetpmpin", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\usetpmkey" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "usetpmkey"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\usetpmkey", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\usetpmkeypin" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "usetpmkeypin"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\usetpmkeypin", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvdiscoveryvolumetype" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvdiscoveryvolumetype"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvdiscoveryvolumetype", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvrecovery" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvrecovery"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvrecovery", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvmanagedra" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvmanagedra"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvmanagedra", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvrecoverypassword" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvrecoverypassword"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvrecoverypassword", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvrecoverykey" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvrecoverykey"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvrecoverykey", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvhiderecoverypage" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvhiderecoverypage"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvhiderecoverypage", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvactivedirectorybackup" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvactivedirectorybackup"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvactivedirectorybackup", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvactivedirectoryinfotostore" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvactivedirectoryinfotostore"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvactivedirectoryinfotostore", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvrequireactivedirectorybackup" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvrequireactivedirectorybackup"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvrequireactivedirectorybackup", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvhardwareencryption" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvhardwareencryption"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvhardwareencryption", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvallowsoftwareencryptionfailover" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvallowsoftwareencryptionfailover"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvallowsoftwareencryptionfailover", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvrestricthardwareencryptionalgorithms" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvrestricthardwareencryptionalgorithms"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvrestricthardwareencryptionalgorithms", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvallowedhardwareencryptionalgorithms" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvallowedhardwareencryptionalgorithms"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvallowedhardwareencryptionalgorithms", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvpassphrase" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvpassphrase"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvpassphrase", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvallowusercert" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvallowusercert"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvallowusercert", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvenforceusercert" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvenforceusercert"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvenforceusercert", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\policies\microsoft\fve\rdvdenywriteaccess" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\policies\microsoft\fve" -RegistryKey "rdvdenywriteaccess"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\policies\microsoft\fve\rdvdenywriteaccess", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\rdvdenycrossorg" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "rdvdenycrossorg"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\rdvdenycrossorg", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\encryptionmethodwithxtsfdv" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "encryptionmethodwithxtsfdv"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\encryptionmethodwithxtsfdv", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\encryptionmethodwithxtsrdv" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "encryptionmethodwithxtsrdv"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\encryptionmethodwithxtsrdv", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\encryptionmethodwithxtsos" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "encryptionmethodwithxtsos"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\encryptionmethodwithxtsos", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\disableexternaldmaunderlock" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "disableexternaldmaunderlock"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\disableexternaldmaunderlock", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\camera\allowcamera" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\camera" -RegistryKey "allowcamera"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\camera\allowcamera", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\cloudcontent\disablewindowsconsumerfeatures" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\cloudcontent" -RegistryKey "disablewindowsconsumerfeatures"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\cloudcontent\disablewindowsconsumerfeatures", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\connect\requirepinforpairing" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\connect" -RegistryKey "requirepinforpairing"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\connect\requirepinforpairing", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\credui\disablepasswordreveal" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\credui" -RegistryKey "disablepasswordreveal"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\credui\disablepasswordreveal", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\credui\enumerateadministrators" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\credui" -RegistryKey "enumerateadministrators"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\credui\enumerateadministrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\datacollection\allowtelemetry" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\datacollection" -RegistryKey "allowtelemetry"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\datacollection\allowtelemetry", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\datacollection\disableenterpriseauthproxy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\datacollection" -RegistryKey "disableenterpriseauthproxy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\datacollection\disableenterpriseauthproxy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\previewbuilds\enableconfigflighting" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\previewbuilds" -RegistryKey "enableconfigflighting"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\previewbuilds\enableconfigflighting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\datacollection\donotshowfeedbacknotifications" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\datacollection" -RegistryKey "donotshowfeedbacknotifications"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\datacollection\donotshowfeedbacknotifications", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\previewbuilds\allowbuildpreview" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\previewbuilds" -RegistryKey "allowbuildpreview"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\previewbuilds\allowbuildpreview", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deliveryoptimization\dodownloadmode" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deliveryoptimization" -RegistryKey "dodownloadmode"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deliveryoptimization\dodownloadmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\eventlog\application\retention" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\eventlog\application" -RegistryKey "retention"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\eventlog\application\retention", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\eventlog\application\maxsize" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\eventlog\application" -RegistryKey "maxsize"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\eventlog\application\maxsize", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\eventlog\security\retention" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\eventlog\security" -RegistryKey "retention"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\eventlog\security\retention", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\eventlog\security\maxsize" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\eventlog\security" -RegistryKey "maxsize"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\eventlog\security\maxsize", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\eventlog\setup\retention" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\eventlog\setup" -RegistryKey "retention"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\eventlog\setup\retention", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\eventlog\setup\maxsize" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\eventlog\setup" -RegistryKey "maxsize"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\eventlog\setup\maxsize", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\eventlog\system\retention" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\eventlog\system" -RegistryKey "retention"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\eventlog\system\retention", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\eventlog\system\maxsize" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\eventlog\system" -RegistryKey "maxsize"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\eventlog\system\maxsize", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\explorer\nodataexecutionprevention" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\explorer" -RegistryKey "nodataexecutionprevention"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\explorer\nodataexecutionprevention", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\explorer\noheapterminationoncorruption" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\explorer" -RegistryKey "noheapterminationoncorruption"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\explorer\noheapterminationoncorruption", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\prexpsp2shellprotocolbehavior" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer" -RegistryKey "prexpsp2shellprotocolbehavior"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\prexpsp2shellprotocolbehavior", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\homegroup\disablehomegroup" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\homegroup" -RegistryKey "disablehomegroup"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\homegroup\disablehomegroup", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\locationandsensors\disablelocation" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\locationandsensors" -RegistryKey "disablelocation"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\locationandsensors\disablelocation", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\messaging\allowmessagesync" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\messaging" -RegistryKey "allowmessagesync"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\messaging\allowmessagesync", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftaccount\disableuserauth" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftaccount" -RegistryKey "disableuserauth"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftaccount\disableuserauth", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\serviceui\showonebox" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\serviceui" -RegistryKey "showonebox"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\serviceui\showonebox", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\addons\flashplayerenabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\addons" -RegistryKey "flashplayerenabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\addons\flashplayerenabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\main\allowinprivate" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\main" -RegistryKey "allowinprivate"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\main\allowinprivate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\main\cookies" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\main" -RegistryKey "cookies"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\main\cookies", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\main\formsuggest passwords" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\main" -RegistryKey "formsuggest passwords"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\main\formsuggest passwords", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\main\allowpopups" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\main" -RegistryKey "allowpopups"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\main\allowpopups", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\searchscopes\showsearchsuggestionsglobal" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\searchscopes" -RegistryKey "showsearchsuggestionsglobal"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\searchscopes\showsearchsuggestionsglobal", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\security\flashclicktorunmode" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\security" -RegistryKey "flashclicktorunmode"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\security\flashclicktorunmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\main\preventaccesstoaboutflagsinmicrosoftedge" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\main" -RegistryKey "preventaccesstoaboutflagsinmicrosoftedge"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\main\preventaccesstoaboutflagsinmicrosoftedge", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\main\hidelocalhostip" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\main" -RegistryKey "hidelocalhostip"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\main\hidelocalhostip", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\onedrive\disablefilesyncngsc" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\onedrive" -RegistryKey "disablefilesyncngsc"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\onedrive\disablefilesyncngsc", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\pushtoinstall\disablepushtoinstall" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\pushtoinstall" -RegistryKey "disablepushtoinstall"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\pushtoinstall\disablepushtoinstall", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\disablepasswordsaving" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "disablepasswordsaving"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\disablepasswordsaving", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fdenytsconnections" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "fdenytsconnections"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fdenytsconnections", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fdisableccm" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "fdisableccm"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fdisableccm", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fdisablecdm" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "fdisablecdm"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fdisablecdm", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fdisablelpt" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "fdisablelpt"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fdisablelpt", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fdisablepnpredir" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "fdisablepnpredir"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fdisablepnpredir", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fpromptforpassword" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "fpromptforpassword"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fpromptforpassword", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fencryptrpctraffic" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "fencryptrpctraffic"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fencryptrpctraffic", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\minencryptionlevel" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "minencryptionlevel"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\minencryptionlevel", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\maxidletime" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "maxidletime"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\maxidletime", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\maxdisconnectiontime" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "maxdisconnectiontime"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\maxdisconnectiontime", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\deletetempdirsonexit" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "deletetempdirsonexit"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\deletetempdirsonexit", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\persessiontempdir" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "persessiontempdir"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\persessiontempdir", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\internet explorer\feeds\disableenclosuredownload" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\internet explorer\feeds" -RegistryKey "disableenclosuredownload"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\internet explorer\feeds\disableenclosuredownload", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windows search\allowcloudsearch" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windows search" -RegistryKey "allowcloudsearch"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windows search\allowcloudsearch", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windows search\allowcortana" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windows search" -RegistryKey "allowcortana"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windows search\allowcortana", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windows search\allowcortanaabovelock" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windows search" -RegistryKey "allowcortanaabovelock"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windows search\allowcortanaabovelock", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windows search\allowindexingencryptedstoresoritems" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windows search" -RegistryKey "allowindexingencryptedstoresoritems"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windows search\allowindexingencryptedstoresoritems", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windows search\allowsearchtouselocation" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windows search" -RegistryKey "allowsearchtouselocation"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windows search\allowsearchtouselocation", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\currentversion\software protection platform\nogenticket" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\currentversion\software protection platform" -RegistryKey "nogenticket"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\currentversion\software protection platform\nogenticket", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsstore\disablestoreapps" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsstore" -RegistryKey "disablestoreapps"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsstore\disablestoreapps", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsstore\autodownload" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsstore" -RegistryKey "autodownload"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsstore\autodownload", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsstore\disableosupgrade" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsstore" -RegistryKey "disableosupgrade"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsstore\disableosupgrade", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsstore\removewindowsstore" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsstore" -RegistryKey "removewindowsstore"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsstore\removewindowsstore", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\spynet\localsettingoverridespynetreporting" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\spynet" -RegistryKey "localsettingoverridespynetreporting"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\spynet\localsettingoverridespynetreporting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\spynet\spynetreporting" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\spynet" -RegistryKey "spynetreporting"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\spynet\spynetreporting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\real-time protection\disablebehaviormonitoring" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\real-time protection" -RegistryKey "disablebehaviormonitoring"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\real-time protection\disablebehaviormonitoring", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\reporting\disablegenericreports" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\reporting" -RegistryKey "disablegenericreports"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\reporting\disablegenericreports", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\scan\disableremovabledrivescanning" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\scan" -RegistryKey "disableremovabledrivescanning"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\scan\disableremovabledrivescanning", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\scan\disableemailscanning" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\scan" -RegistryKey "disableemailscanning"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\scan\disableemailscanning", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\exploitguard_asr_rules" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr" -RegistryKey "exploitguard_asr_rules"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\exploitguard_asr_rules", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\75668c1f-73b5-4cf0-bb93-3ecf5cb7cc84" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "75668c1f-73b5-4cf0-bb93-3ecf5cb7cc84"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\75668c1f-73b5-4cf0-bb93-3ecf5cb7cc84", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\3b576869-a4ec-4529-8536-b80a7769e899" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "3b576869-a4ec-4529-8536-b80a7769e899"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\3b576869-a4ec-4529-8536-b80a7769e899", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\d4f940ab-401b-4efc-aadc-ad5f3c50688a" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "d4f940ab-401b-4efc-aadc-ad5f3c50688a"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\d4f940ab-401b-4efc-aadc-ad5f3c50688a", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\92e97fa1-2edf-4476-bdd6-9dd0b4dddc7b" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "92e97fa1-2edf-4476-bdd6-9dd0b4dddc7b"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\92e97fa1-2edf-4476-bdd6-9dd0b4dddc7b", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\5beb7efe-fd9a-4556-801d-275e5ffc04cc" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "5beb7efe-fd9a-4556-801d-275e5ffc04cc"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\5beb7efe-fd9a-4556-801d-275e5ffc04cc", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\d3e037e1-3eb8-44c8-a917-57927947596d" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "d3e037e1-3eb8-44c8-a917-57927947596d"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\d3e037e1-3eb8-44c8-a917-57927947596d", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\be9ba2d9-53ea-4cdc-84e5-9b1eeee46550" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "be9ba2d9-53ea-4cdc-84e5-9b1eeee46550"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\be9ba2d9-53ea-4cdc-84e5-9b1eeee46550", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\network protection\enablenetworkprotection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\network protection" -RegistryKey "enablenetworkprotection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\network protection\enablenetworkprotection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\disableantispyware" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender" -RegistryKey "disableantispyware"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\disableantispyware", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\apphvsi\auditapplicationguard" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\apphvsi" -RegistryKey "auditapplicationguard"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\apphvsi\auditapplicationguard", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\apphvsi\allowpersistence" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\apphvsi" -RegistryKey "allowpersistence"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\apphvsi\allowpersistence", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\apphvsi\apphvsiclipboardsettings" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\apphvsi" -RegistryKey "apphvsiclipboardsettings"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\apphvsi\apphvsiclipboardsettings", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\apphvsi\allowapphvsi_providerset" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\apphvsi" -RegistryKey "allowapphvsi_providerset"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\apphvsi\allowapphvsi_providerset", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender security center\app and browser protection\disallowexploitprotectionoverride" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender security center\app and browser protection" -RegistryKey "disallowexploitprotectionoverride"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender security center\app and browser protection\disallowexploitprotectionoverride", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\shellsmartscreenlevel" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "shellsmartscreenlevel"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\shellsmartscreenlevel", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\enablesmartscreen" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "enablesmartscreen"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\enablesmartscreen", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\phishingfilter\enabledv9" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\phishingfilter" -RegistryKey "enabledv9"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\phishingfilter\enabledv9", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\phishingfilter\preventoverrideapprepunknown" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\phishingfilter" -RegistryKey "preventoverrideapprepunknown"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\phishingfilter\preventoverrideapprepunknown", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\phishingfilter\preventoverride" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\phishingfilter" -RegistryKey "preventoverride"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\phishingfilter\preventoverride", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\gamedvr\allowgamedvr" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\gamedvr" -RegistryKey "allowgamedvr"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\gamedvr\allowgamedvr", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsinkworkspace\allowsuggestedappsinwindowsinkworkspace" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsinkworkspace" -RegistryKey "allowsuggestedappsinwindowsinkworkspace"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsinkworkspace\allowsuggestedappsinwindowsinkworkspace", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsinkworkspace\allowwindowsinkworkspace" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsinkworkspace" -RegistryKey "allowwindowsinkworkspace"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsinkworkspace\allowwindowsinkworkspace", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\installer\enableusercontrol" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\installer" -RegistryKey "enableusercontrol"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\installer\enableusercontrol", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\installer\alwaysinstallelevated" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\installer" -RegistryKey "alwaysinstallelevated"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\installer\alwaysinstallelevated", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\installer\safeforscripting" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\installer" -RegistryKey "safeforscripting"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\installer\safeforscripting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\disableautomaticrestartsignon" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "disableautomaticrestartsignon"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\disableautomaticrestartsignon", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\powershell\scriptblocklogging\enablescriptblocklogging" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\powershell\scriptblocklogging" -RegistryKey "enablescriptblocklogging"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\powershell\scriptblocklogging\enablescriptblocklogging", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\powershell\transcription\enabletranscripting" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\powershell\transcription" -RegistryKey "enabletranscripting"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\powershell\transcription\enabletranscripting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\winrm\client\allowbasic" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\winrm\client" -RegistryKey "allowbasic"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\winrm\client\allowbasic", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\winrm\client\allowunencryptedtraffic" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\winrm\client" -RegistryKey "allowunencryptedtraffic"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\winrm\client\allowunencryptedtraffic", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\winrm\client\allowdigest" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\winrm\client" -RegistryKey "allowdigest"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\winrm\client\allowdigest", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\winrm\service\allowbasic" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\winrm\service" -RegistryKey "allowbasic"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\winrm\service\allowbasic", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\winrm\service\allowautoconfig" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\winrm\service" -RegistryKey "allowautoconfig"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\winrm\service\allowautoconfig", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\winrm\service\allowunencryptedtraffic" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\winrm\service" -RegistryKey "allowunencryptedtraffic"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\winrm\service\allowunencryptedtraffic", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\winrm\service\disablerunas" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\winrm\service" -RegistryKey "disablerunas"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\winrm\service\disablerunas", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\winrm\service\winrs\allowremoteshellaccess" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\winrm\service\winrs" -RegistryKey "allowremoteshellaccess"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\winrm\service\winrs\allowremoteshellaccess", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\managepreviewbuilds" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate" -RegistryKey "managepreviewbuilds"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\managepreviewbuilds", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\managepreviewbuildspolicyvalue" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate" -RegistryKey "managepreviewbuildspolicyvalue"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\managepreviewbuildspolicyvalue", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\deferfeatureupdates" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate" -RegistryKey "deferfeatureupdates"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\deferfeatureupdates", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\branchreadinesslevel" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate" -RegistryKey "branchreadinesslevel"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\branchreadinesslevel", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\deferfeatureupdatesperiodindays" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate" -RegistryKey "deferfeatureupdatesperiodindays"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\deferfeatureupdatesperiodindays", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\deferqualityupdates" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate" -RegistryKey "deferqualityupdates"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\deferqualityupdates", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\deferqualityupdatesperiodindays" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate" -RegistryKey "deferqualityupdatesperiodindays"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\deferqualityupdatesperiodindays", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\noautoupdate" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au" -RegistryKey "noautoupdate"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\noautoupdate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\scheduledinstallday" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au" -RegistryKey "scheduledinstallday"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\scheduledinstallday", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\noautorebootwithloggedonusers" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au" -RegistryKey "noautorebootwithloggedonusers"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\noautorebootwithloggedonusers", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\control panel\desktop\screensaveactive" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\windows\control panel\desktop" -RegistryKey "screensaveactive" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\control panel\desktop\screensaveactive", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\control panel\desktop\scrnsave.exe" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\windows\control panel\desktop" -RegistryKey "scrnsave.exe" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\control panel\desktop\scrnsave.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\control panel\desktop\screensaverissecure" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\windows\control panel\desktop" -RegistryKey "screensaverissecure" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\control panel\desktop\screensaverissecure", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\control panel\desktop\screensavetimeout" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\windows\control panel\desktop" -RegistryKey "screensavetimeout" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\control panel\desktop\screensavetimeout", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\currentversion\pushnotifications\notoastapplicationnotificationonlockscreen" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\windows\currentversion\pushnotifications" -RegistryKey "notoastapplicationnotificationonlockscreen" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\currentversion\pushnotifications\notoastapplicationnotificationonlockscreen", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\assistance\client\1.0\noimplicitfeedback" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\assistance\client\1.0" -RegistryKey "noimplicitfeedback" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\assistance\client\1.0\noimplicitfeedback", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\microsoft\windows\currentversion\policies\attachments\savezoneinformation" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\microsoft\windows\currentversion\policies\attachments" -RegistryKey "savezoneinformation" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\microsoft\windows\currentversion\policies\attachments\savezoneinformation", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\microsoft\windows\currentversion\policies\attachments\scanwithantivirus" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\microsoft\windows\currentversion\policies\attachments" -RegistryKey "scanwithantivirus" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\microsoft\windows\currentversion\policies\attachments\scanwithantivirus", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\cloudcontent\configurewindowsspotlight" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\windows\cloudcontent" -RegistryKey "configurewindowsspotlight" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\cloudcontent\configurewindowsspotlight", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\cloudcontent\disablethirdpartysuggestions" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\windows\cloudcontent" -RegistryKey "disablethirdpartysuggestions" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\cloudcontent\disablethirdpartysuggestions", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\cloudcontent\disabletailoredexperienceswithdiagnosticdata" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\windows\cloudcontent" -RegistryKey "disabletailoredexperienceswithdiagnosticdata" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\cloudcontent\disabletailoredexperienceswithdiagnosticdata", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\cloudcontent\disablewindowsspotlightfeatures" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\windows\cloudcontent" -RegistryKey "disablewindowsspotlightfeatures" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\cloudcontent\disablewindowsspotlightfeatures", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\microsoft\windows\currentversion\policies\explorer\noinplacesharing" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\microsoft\windows\currentversion\policies\explorer" -RegistryKey "noinplacesharing" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\microsoft\windows\currentversion\policies\explorer\noinplacesharing", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\installer\alwaysinstallelevated" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\windows\installer" -RegistryKey "alwaysinstallelevated" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\installer\alwaysinstallelevated", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windowsmediaplayer\preventcodecdownload" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\windowsmediaplayer" -RegistryKey "preventcodecdownload" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windowsmediaplayer\preventcodecdownload", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue<#>1</#>SubCriteria_root_cimv2<,>SELECT_OSArchitecture_FROM_Win32_OperatingSystem<,>osarchitecture<#>1</#>CompareRegistryWithMultipleAcceptedValues<!#!>1</!#!>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid<,>Enterprise||EnterpriseS<,>false<,>equals||equals<,>false<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_64-bit<#>1</#>true_equals<#>1</#>equals_64-bit<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue<#>1</#>SubCriteria" -ExecutionParamsString "root\cimv2<,>SELECT OSArchitecture FROM Win32_OperatingSystem<,>osarchitecture<#>1</#>CompareRegistryWithMultipleAcceptedValues<!#!>1</!#!>hkey_local_machine\software\microsoft\windows nt\currentversion<,>editionid<,>Enterprise||EnterpriseS<,>false<,>equals||equals<,>false<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "64-bit<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "64-bit<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue<#>1</#>SubCriteria_root_cimv2<,>SELECT_OSArchitecture_FROM_Win32_OperatingSystem<,>osarchitecture<#>1</#>CompareRegistryWithMultipleAcceptedValues<!#!>1</!#!>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid<,>Enterprise||EnterpriseS<,>false<,>equals||equals<,>false<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_64-bit<#>1</#>true_equals<#>1</#>equals_64-bit<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareWmiWithMultipleValues_root_cimv2<,>SELECT_DomainRole_FROM_Win32_ComputerSystem<,>DomainRole||DomainRole<,>0||2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareWmiWithMultipleValues" -ExecutionParamsString "root\cimv2<,>SELECT DomainRole FROM Win32_ComputerSystem<,>DomainRole||DomainRole<,>0||2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareWmiWithMultipleValues_root_cimv2<,>SELECT_DomainRole_FROM_Win32_ComputerSystem<,>DomainRole||DomainRole<,>0||2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_security_microsoftvolumeencryption_SELECT_protectionstatus_FROM_win32_encryptablevolume_protectionstatus_1_all" -CollectedDataResult (Compare-AllWmiObjects -Namespace "root\cimv2\security\microsoftvolumeencryption" -Query "SELECT protectionstatus FROM win32_encryptablevolume" -OutputFieldName "protectionstatus"  -ExpectedValue "1" -allOrNone "all" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_security_microsoftvolumeencryption_SELECT_protectionstatus_FROM_win32_encryptablevolume_protectionstatus_1_all", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentversion<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_greater_than_or_equal<#>1</#>greater_than_or_equal_6.3<#>1</#>17134.0_greater_than_or_equal<#>1</#>greater_than_or_equal_6.3<#>1</#>17134.0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentversion<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber" -AssessorConditionsString "greater than or equal<#>1</#>greater than or equal" -AssessorValuesString "6.3<#>1</#>17134.0" -McmConditionsString "greater than or equal<#>1</#>greater than or equal" -McmValuesString "6.3<#>1</#>17134.0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentversion<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_greater_than_or_equal<#>1</#>greater_than_or_equal_6.3<#>1</#>17134.0_greater_than_or_equal<#>1</#>greater_than_or_equal_6.3<#>1</#>17134.0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_equals<#>1</#>greater_than_or_equal_EnterpriseS<#>1</#>10240_equals<#>1</#>greater_than_or_equal_EnterpriseS<#>1</#>10240_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows nt\currentversion<,>editionid<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber" -AssessorConditionsString "equals<#>1</#>greater than or equal" -AssessorValuesString "EnterpriseS<#>1</#>10240" -McmConditionsString "equals<#>1</#>greater than or equal" -McmValuesString "EnterpriseS<#>1</#>10240" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_equals<#>1</#>greater_than_or_equal_EnterpriseS<#>1</#>10240_equals<#>1</#>greater_than_or_equal_EnterpriseS<#>1</#>10240_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_deviceid_FROM_win32_logicaldisk_WHERE_drivetype=3_AND_filesystem!=_NTFS_" -CollectedDataResult (Get-WmiObjectCount -Namespace "root\cimv2" -Query "SELECT deviceid FROM win32_logicaldisk WHERE drivetype=3 AND filesystem!='NTFS'" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_deviceid_FROM_win32_logicaldisk_WHERE_drivetype=3_AND_filesystem!=_NTFS_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_name_FROM_Win32_UserAccount_WHERE_LocalAccount=TRUE_AND_Disabled=FALSE_AND_PasswordExpires=FALSE" -CollectedDataResult (Get-WmiObjectCount -Namespace "root\cimv2" -Query "SELECT name FROM Win32_UserAccount WHERE LocalAccount=TRUE AND Disabled=FALSE AND PasswordExpires=FALSE" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_name_FROM_Win32_UserAccount_WHERE_LocalAccount=TRUE_AND_Disabled=FALSE_AND_PasswordExpires=FALSE", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__IIS-WebServerRole__installstate_2_all" -CollectedDataResult (Compare-AllWmiObjects -Namespace "root\cimv2" -Query "SELECT installstate FROM win32_optionalfeature WHERE name = 'IIS-WebServerRole'" -OutputFieldName "installstate"  -ExpectedValue "2" -allOrNone "all" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__IIS-WebServerRole__installstate_2_all", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__IIS-HostableWebCore__installstate_2_all" -CollectedDataResult (Compare-AllWmiObjects -Namespace "root\cimv2" -Query "SELECT installstate FROM win32_optionalfeature WHERE name = 'IIS-HostableWebCore'" -OutputFieldName "installstate"  -ExpectedValue "2" -allOrNone "all" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__IIS-HostableWebCore__installstate_2_all", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "%windir%_system32_snmp.exe" -CollectedDataResult (Check-FileExistenceByPath -Path '%windir%\system32\snmp.exe' ) } catch { New-Object CollectedBaselineValue(-1,"%windir%_system32_snmp.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_state_FROM_Win32_Service_WHERE_Name=_simptcp_" -CollectedDataResult (Get-WmiObjectCount -Namespace "root\cimv2" -Query "SELECT state FROM Win32_Service WHERE Name='simptcp'" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_state_FROM_Win32_Service_WHERE_Name=_simptcp_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "%windir%_system32_telnet.exe" -CollectedDataResult (Check-FileExistenceByPath -Path '%windir%\system32\telnet.exe' ) } catch { New-Object CollectedBaselineValue(-1,"%windir%_system32_telnet.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "%windir%_system32_tftp.exe" -CollectedDataResult (Check-FileExistenceByPath -Path '%windir%\system32\tftp.exe' ) } catch { New-Object CollectedBaselineValue(-1,"%windir%_system32_tftp.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareAllWmiObjects<#>1</#>CompareAllWmiObjects_root_cimv2<,>SELECT_dataexecutionprevention_supportpolicy_FROM_win32_operatingsystem<,>dataexecutionprevention_supportpolicy<,>3<,>all<#>1</#>root_cimv2<,>SELECT_dataexecutionprevention_supportpolicy_FROM_win32_operatingsystem<,>dataexecutionprevention_supportpolicy<,>1<,>all_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareAllWmiObjects<#>1</#>CompareAllWmiObjects" -ExecutionParamsString "root\cimv2<,>SELECT dataexecutionprevention_supportpolicy FROM win32_operatingsystem<,>dataexecutionprevention_supportpolicy<,>3<,>all<#>1</#>root\cimv2<,>SELECT dataexecutionprevention_supportpolicy FROM win32_operatingsystem<,>dataexecutionprevention_supportpolicy<,>1<,>all" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareAllWmiObjects<#>1</#>CompareAllWmiObjects_root_cimv2<,>SELECT_dataexecutionprevention_supportpolicy_FROM_win32_operatingsystem<,>dataexecutionprevention_supportpolicy<,>3<,>all<#>1</#>root_cimv2<,>SELECT_dataexecutionprevention_supportpolicy_FROM_win32_operatingsystem<,>dataexecutionprevention_supportpolicy<,>1<,>all_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>releaseid_greater_than_or_equal_1709_greater_than_or_equal_1709_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows nt\currentversion<,>releaseid" -AssessorConditionsString "greater than or equal" -AssessorValuesString "1709" -McmConditionsString "greater than or equal" -McmValuesString "1709" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>releaseid_greater_than_or_equal_1709_greater_than_or_equal_1709_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareAllWmiObjects<#>1</#>CompareAllWmiObjects_root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__MicrosoftWindowsPowerShellV2Root_<,>installstate<,>2<,>all<#>1</#>root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__MicrosoftWindowsPowerShellV2_<,>installstate<,>2<,>all_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareAllWmiObjects<#>1</#>CompareAllWmiObjects" -ExecutionParamsString "root\cimv2<,>SELECT installstate FROM win32_optionalfeature WHERE name = 'MicrosoftWindowsPowerShellV2Root'<,>installstate<,>2<,>all<#>1</#>root\cimv2<,>SELECT installstate FROM win32_optionalfeature WHERE name = 'MicrosoftWindowsPowerShellV2'<,>installstate<,>2<,>all" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareAllWmiObjects<#>1</#>CompareAllWmiObjects_root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__MicrosoftWindowsPowerShellV2Root_<,>installstate<,>2<,>all<#>1</#>root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__MicrosoftWindowsPowerShellV2_<,>installstate<,>2<,>all_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria_CompareAllWmiObjects<!#!>1</!#!>root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__SMB1Protocol_<,>installstate<,>2<,>all<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria" -ExecutionParamsString "CompareAllWmiObjects<!#!>1</!#!>root\cimv2<,>SELECT installstate FROM win32_optionalfeature WHERE name = 'SMB1Protocol'<,>installstate<,>2<,>all<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria_CompareAllWmiObjects<!#!>1</!#!>root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__SMB1Protocol_<,>installstate<,>2<,>all<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_GetRegistryValue<!#!>1</!#!>hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>smb1<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>GetRegistryValue<!#!>1</!#!>hkey_local_machine_system_currentcontrolset_services_mrxsmb10<,>start<!#!>1</!#!>equals<!#!>1</!#!>4<!#!>1</!#!>equals<!#!>1</!#!>4<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "GetRegistryValue<!#!>1</!#!>hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters<,>smb1<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>GetRegistryValue<!#!>1</!#!>hkey_local_machine\system\currentcontrolset\services\mrxsmb10<,>start<!#!>1</!#!>equals<!#!>1</!#!>4<!#!>1</!#!>equals<!#!>1</!#!>4<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_GetRegistryValue<!#!>1</!#!>hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>smb1<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>GetRegistryValue<!#!>1</!#!>hkey_local_machine_system_currentcontrolset_services_mrxsmb10<,>start<!#!>1</!#!>equals<!#!>1</!#!>4<!#!>1</!#!>equals<!#!>1</!#!>4<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>smb1_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters<,>smb1" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>smb1_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareAllWmiObjects_root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__SMB1Protocol_<,>installstate<,>2<,>all_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareAllWmiObjects" -ExecutionParamsString "root\cimv2<,>SELECT installstate FROM win32_optionalfeature WHERE name = 'SMB1Protocol'<,>installstate<,>2<,>all" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareAllWmiObjects_root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__SMB1Protocol_<,>installstate<,>2<,>all_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_mrxsmb10<,>start_equals_4_equals_4_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\mrxsmb10<,>start" -AssessorConditionsString "equals" -AssessorValuesString "4" -McmConditionsString "equals" -McmValuesString "4" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_mrxsmb10<,>start_equals_4_equals_4_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_seclogon__startmode" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='seclogon'" -OutputFieldName "startmode" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_seclogon__startmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareLockoutValues<#>1</#>GetAccountPolicyValue_LockoutDuration||LockoutDuration<,>less_than_or_equal||equals<,>0||4294967295<#>1</#>LockoutThreshold_equals<#>1</#>greater_than_true<#>1</#>0_equals<#>1</#>greater_than_true<#>1</#>0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareLockoutValues<#>1</#>GetAccountPolicyValue" -ExecutionParamsString "LockoutDuration||LockoutDuration<,>less than or equal||equals<,>0||4294967295<#>1</#>LockoutThreshold" -AssessorConditionsString "equals<#>1</#>greater than" -AssessorValuesString "true<#>1</#>0" -McmConditionsString "equals<#>1</#>greater than" -McmValuesString "true<#>1</#>0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareLockoutValues<#>1</#>GetAccountPolicyValue_LockoutDuration||LockoutDuration<,>less_than_or_equal||equals<,>0||4294967295<#>1</#>LockoutThreshold_equals<#>1</#>greater_than_true<#>1</#>0_equals<#>1</#>greater_than_true<#>1</#>0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAccountPolicyValue<#>1</#>GetAccountPolicyValue_LockoutDuration<#>1</#>LockoutThreshold_greater_than_or_equal<#>1</#>greater_than_900<#>1</#>0_greater_than_or_equal<#>1</#>greater_than_900<#>1</#>0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAccountPolicyValue<#>1</#>GetAccountPolicyValue" -ExecutionParamsString "LockoutDuration<#>1</#>LockoutThreshold" -AssessorConditionsString "greater than or equal<#>1</#>greater than" -AssessorValuesString "900<#>1</#>0" -McmConditionsString "greater than or equal<#>1</#>greater than" -McmValuesString "900<#>1</#>0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAccountPolicyValue<#>1</#>GetAccountPolicyValue_LockoutDuration<#>1</#>LockoutThreshold_greater_than_or_equal<#>1</#>greater_than_900<#>1</#>0_greater_than_or_equal<#>1</#>greater_than_900<#>1</#>0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>not_equal_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString ".*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>\<,>null<,>^(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\application<,>file<,>\<#>1</#>hkey_local_machine\system\currentcontrolset\services\eventlog\application<,>file" -AssessorConditionsString "pattern match<#>1</#>pattern match" -AssessorValuesString ".*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$" -McmConditionsString "equals<#>1</#>not equal" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>not_equal_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>equals_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString ".*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>hkey_local_machine\software\microsoft\windows nt\currentversion<,>systemroot<,>^%.*%(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\application<,>file<,>\<#>1</#>hkey_local_machine\system\currentcontrolset\services\eventlog\application<,>file" -AssessorConditionsString "pattern match<#>1</#>pattern match" -AssessorValuesString ".*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>equals_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>not_equal_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString ".*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>\<,>null<,>^(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\security<,>file<,>\<#>1</#>hkey_local_machine\system\currentcontrolset\services\eventlog\security<,>file" -AssessorConditionsString "pattern match<#>1</#>pattern match" -AssessorValuesString ".*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$" -McmConditionsString "equals<#>1</#>not equal" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>not_equal_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>equals_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString ".*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>hkey_local_machine\software\microsoft\windows nt\currentversion<,>systemroot<,>^%.*%(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\security<,>file<,>\<#>1</#>hkey_local_machine\system\currentcontrolset\services\eventlog\security<,>file" -AssessorConditionsString "pattern match<#>1</#>pattern match" -AssessorValuesString ".*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>equals_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>not_equal_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString ".*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>\<,>null<,>^(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\system<,>file<,>\<#>1</#>hkey_local_machine\system\currentcontrolset\services\eventlog\system<,>file" -AssessorConditionsString "pattern match<#>1</#>pattern match" -AssessorValuesString ".*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$" -McmConditionsString "equals<#>1</#>not equal" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>not_equal_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>equals_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString ".*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>hkey_local_machine\software\microsoft\windows nt\currentversion<,>systemroot<,>^%.*%(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\system<,>file<,>\<#>1</#>hkey_local_machine\system\currentcontrolset\services\eventlog\system<,>file" -AssessorConditionsString "pattern match<#>1</#>pattern match" -AssessorValuesString ".*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19||S-1-15-2-1<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>equals_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "other_policy_change_events" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9234-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"other_policy_change_events", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "detailed_file_share" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9244-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"detailed_file_share", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "mpssvc_rule_level_policy_change" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9232-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"mpssvc_rule_level_policy_change", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\classes\batfile\shell\runasuser\suppressionpolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\classes\batfile\shell\runasuser" -RegistryKey "suppressionpolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\classes\batfile\shell\runasuser\suppressionpolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\classes\cmdfile\shell\runasuser\suppressionpolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\classes\cmdfile\shell\runasuser" -RegistryKey "suppressionpolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\classes\cmdfile\shell\runasuser\suppressionpolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\classes\exefile\shell\runasuser\suppressionpolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\classes\exefile\shell\runasuser" -RegistryKey "suppressionpolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\classes\exefile\shell\runasuser\suppressionpolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\classes\mscfile\shell\runasuser\suppressionpolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\classes\mscfile\shell\runasuser" -RegistryKey "suppressionpolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\classes\mscfile\shell\runasuser\suppressionpolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria_GetRegistryValue<!#!>1</!#!>hkey_local_machine_software_policies_microsoft_windows_lanmanworkstation<,>allowinsecureguestauth<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>AND<!#!>1</!#!>2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria" -ExecutionParamsString "GetRegistryValue<!#!>1</!#!>hkey_local_machine\software\policies\microsoft\windows\lanmanworkstation<,>allowinsecureguestauth<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria_GetRegistryValue<!#!>1</!#!>hkey_local_machine_software_policies_microsoft_windows_lanmanworkstation<,>allowinsecureguestauth<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>AND<!#!>1</!#!>2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_equals<#>1</#>equals_EnterpriseS<#>1</#>10240_equals<#>1</#>equals_EnterpriseS<#>1</#>10240_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows nt\currentversion<,>editionid<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "EnterpriseS<#>1</#>10240" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "EnterpriseS<#>1</#>10240" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_equals<#>1</#>equals_EnterpriseS<#>1</#>10240_equals<#>1</#>equals_EnterpriseS<#>1</#>10240_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareRegistryWithMultipleAcceptedValues<#>1</#>CompareRegistryWithMultipleAcceptedValues_hkey_local_machine_software_policies_microsoft_windows_networkprovider_hardenedpaths<,>__*_sysvol<,>(^|_*,_*)RequireMutualAuthentication=1(_*,_*|)||(^|[_*,_*])RequireMutualAuthentication=(?!1(_*,_*|))||(^|_*,_*)RequireIntegrity=1(_*,_*|)||(^|_*,_*)RequireIntegrity=(?!1(_*,_*|))<,>false<,>pattern_match||pattern_match||pattern_match||pattern_match<,>false<#>1</#>hkey_local_machine_software_policies_microsoft_windows_networkprovider_hardenedpaths<,>__*_netlogon<,>(^|_*,_*)RequireMutualAuthentication=1(_*,_*|)||(^|[_*,_*])RequireMutualAuthentication=(?!1(_*,_*|))||(^|_*,_*)RequireIntegrity=1(_*,_*|)||(^|_*,_*)RequireIntegrity=(?!1(_*,_*|))<,>false<,>pattern_match||pattern_match||pattern_match||pattern_match<,>false_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareRegistryWithMultipleAcceptedValues<#>1</#>CompareRegistryWithMultipleAcceptedValues" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths<,>\\*\sysvol<,>(^| *, *)RequireMutualAuthentication=1( *, *|$)||(^|[ *, *])RequireMutualAuthentication=(?!1( *, *|$))||(^| *, *)RequireIntegrity=1( *, *|$)||(^| *, *)RequireIntegrity=(?!1( *, *|$))<,>false<,>pattern match||pattern match||pattern match||pattern match<,>false<#>1</#>hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths<,>\\*\netlogon<,>(^| *, *)RequireMutualAuthentication=1( *, *|$)||(^|[ *, *])RequireMutualAuthentication=(?!1( *, *|$))||(^| *, *)RequireIntegrity=1( *, *|$)||(^| *, *)RequireIntegrity=(?!1( *, *|$))<,>false<,>pattern match||pattern match||pattern match||pattern match<,>false" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareRegistryWithMultipleAcceptedValues<#>1</#>CompareRegistryWithMultipleAcceptedValues_hkey_local_machine_software_policies_microsoft_windows_networkprovider_hardenedpaths<,>__*_sysvol<,>(^|_*,_*)RequireMutualAuthentication=1(_*,_*|)||(^|[_*,_*])RequireMutualAuthentication=(?!1(_*,_*|))||(^|_*,_*)RequireIntegrity=1(_*,_*|)||(^|_*,_*)RequireIntegrity=(?!1(_*,_*|))<,>false<,>pattern_match||pattern_match||pattern_match||pattern_match<,>false<#>1</#>hkey_local_machine_software_policies_microsoft_windows_networkprovider_hardenedpaths<,>__*_netlogon<,>(^|_*,_*)RequireMutualAuthentication=1(_*,_*|)||(^|[_*,_*])RequireMutualAuthentication=(?!1(_*,_*|))||(^|_*,_*)RequireIntegrity=1(_*,_*|)||(^|_*,_*)RequireIntegrity=(?!1(_*,_*|))<,>false<,>pattern_match||pattern_match||pattern_match||pattern_match<,>false_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\wcmsvc\grouppolicy\\fminimizeconnections\1_May_Not_Exist" -CollectedDataResult (Compare-RegistryValueOrNotExist -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\wcmsvc\grouppolicy\" -RegistryKey "fminimizeconnections" -ExpectedValue "1" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\wcmsvc\grouppolicy\\fminimizeconnections\1_May_Not_Exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\wcmsvc\grouppolicy\\fblocknondomain" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\wcmsvc\grouppolicy\" -RegistryKey "fblocknondomain"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\wcmsvc\grouppolicy\\fblocknondomain", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValueByNamePattern_hkey_local_machine_software_microsoft_windows_currentversion_policies_system_audit<,>processcreationincludecmdline_enabled_pattern_match_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValueByNamePattern" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\audit<,>processcreationincludecmdline_enabled" -AssessorConditionsString "pattern match" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValueByNamePattern_hkey_local_machine_software_microsoft_windows_currentversion_policies_system_audit<,>processcreationincludecmdline_enabled_pattern_match_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid_less_than<#>1</#>equals_15063<#>1</#>EnterpriseS_less_than<#>1</#>equals_15063<#>1</#>EnterpriseS_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>editionid" -AssessorConditionsString "less than<#>1</#>equals" -AssessorValuesString "15063<#>1</#>EnterpriseS" -McmConditionsString "less than<#>1</#>equals" -McmValuesString "15063<#>1</#>EnterpriseS" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid_less_than<#>1</#>equals_15063<#>1</#>EnterpriseS_less_than<#>1</#>equals_15063<#>1</#>EnterpriseS_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\policies\earlylaunch\driverloadpolicy\3||1||8\false\equals||equals||equals\false" -CollectedDataResult (Compare-RegistryWithMultipleAcceptedValues -RegistryLocation "hkey_local_machine\system\currentcontrolset\policies\earlylaunch" -RegistryKey "driverloadpolicy" -AcceptedValuesString "3||1||8" -RegistryMayNotExist "false" -CompareMethods "equals||equals||equals" -AllValueMustMatch "false" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\policies\earlylaunch\driverloadpolicy\3||1||8\false\equals||equals||equals\false", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters\devicepkinitenabled\1_May_Not_Exist" -CollectedDataResult (Compare-RegistryValueOrNotExist -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters" -RegistryKey "devicepkinitenabled" -ExpectedValue "1" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters\devicepkinitenabled\1_May_Not_Exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\editionid" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion" -RegistryKey "editionid"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\editionid", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\appcompat\disableinventory" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\appcompat" -RegistryKey "disableinventory"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\appcompat\disableinventory", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_datacollection<,>allowtelemetry<#>1</#>hkey_local_machine_software_policies_microsoft_windows_datacollection<,>limitenhanceddiagnosticdatawindowsanalytics_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\datacollection<,>allowtelemetry<#>1</#>hkey_local_machine\software\policies\microsoft\windows\datacollection<,>limitenhanceddiagnosticdatawindowsanalytics" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "2<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "2<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_datacollection<,>allowtelemetry<#>1</#>hkey_local_machine_software_policies_microsoft_windows_datacollection<,>limitenhanceddiagnosticdatawindowsanalytics_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\releaseid" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion" -RegistryKey "releaseid"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\releaseid", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>SubCriteria_hkey_local_machine_software_policies_microsoft_windows_datacollection<,>allowtelemetry<#>1</#>GetRegistryValue<!#!>1</!#!>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>releaseid<!#!>1</!#!>greater_than_or_equal<!#!>1</!#!>1709<!#!>1</!#!>greater_than_or_equal<!#!>1</!#!>1709<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_2<#>1</#>true_equals<#>1</#>equals_2<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>SubCriteria" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\datacollection<,>allowtelemetry<#>1</#>GetRegistryValue<!#!>1</!#!>hkey_local_machine\software\microsoft\windows nt\currentversion<,>releaseid<!#!>1</!#!>greater than or equal<!#!>1</!#!>1709<!#!>1</!#!>greater than or equal<!#!>1</!#!>1709<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "2<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "2<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>SubCriteria_hkey_local_machine_software_policies_microsoft_windows_datacollection<,>allowtelemetry<#>1</#>GetRegistryValue<!#!>1</!#!>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>releaseid<!#!>1</!#!>greater_than_or_equal<!#!>1</!#!>1709<!#!>1</!#!>greater_than_or_equal<!#!>1</!#!>1709<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_2<#>1</#>true_equals<#>1</#>equals_2<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\datacollection\allowtelemetry\0||1\false\equals||equals\false" -CollectedDataResult (Compare-RegistryWithMultipleAcceptedValues -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\datacollection" -RegistryKey "allowtelemetry" -AcceptedValuesString "0||1" -RegistryMayNotExist "false" -CompareMethods "equals||equals" -AllValueMustMatch "false" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\datacollection\allowtelemetry\0||1\false\equals||equals\false", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_equals<#>1</#>less_than_EnterpriseS<#>1</#>14393_equals<#>1</#>less_than_EnterpriseS<#>1</#>14393_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows nt\currentversion<,>editionid<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber" -AssessorConditionsString "equals<#>1</#>less than" -AssessorValuesString "EnterpriseS<#>1</#>14393" -McmConditionsString "equals<#>1</#>less than" -McmValuesString "EnterpriseS<#>1</#>14393" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_equals<#>1</#>less_than_EnterpriseS<#>1</#>14393_equals<#>1</#>less_than_EnterpriseS<#>1</#>14393_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deliveryoptimization\dodownloadmode\0||1||2||99||100\false\equals||equals||equals||equals||equals\false" -CollectedDataResult (Compare-RegistryWithMultipleAcceptedValues -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deliveryoptimization" -RegistryKey "dodownloadmode" -AcceptedValuesString "0||1||2||99||100" -RegistryMayNotExist "false" -CompareMethods "equals||equals||equals||equals||equals" -AllValueMustMatch "false" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deliveryoptimization\dodownloadmode\0||1||2||99||100\false\equals||equals||equals||equals||equals\false", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_system<,>enablesmartscreen<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber<#>1</#>hkey_local_machine_software_policies_microsoft_windows_system<,>shellsmartscreenlevel_equals<#>1</#>greater_than_or_equal<#>1</#>equals_1<#>1</#>15063<#>1</#>Block_equals<#>1</#>greater_than_or_equal<#>1</#>equals_1<#>1</#>15063<#>1</#>Block_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\system<,>enablesmartscreen<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber<#>1</#>hkey_local_machine\software\policies\microsoft\windows\system<,>shellsmartscreenlevel" -AssessorConditionsString "equals<#>1</#>greater than or equal<#>1</#>equals" -AssessorValuesString "1<#>1</#>15063<#>1</#>Block" -McmConditionsString "equals<#>1</#>greater than or equal<#>1</#>equals" -McmValuesString "1<#>1</#>15063<#>1</#>Block" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_system<,>enablesmartscreen<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber<#>1</#>hkey_local_machine_software_policies_microsoft_windows_system<,>shellsmartscreenlevel_equals<#>1</#>greater_than_or_equal<#>1</#>equals_1<#>1</#>15063<#>1</#>Block_equals<#>1</#>greater_than_or_equal<#>1</#>equals_1<#>1</#>15063<#>1</#>Block_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue<#>1</#>GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_system<,>enablesmartscreen<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid_equals<#>1</#>greater_than_or_equal<#>1</#>less_than<#>1</#>equals_1<#>1</#>14393<#>1</#>15063<#>1</#>EnterpriseS_equals<#>1</#>greater_than_or_equal<#>1</#>less_than<#>1</#>equals_1<#>1</#>14393<#>1</#>15063<#>1</#>EnterpriseS_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue<#>1</#>GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\system<,>enablesmartscreen<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>editionid" -AssessorConditionsString "equals<#>1</#>greater than or equal<#>1</#>less than<#>1</#>equals" -AssessorValuesString "1<#>1</#>14393<#>1</#>15063<#>1</#>EnterpriseS" -McmConditionsString "equals<#>1</#>greater than or equal<#>1</#>less than<#>1</#>equals" -McmValuesString "1<#>1</#>14393<#>1</#>15063<#>1</#>EnterpriseS" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue<#>1</#>GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_system<,>enablesmartscreen<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid_equals<#>1</#>greater_than_or_equal<#>1</#>less_than<#>1</#>equals_1<#>1</#>14393<#>1</#>15063<#>1</#>EnterpriseS_equals<#>1</#>greater_than_or_equal<#>1</#>less_than<#>1</#>equals_1<#>1</#>14393<#>1</#>15063<#>1</#>EnterpriseS_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid<#>1</#>hkey_local_machine_software_policies_microsoft_windows_system<,>enablesmartscreen<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_equals<#>1</#>equals<#>1</#>less_than_EnterpriseS<#>1</#>2<#>1</#>14393_equals<#>1</#>equals<#>1</#>less_than_EnterpriseS<#>1</#>2<#>1</#>14393_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows nt\currentversion<,>editionid<#>1</#>hkey_local_machine\software\policies\microsoft\windows\system<,>enablesmartscreen<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>less than" -AssessorValuesString "EnterpriseS<#>1</#>2<#>1</#>14393" -McmConditionsString "equals<#>1</#>equals<#>1</#>less than" -McmValuesString "EnterpriseS<#>1</#>2<#>1</#>14393" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid<#>1</#>hkey_local_machine_software_policies_microsoft_windows_system<,>enablesmartscreen<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_equals<#>1</#>equals<#>1</#>less_than_EnterpriseS<#>1</#>2<#>1</#>14393_equals<#>1</#>equals<#>1</#>less_than_EnterpriseS<#>1</#>2<#>1</#>14393_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\explorer\nodataexecutionprevention\0_May_Not_Exist" -CollectedDataResult (Compare-RegistryValueOrNotExist -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\explorer" -RegistryKey "nodataexecutionprevention" -ExpectedValue "0" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\explorer\nodataexecutionprevention\0_May_Not_Exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\explorer\noheapterminationoncorruption\0_May_Not_Exist" -CollectedDataResult (Compare-RegistryValueOrNotExist -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\explorer" -RegistryKey "noheapterminationoncorruption" -ExpectedValue "0" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\explorer\noheapterminationoncorruption\0_May_Not_Exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\prexpsp2shellprotocolbehavior\1_May_Not_Exist" -CollectedDataResult (Compare-RegistryValueOrNotExist -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer" -RegistryKey "prexpsp2shellprotocolbehavior" -ExpectedValue "1" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\prexpsp2shellprotocolbehavior\1_May_Not_Exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_policies_microsoft_microsoftedge_internet_settings<,>preventcerterroroverrides<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_equals<#>1</#>greater_than_or_equal_1<#>1</#>17763_equals<#>1</#>greater_than_or_equal_1<#>1</#>17763_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\microsoftedge\internet settings<,>preventcerterroroverrides<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber" -AssessorConditionsString "equals<#>1</#>greater than or equal" -AssessorValuesString "1<#>1</#>17763" -McmConditionsString "equals<#>1</#>greater than or equal" -McmValuesString "1<#>1</#>17763" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_policies_microsoft_microsoftedge_internet_settings<,>preventcerterroroverrides<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_equals<#>1</#>greater_than_or_equal_1<#>1</#>17763_equals<#>1</#>greater_than_or_equal_1<#>1</#>17763_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_less_than_17763_less_than_17763_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber" -AssessorConditionsString "less than" -AssessorValuesString "17763" -McmConditionsString "less than" -McmValuesString "17763" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_less_than_17763_less_than_17763_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid_equals_EnterpriseS_equals_EnterpriseS_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows nt\currentversion<,>editionid" -AssessorConditionsString "equals" -AssessorValuesString "EnterpriseS" -McmConditionsString "equals" -McmValuesString "EnterpriseS" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>editionid_equals_EnterpriseS_equals_EnterpriseS_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_gamedvr<,>allowgamedvr<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_equals<#>1</#>greater_than_or_equal_0<#>1</#>15063_equals<#>1</#>greater_than_or_equal_0<#>1</#>15063_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\gamedvr<,>allowgamedvr<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber" -AssessorConditionsString "equals<#>1</#>greater than or equal" -AssessorValuesString "0<#>1</#>15063" -McmConditionsString "equals<#>1</#>greater than or equal" -McmValuesString "0<#>1</#>15063" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_gamedvr<,>allowgamedvr<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_equals<#>1</#>greater_than_or_equal_0<#>1</#>15063_equals<#>1</#>greater_than_or_equal_0<#>1</#>15063_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\passportforwork\pincomplexity\minimumpinlength" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\passportforwork\pincomplexity" -RegistryKey "minimumpinlength"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\passportforwork\pincomplexity\minimumpinlength", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\internet explorer\feeds\allowbasicauthinclear\1_May_Not_Exist" -CollectedDataResult (Compare-RegistryValueOrNotExist -RegistryLocation "hkey_local_machine\software\policies\microsoft\internet explorer\feeds" -RegistryKey "allowbasicauthinclear" -ExpectedValue "1" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\internet explorer\feeds\allowbasicauthinclear\1_May_Not_Exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\installer\safeforscripting\1_May_Not_Exist" -CollectedDataResult (Compare-RegistryValueOrNotExist -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\installer" -RegistryKey "safeforscripting" -ExpectedValue "1" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\installer\safeforscripting\1_May_Not_Exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\powershell\scriptblocklogging\enablescriptblocklogging_ByNamePattern" -CollectedDataResult (Get-RegistryValueByNamePattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\powershell\scriptblocklogging" -NamePattern "enablescriptblocklogging"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\powershell\scriptblocklogging\enablescriptblocklogging_ByNamePattern", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\kernel dma protection\deviceenumerationpolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\kernel dma protection" -RegistryKey "deviceenumerationpolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\kernel dma protection\deviceenumerationpolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists_hkey_local_machine_software_microsoft_systemcertificates_root_certificates_8c941b34ea1ea6ed9ae2bc54cf687252b4c9b561||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_8c941b34ea1ea6ed9ae2bc54cf687252b4c9b561||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_8c941b34ea1ea6ed9ae2bc54cf687252b4c9b561<,>^.+||^.+||^.+<#>1</#>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_d73ca91102a2204a36459ed32213b467d7ce97fb||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_d73ca91102a2204a36459ed32213b467d7ce97fb||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_d73ca91102a2204a36459ed32213b467d7ce97fb<,>^.+||^.+||^.+<#>1</#>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_b8269f25dbd937ecafd4c35a9838571723f2d026||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_b8269f25dbd937ecafd4c35a9838571723f2d026||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_b8269f25dbd937ecafd4c35a9838571723f2d026<,>^.+||^.+||^.+<#>1</#>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_4ecb5cc3095670454da1cbd410fc921f46b8564b||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_4ecb5cc3095670454da1cbd410fc921f46b8564b||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_4ecb5cc3095670454da1cbd410fc921f46b8564b<,>^.+||^.+||^.+_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists" -ExecutionParamsString "hkey_local_machine\software\microsoft\systemcertificates\root\certificates\8c941b34ea1ea6ed9ae2bc54cf687252b4c9b561||hkey_local_machine\software\microsoft\enterprisecertificates\root\certificates\8c941b34ea1ea6ed9ae2bc54cf687252b4c9b561||hkey_local_machine\software\policies\microsoft\systemcertificates\root\certificates\8c941b34ea1ea6ed9ae2bc54cf687252b4c9b561<,>^.+$||^.+$||^.+$<#>1</#>hkey_local_machine\software\microsoft\systemcertificates\root\certificates\d73ca91102a2204a36459ed32213b467d7ce97fb||hkey_local_machine\software\microsoft\enterprisecertificates\root\certificates\d73ca91102a2204a36459ed32213b467d7ce97fb||hkey_local_machine\software\policies\microsoft\systemcertificates\root\certificates\d73ca91102a2204a36459ed32213b467d7ce97fb<,>^.+$||^.+$||^.+$<#>1</#>hkey_local_machine\software\microsoft\systemcertificates\root\certificates\b8269f25dbd937ecafd4c35a9838571723f2d026||hkey_local_machine\software\microsoft\enterprisecertificates\root\certificates\b8269f25dbd937ecafd4c35a9838571723f2d026||hkey_local_machine\software\policies\microsoft\systemcertificates\root\certificates\b8269f25dbd937ecafd4c35a9838571723f2d026<,>^.+$||^.+$||^.+$<#>1</#>hkey_local_machine\software\microsoft\systemcertificates\root\certificates\4ecb5cc3095670454da1cbd410fc921f46b8564b||hkey_local_machine\software\microsoft\enterprisecertificates\root\certificates\4ecb5cc3095670454da1cbd410fc921f46b8564b||hkey_local_machine\software\policies\microsoft\systemcertificates\root\certificates\4ecb5cc3095670454da1cbd410fc921f46b8564b<,>^.+$||^.+$||^.+$" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true<#>1</#>true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>true<#>1</#>true<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists_hkey_local_machine_software_microsoft_systemcertificates_root_certificates_8c941b34ea1ea6ed9ae2bc54cf687252b4c9b561||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_8c941b34ea1ea6ed9ae2bc54cf687252b4c9b561||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_8c941b34ea1ea6ed9ae2bc54cf687252b4c9b561<,>^.+||^.+||^.+<#>1</#>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_d73ca91102a2204a36459ed32213b467d7ce97fb||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_d73ca91102a2204a36459ed32213b467d7ce97fb||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_d73ca91102a2204a36459ed32213b467d7ce97fb<,>^.+||^.+||^.+<#>1</#>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_b8269f25dbd937ecafd4c35a9838571723f2d026||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_b8269f25dbd937ecafd4c35a9838571723f2d026||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_b8269f25dbd937ecafd4c35a9838571723f2d026<,>^.+||^.+||^.+<#>1</#>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_4ecb5cc3095670454da1cbd410fc921f46b8564b||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_4ecb5cc3095670454da1cbd410fc921f46b8564b||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_4ecb5cc3095670454da1cbd410fc921f46b8564b<,>^.+||^.+||^.+_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<!#!>1</!#!>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_c313f919a6ed4e0e8451afa930fb419a20f181e4<,>^.+<#>2</#>hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_c313f919a6ed4e0e8451afa930fb419a20f181e4<,>^.+<#>2</#>hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_c313f919a6ed4e0e8451afa930fb419a20f181e4<,>^.+<#>2</#>hkey_local_machine_software_policies_microsoft_enterprisecertificates_root_certificates_c313f919a6ed4e0e8451afa930fb419a20f181e4<,>^.+<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<!#!>1</!#!>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_73e8bb08e337d6a5a6aef90cffdd97d9176cb582<,>^.+<#>2</#>hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_73e8bb08e337d6a5a6aef90cffdd97d9176cb582<,>^.+<#>2</#>hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_73e8bb08e337d6a5a6aef90cffdd97d9176cb582<,>^.+<#>2</#>hkey_local_machine_software_policies_microsoft_enterprisecertificates_root_certificates_73e8bb08e337d6a5a6aef90cffdd97d9176cb582<,>^.+<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<!#!>1</!#!>hkey_local_machine\software\microsoft\systemcertificates\root\certificates\c313f919a6ed4e0e8451afa930fb419a20f181e4<,>^.+$<#>2</#>hkey_local_machine\software\microsoft\enterprisecertificates\root\certificates\c313f919a6ed4e0e8451afa930fb419a20f181e4<,>^.+$<#>2</#>hkey_local_machine\software\policies\microsoft\systemcertificates\root\certificates\c313f919a6ed4e0e8451afa930fb419a20f181e4<,>^.+$<#>2</#>hkey_local_machine\software\policies\microsoft\enterprisecertificates\root\certificates\c313f919a6ed4e0e8451afa930fb419a20f181e4<,>^.+$<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<!#!>1</!#!>hkey_local_machine\software\microsoft\systemcertificates\root\certificates\73e8bb08e337d6a5a6aef90cffdd97d9176cb582<,>^.+$<#>2</#>hkey_local_machine\software\microsoft\enterprisecertificates\root\certificates\73e8bb08e337d6a5a6aef90cffdd97d9176cb582<,>^.+$<#>2</#>hkey_local_machine\software\policies\microsoft\systemcertificates\root\certificates\73e8bb08e337d6a5a6aef90cffdd97d9176cb582<,>^.+$<#>2</#>hkey_local_machine\software\policies\microsoft\enterprisecertificates\root\certificates\73e8bb08e337d6a5a6aef90cffdd97d9176cb582<,>^.+$<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<!#!>1</!#!>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_c313f919a6ed4e0e8451afa930fb419a20f181e4<,>^.+<#>2</#>hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_c313f919a6ed4e0e8451afa930fb419a20f181e4<,>^.+<#>2</#>hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_c313f919a6ed4e0e8451afa930fb419a20f181e4<,>^.+<#>2</#>hkey_local_machine_software_policies_microsoft_enterprisecertificates_root_certificates_c313f919a6ed4e0e8451afa930fb419a20f181e4<,>^.+<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<#>2</#>CheckRegistryValueNameExistenceByPattern<!#!>1</!#!>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_73e8bb08e337d6a5a6aef90cffdd97d9176cb582<,>^.+<#>2</#>hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_73e8bb08e337d6a5a6aef90cffdd97d9176cb582<,>^.+<#>2</#>hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_73e8bb08e337d6a5a6aef90cffdd97d9176cb582<,>^.+<#>2</#>hkey_local_machine_software_policies_microsoft_enterprisecertificates_root_certificates_73e8bb08e337d6a5a6aef90cffdd97d9176cb582<,>^.+<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\systemcertificates\disallowed\certificates\a8c27332ccb4ca49554ce55d34062a7dd2850c02\^.+$||hkey_local_machine\software\microsoft\enterprisecertificates\disallowed\certificates\a8c27332ccb4ca49554ce55d34062a7dd2850c02\^.+$||hkey_local_machine\software\policies\microsoft\systemcertificates\disallowed\certificates\a8c27332ccb4ca49554ce55d34062a7dd2850c02\^.+$" -CollectedDataResult (Check-AtLeastOneRegistryExists -RegistryLocationsString "hkey_local_machine\software\microsoft\systemcertificates\disallowed\certificates\a8c27332ccb4ca49554ce55d34062a7dd2850c02||hkey_local_machine\software\microsoft\enterprisecertificates\disallowed\certificates\a8c27332ccb4ca49554ce55d34062a7dd2850c02||hkey_local_machine\software\policies\microsoft\systemcertificates\disallowed\certificates\a8c27332ccb4ca49554ce55d34062a7dd2850c02" -RegistryKeysString "^.+$||^.+$||^.+$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\systemcertificates\disallowed\certificates\a8c27332ccb4ca49554ce55d34062a7dd2850c02\^.+$||hkey_local_machine\software\microsoft\enterprisecertificates\disallowed\certificates\a8c27332ccb4ca49554ce55d34062a7dd2850c02\^.+$||hkey_local_machine\software\policies\microsoft\systemcertificates\disallowed\certificates\a8c27332ccb4ca49554ce55d34062a7dd2850c02\^.+$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\systemcertificates\disallowed\certificates\ac06108ca348cc03b53795c64bf84403c1dbd341\^.+$||hkey_local_machine\software\microsoft\enterprisecertificates\disallowed\certificates\ac06108ca348cc03b53795c64bf84403c1dbd341\^.+$||hkey_local_machine\software\policies\microsoft\systemcertificates\disallowed\certificates\ac06108ca348cc03b53795c64bf84403c1dbd341\^.+$" -CollectedDataResult (Check-AtLeastOneRegistryExists -RegistryLocationsString "hkey_local_machine\software\microsoft\systemcertificates\disallowed\certificates\ac06108ca348cc03b53795c64bf84403c1dbd341||hkey_local_machine\software\microsoft\enterprisecertificates\disallowed\certificates\ac06108ca348cc03b53795c64bf84403c1dbd341||hkey_local_machine\software\policies\microsoft\systemcertificates\disallowed\certificates\ac06108ca348cc03b53795c64bf84403c1dbd341" -RegistryKeysString "^.+$||^.+$||^.+$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\systemcertificates\disallowed\certificates\ac06108ca348cc03b53795c64bf84403c1dbd341\^.+$||hkey_local_machine\software\microsoft\enterprisecertificates\disallowed\certificates\ac06108ca348cc03b53795c64bf84403c1dbd341\^.+$||hkey_local_machine\software\policies\microsoft\systemcertificates\disallowed\certificates\ac06108ca348cc03b53795c64bf84403c1dbd341\^.+$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\systemcertificates\disallowed\certificates\af132ac65de86fc4fb3fe51fd637eba0ff0b12a9\^.+$||hkey_local_machine\software\microsoft\enterprisecertificates\disallowed\certificates\af132ac65de86fc4fb3fe51fd637eba0ff0b12a9\^.+$||hkey_local_machine\software\policies\microsoft\systemcertificates\disallowed\certificates\af132ac65de86fc4fb3fe51fd637eba0ff0b12a9\^.+$" -CollectedDataResult (Check-AtLeastOneRegistryExists -RegistryLocationsString "hkey_local_machine\software\microsoft\systemcertificates\disallowed\certificates\af132ac65de86fc4fb3fe51fd637eba0ff0b12a9||hkey_local_machine\software\microsoft\enterprisecertificates\disallowed\certificates\af132ac65de86fc4fb3fe51fd637eba0ff0b12a9||hkey_local_machine\software\policies\microsoft\systemcertificates\disallowed\certificates\af132ac65de86fc4fb3fe51fd637eba0ff0b12a9" -RegistryKeysString "^.+$||^.+$||^.+$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\systemcertificates\disallowed\certificates\af132ac65de86fc4fb3fe51fd637eba0ff0b12a9\^.+$||hkey_local_machine\software\microsoft\enterprisecertificates\disallowed\certificates\af132ac65de86fc4fb3fe51fd637eba0ff0b12a9\^.+$||hkey_local_machine\software\policies\microsoft\systemcertificates\disallowed\certificates\af132ac65de86fc4fb3fe51fd637eba0ff0b12a9\^.+$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "S-1-5-21-[0-9-]+-500_Disabled_False" -CollectedDataResult (Get-LocalUserCountBySid -SidRegulaRExpression 'S-1-5-21-[0-9-]+-500' -PropertyNameToCheck "Disabled" -PropertyValueToCheck "False" ) } catch { New-Object CollectedBaselineValue(-1,"S-1-5-21-[0-9-]+-500_Disabled_False", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "_S-1-5-[0-9-]+-501__Disabled_False" -CollectedDataResult (Get-LocalUserCountBySid -SidRegulaRExpression '^S-1-5-[0-9-]+-501$' -PropertyNameToCheck "Disabled" -PropertyValueToCheck "False" ) } catch { New-Object CollectedBaselineValue(-1,"_S-1-5-[0-9-]+-501__Disabled_False", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "trustee_nameS-1-5-21-[0-9-]+-500" -CollectedDataResult (Get-TrusteeName -SidRegulaRExpression 'S-1-5-21-[0-9-]+-500' ) } catch { New-Object CollectedBaselineValue(-1,"trustee_nameS-1-5-21-[0-9-]+-500", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "trustee_nameS-1-5-21-[0-9-]+-500_domain__Administrator" -CollectedDataResult (Compare-ToDynamicTrusteeName -SidRegulaRExpression 'S-1-5-21-[0-9-]+-500' -DynamicExpectedValueField 'domain' -FixedExpectedValue '\Administrator' ) } catch { New-Object CollectedBaselineValue(-1,"trustee_nameS-1-5-21-[0-9-]+-500_domain__Administrator", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "trustee_name_S-1-5-[0-9-]+-501_" -CollectedDataResult (Get-TrusteeName -SidRegulaRExpression '^S-1-5-[0-9-]+-501$' ) } catch { New-Object CollectedBaselineValue(-1,"trustee_name_S-1-5-[0-9-]+-501_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "trustee_name_S-1-5-[0-9-]+-501__domain__Guest" -CollectedDataResult (Compare-ToDynamicTrusteeName -SidRegulaRExpression '^S-1-5-[0-9-]+-501$' -DynamicExpectedValueField 'domain' -FixedExpectedValue '\Guest' ) } catch { New-Object CollectedBaselineValue(-1,"trustee_name_S-1-5-[0-9-]+-501__domain__Guest", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareRegistryWithMultipleAcceptedValues_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>inactivitytimeoutsecs<,>900||0<,>false<,>less_than_or_equal||greater_than<,>false_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareRegistryWithMultipleAcceptedValues" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>inactivitytimeoutsecs<,>900||0<,>false<,>less than or equal||greater than<,>false" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareRegistryWithMultipleAcceptedValues_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>inactivitytimeoutsecs<,>900||0<,>false<,>less_than_or_equal||greater_than<,>false_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\cachedlogonscount" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon" -RegistryKey "cachedlogonscount"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\cachedlogonscount", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\scremoveoption" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon" -RegistryKey "scremoveoption"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\scremoveoption", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\ntlmminclientsec\524288" -CollectedDataResult (Check-BitwiseAndValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0" -RegistryKey "ntlmminclientsec" -ExpectedValue "524288" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\ntlmminclientsec\524288", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\ntlmminclientsec\536870912" -CollectedDataResult (Check-BitwiseAndValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0" -RegistryKey "ntlmminclientsec" -ExpectedValue "536870912" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\ntlmminclientsec\536870912", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\ntlmminserversec\524288" -CollectedDataResult (Check-BitwiseAndValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0" -RegistryKey "ntlmminserversec" -ExpectedValue "524288" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\ntlmminserversec\524288", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\ntlmminserversec\536870912" -CollectedDataResult (Check-BitwiseAndValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0" -RegistryKey "ntlmminserversec" -ExpectedValue "536870912" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0\ntlmminserversec\536870912", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\fipsalgorithmpolicy\enabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa\fipsalgorithmpolicy" -RegistryKey "enabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\fipsalgorithmpolicy\enabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "setrustedcredmanaccessnameright_pattern_match_.*_0_" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'setrustedcredmanaccessnameright'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString '' ) } catch { New-Object CollectedBaselineValue(-1,"setrustedcredmanaccessnameright_pattern_match_.*_0_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "senetworklogonright_pattern_match_.*_0_Administrators__Remote_Desktop_Users" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'senetworklogonright'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators||Remote Desktop Users' ) } catch { New-Object CollectedBaselineValue(-1,"senetworklogonright_pattern_match_.*_0_Administrators__Remote_Desktop_Users", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "setcbprivilege_pattern_match_.*_0_" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'setcbprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString '' ) } catch { New-Object CollectedBaselineValue(-1,"setcbprivilege_pattern_match_.*_0_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "seinteractivelogonright_pattern_match_.*_0_Administrators__Users" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'seinteractivelogonright'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators||Users' ) } catch { New-Object CollectedBaselineValue(-1,"seinteractivelogonright_pattern_match_.*_0_Administrators__Users", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "sebackupprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'sebackupprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"sebackupprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>GetRegistryValue_sesystemtimeprivilege<,>pattern_match<,>.*<,>0<,>Administrators||LOCAL_SERVICE<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>releaseid_equals<#>1</#>less_than_or_equal_1<#>1</#>1903_equals<#>1</#>less_than_or_equal_1<#>1</#>1903_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>GetRegistryValue" -ExecutionParamsString "sesystemtimeprivilege<,>pattern match<,>.*<,>0<,>Administrators||LOCAL SERVICE<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>releaseid" -AssessorConditionsString "equals<#>1</#>less than or equal" -AssessorValuesString "1<#>1</#>1903" -McmConditionsString "equals<#>1</#>less than or equal" -McmValuesString "1<#>1</#>1903" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege<#>1</#>GetRegistryValue_sesystemtimeprivilege<,>pattern_match<,>.*<,>0<,>Administrators||LOCAL_SERVICE<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>releaseid_equals<#>1</#>less_than_or_equal_1<#>1</#>1903_equals<#>1</#>less_than_or_equal_1<#>1</#>1903_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>GetRegistryValue_sesystemtimeprivilege<,>pattern_match<,>.*<,>0<,>Administrators||LOCAL_SERVICE||NT_SERVICE_autotimesvc<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>releaseid_equals<#>1</#>greater_than_or_equal_1<#>1</#>1909_equals<#>1</#>greater_than_or_equal_1<#>1</#>1909_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>GetRegistryValue" -ExecutionParamsString "sesystemtimeprivilege<,>pattern match<,>.*<,>0<,>Administrators||LOCAL SERVICE||NT SERVICE\autotimesvc<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>releaseid" -AssessorConditionsString "equals<#>1</#>greater than or equal" -AssessorValuesString "1<#>1</#>1909" -McmConditionsString "equals<#>1</#>greater than or equal" -McmValuesString "1<#>1</#>1909" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege<#>1</#>GetRegistryValue_sesystemtimeprivilege<,>pattern_match<,>.*<,>0<,>Administrators||LOCAL_SERVICE||NT_SERVICE_autotimesvc<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>releaseid_equals<#>1</#>greater_than_or_equal_1<#>1</#>1909_equals<#>1</#>greater_than_or_equal_1<#>1</#>1909_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "secreatepagefileprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'secreatepagefileprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"secreatepagefileprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "secreatetokenprivilege_pattern_match_.*_0_" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'secreatetokenprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString '' ) } catch { New-Object CollectedBaselineValue(-1,"secreatetokenprivilege_pattern_match_.*_0_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "secreateglobalprivilege_pattern_match_.*_0_Administrators__SERVICE__LOCAL_SERVICE__NETWORK_SERVICE" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'secreateglobalprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators||SERVICE||LOCAL SERVICE||NETWORK SERVICE' ) } catch { New-Object CollectedBaselineValue(-1,"secreateglobalprivilege_pattern_match_.*_0_Administrators__SERVICE__LOCAL_SERVICE__NETWORK_SERVICE", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "secreatepermanentprivilege_pattern_match_.*_0_" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'secreatepermanentprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString '' ) } catch { New-Object CollectedBaselineValue(-1,"secreatepermanentprivilege_pattern_match_.*_0_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "secreatesymboliclinkprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'secreatesymboliclinkprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"secreatesymboliclinkprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "sedebugprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'sedebugprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"sedebugprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenynetworklogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenynetworklogonright<,>equals||pattern_match<,>Enterprise_Admins||^.*__Enterprise_Admins<,>1<,><#>1</#>sedenynetworklogonright<,>equals||equals<,>Local_account||NT_AUTHORITY_Local_account<,>1<,>_not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>1_not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenynetworklogonright<,>equals||pattern match<,>Domain Admins||^.*\\Domain Admins$<,>1<,><#>1</#>sedenynetworklogonright<,>equals||pattern match<,>Enterprise Admins||^.*\\Enterprise Admins$<,>1<,><#>1</#>sedenynetworklogonright<,>equals||equals<,>Local account||NT AUTHORITY\Local account<,>1<,>" -AssessorConditionsString "not equal<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenynetworklogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenynetworklogonright<,>equals||pattern_match<,>Enterprise_Admins||^.*__Enterprise_Admins<,>1<,><#>1</#>sedenynetworklogonright<,>equals||equals<,>Local_account||NT_AUTHORITY_Local_account<,>1<,>_not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>1_not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareWmiWithMultipleValues_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareWmiWithMultipleValues" -ExecutionParamsString "root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareWmiWithMultipleValues_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenybatchLogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenybatchLogonright<,>equals||pattern_match<,>Enterprise_Admins||^.*__Enterprise_Admins<,>1<,>_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenybatchLogonright<,>equals||pattern match<,>Domain Admins||^.*\\Domain Admins$<,>1<,><#>1</#>sedenybatchLogonright<,>equals||pattern match<,>Enterprise Admins||^.*\\Enterprise Admins$<,>1<,>" -AssessorConditionsString "not equal<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>1<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>1<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenybatchLogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenybatchLogonright<,>equals||pattern_match<,>Enterprise_Admins||^.*__Enterprise_Admins<,>1<,>_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyservicelogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenyservicelogonright<,>equals||pattern_match<,>Enterprise_Admins||^.*__Enterprise_Admins<,>1<,>_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyservicelogonright<,>equals||pattern match<,>Domain Admins||^.*\\Domain Admins$<,>1<,><#>1</#>sedenyservicelogonright<,>equals||pattern match<,>Enterprise Admins||^.*\\Enterprise Admins$<,>1<,>" -AssessorConditionsString "not equal<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>1<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>1<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyservicelogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenyservicelogonright<,>equals||pattern_match<,>Enterprise_Admins||^.*__Enterprise_Admins<,>1<,>_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyinteractivelogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenyinteractivelogonright<,>equals||pattern_match<,>Enterprise_Admins||^.*__Enterprise_Admins<,>1<,>_not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1<#>1</#>1_not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyinteractivelogonright<,>equals||pattern match<,>Domain Admins||^.*\\Domain Admins$<,>1<,><#>1</#>sedenyinteractivelogonright<,>equals||pattern match<,>Enterprise Admins||^.*\\Enterprise Admins$<,>1<,>" -AssessorConditionsString "not equal<#>1</#>equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>1<#>1</#>1<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>1<#>1</#>1<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyinteractivelogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenyinteractivelogonright<,>equals||pattern_match<,>Enterprise_Admins||^.*__Enterprise_Admins<,>1<,>_not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1<#>1</#>1_not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>2</#>CompareWmiWithMultipleValues<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>2</!#!>equals<!#!>2</!#!>true<!#!>2</!#!>equals<!#!>2</!#!>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals||pattern_match<,>Everyone||^.*__Everyone<,>1<,><!#!>1</!#!>equals<!#!>1</!#!>1<!#!>1</!#!>equals<!#!>1</!#!>1<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>2</#>CompareWmiWithMultipleValues<!#!>2</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>2</!#!>equals<!#!>2</!#!>true<!#!>2</!#!>equals<!#!>2</!#!>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals||pattern match<,>Everyone||^.*\\Everyone$<,>1<,><!#!>1</!#!>equals<!#!>1</!#!>1<!#!>1</!#!>equals<!#!>1</!#!>1<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>2</#>CompareWmiWithMultipleValues<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>2</!#!>equals<!#!>2</!#!>true<!#!>2</!#!>equals<!#!>2</!#!>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals||pattern_match<,>Everyone||^.*__Everyone<,>1<,><!#!>1</!#!>equals<!#!>1</!#!>1<!#!>1</!#!>equals<!#!>1</!#!>1<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>equals||pattern_match<,>Enterprise_Admins||^.*__Enterprise_Admins<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>equals||equals<,>Local_account||NT_AUTHORITY_Local_account<,>1<,><#>2</#>CompareWmiWithMultipleValues<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>2</!#!>equals<!#!>2</!#!>true<!#!>2</!#!>equals<!#!>2</!#!>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>not_equal<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>not_equal<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals||pattern_match<,>Everyone||^.*__Everyone<,>1<,><!#!>1</!#!>equals<!#!>1</!#!>1<!#!>1</!#!>equals<!#!>1</!#!>1<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>equals||pattern match<,>Domain Admins||^.*\\Domain Admins$<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>equals||pattern match<,>Enterprise Admins||^.*\\Enterprise Admins$<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>equals||equals<,>Local account||NT AUTHORITY\Local account<,>1<,><#>2</#>CompareWmiWithMultipleValues<!#!>2</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>2</!#!>equals<!#!>2</!#!>true<!#!>2</!#!>equals<!#!>2</!#!>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>not equal<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>not equal<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals||pattern match<,>Everyone||^.*\\Everyone$<,>1<,><!#!>1</!#!>equals<!#!>1</!#!>1<!#!>1</!#!>equals<!#!>1</!#!>1<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>equals||pattern_match<,>Enterprise_Admins||^.*__Enterprise_Admins<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>equals||equals<,>Local_account||NT_AUTHORITY_Local_account<,>1<,><#>2</#>CompareWmiWithMultipleValues<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>2</!#!>equals<!#!>2</!#!>true<!#!>2</!#!>equals<!#!>2</!#!>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>not_equal<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>not_equal<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals||pattern_match<,>Everyone||^.*__Everyone<,>1<,><!#!>1</!#!>equals<!#!>1</!#!>1<!#!>1</!#!>equals<!#!>1</!#!>1<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "seenabledelegationprivilege_pattern_match_.*_0_" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'seenabledelegationprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString '' ) } catch { New-Object CollectedBaselineValue(-1,"seenabledelegationprivilege_pattern_match_.*_0_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "seremoteshutdownprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'seremoteshutdownprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"seremoteshutdownprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "seimpersonateprivilege_pattern_match_.*_0_Administrators__SERVICE__LOCAL_SERVICE__NETWORK_SERVICE" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'seimpersonateprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators||SERVICE||LOCAL SERVICE||NETWORK SERVICE' ) } catch { New-Object CollectedBaselineValue(-1,"seimpersonateprivilege_pattern_match_.*_0_Administrators__SERVICE__LOCAL_SERVICE__NETWORK_SERVICE", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "seloaddriverprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'seloaddriverprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"seloaddriverprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "selockmemoryprivilege_pattern_match_.*_0_" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'selockmemoryprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString '' ) } catch { New-Object CollectedBaselineValue(-1,"selockmemoryprivilege_pattern_match_.*_0_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "sesecurityprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'sesecurityprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"sesecurityprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "sesystemenvironmentprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'sesystemenvironmentprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"sesystemenvironmentprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "semanagevolumeprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'semanagevolumeprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"semanagevolumeprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "seprofilesingleprocessprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'seprofilesingleprocessprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"seprofilesingleprocessprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "serestoreprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'serestoreprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"serestoreprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "setakeownershipprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'setakeownershipprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"setakeownershipprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentversion<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_greater_than_or_equal<#>1</#>greater_than_or_equal_6.3<#>1</#>18363.0_greater_than_or_equal<#>1</#>greater_than_or_equal_6.3<#>1</#>18363.0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentversion<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber" -AssessorConditionsString "greater than or equal<#>1</#>greater than or equal" -AssessorValuesString "6.3<#>1</#>18363.0" -McmConditionsString "greater than or equal<#>1</#>greater than or equal" -McmValuesString "6.3<#>1</#>18363.0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentversion<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_greater_than_or_equal<#>1</#>greater_than_or_equal_6.3<#>1</#>18363.0_greater_than_or_equal<#>1</#>greater_than_or_equal_6.3<#>1</#>18363.0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentversion<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_greater_than_or_equal<#>1</#>greater_than_or_equal_6.3<#>1</#>19042.0_greater_than_or_equal<#>1</#>greater_than_or_equal_6.3<#>1</#>19042.0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentversion<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentbuildnumber" -AssessorConditionsString "greater than or equal<#>1</#>greater than or equal" -AssessorValuesString "6.3<#>1</#>19042.0" -McmConditionsString "greater than or equal<#>1</#>greater than or equal" -McmValuesString "6.3<#>1</#>19042.0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentversion<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentbuildnumber_greater_than_or_equal<#>1</#>greater_than_or_equal_6.3<#>1</#>19042.0_greater_than_or_equal<#>1</#>greater_than_or_equal_6.3<#>1</#>19042.0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__SNMP__installstate" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\cimv2" -Query "SELECT installstate FROM win32_optionalfeature WHERE name = 'SNMP'" -OutputFieldName "installstate" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__SNMP__installstate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__TelnetClient__installstate_2_all" -CollectedDataResult (Compare-AllWmiObjects -Namespace "root\cimv2" -Query "SELECT installstate FROM win32_optionalfeature WHERE name = 'TelnetClient'" -OutputFieldName "installstate"  -ExpectedValue "2" -allOrNone "all" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__TelnetClient__installstate_2_all", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__TFTP__installstate_2_all" -CollectedDataResult (Compare-AllWmiObjects -Namespace "root\cimv2" -Query "SELECT installstate FROM win32_optionalfeature WHERE name = 'TFTP'" -OutputFieldName "installstate"  -ExpectedValue "2" -allOrNone "all" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__TFTP__installstate_2_all", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists_hkey_local_machine_software_microsoft_systemcertificates_root_certificates_d73ca91102a2204a36459ed32213b467d7ce97fb||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_d73ca91102a2204a36459ed32213b467d7ce97fb||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_d73ca91102a2204a36459ed32213b467d7ce97fb<,>^.+||^.+||^.+<#>1</#>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_b8269f25dbd937ecafd4c35a9838571723f2d026||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_b8269f25dbd937ecafd4c35a9838571723f2d026||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_b8269f25dbd937ecafd4c35a9838571723f2d026<,>^.+||^.+||^.+<#>1</#>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_4ecb5cc3095670454da1cbd410fc921f46b8564b||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_4ecb5cc3095670454da1cbd410fc921f46b8564b||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_4ecb5cc3095670454da1cbd410fc921f46b8564b<,>^.+||^.+||^.+_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists" -ExecutionParamsString "hkey_local_machine\software\microsoft\systemcertificates\root\certificates\d73ca91102a2204a36459ed32213b467d7ce97fb||hkey_local_machine\software\microsoft\enterprisecertificates\root\certificates\d73ca91102a2204a36459ed32213b467d7ce97fb||hkey_local_machine\software\policies\microsoft\systemcertificates\root\certificates\d73ca91102a2204a36459ed32213b467d7ce97fb<,>^.+$||^.+$||^.+$<#>1</#>hkey_local_machine\software\microsoft\systemcertificates\root\certificates\b8269f25dbd937ecafd4c35a9838571723f2d026||hkey_local_machine\software\microsoft\enterprisecertificates\root\certificates\b8269f25dbd937ecafd4c35a9838571723f2d026||hkey_local_machine\software\policies\microsoft\systemcertificates\root\certificates\b8269f25dbd937ecafd4c35a9838571723f2d026<,>^.+$||^.+$||^.+$<#>1</#>hkey_local_machine\software\microsoft\systemcertificates\root\certificates\4ecb5cc3095670454da1cbd410fc921f46b8564b||hkey_local_machine\software\microsoft\enterprisecertificates\root\certificates\4ecb5cc3095670454da1cbd410fc921f46b8564b||hkey_local_machine\software\policies\microsoft\systemcertificates\root\certificates\4ecb5cc3095670454da1cbd410fc921f46b8564b<,>^.+$||^.+$||^.+$" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>true<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists<#>1</#>CheckAtLeastOneRegistryExists_hkey_local_machine_software_microsoft_systemcertificates_root_certificates_d73ca91102a2204a36459ed32213b467d7ce97fb||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_d73ca91102a2204a36459ed32213b467d7ce97fb||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_d73ca91102a2204a36459ed32213b467d7ce97fb<,>^.+||^.+||^.+<#>1</#>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_b8269f25dbd937ecafd4c35a9838571723f2d026||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_b8269f25dbd937ecafd4c35a9838571723f2d026||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_b8269f25dbd937ecafd4c35a9838571723f2d026<,>^.+||^.+||^.+<#>1</#>hkey_local_machine_software_microsoft_systemcertificates_root_certificates_4ecb5cc3095670454da1cbd410fc921f46b8564b||hkey_local_machine_software_microsoft_enterprisecertificates_root_certificates_4ecb5cc3095670454da1cbd410fc921f46b8564b||hkey_local_machine_software_policies_microsoft_systemcertificates_root_certificates_4ecb5cc3095670454da1cbd410fc921f46b8564b<,>^.+||^.+||^.+_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\systemcertificates\disallowed\certificates\49cbe933151872e17c8eae7f0aba97fb610f6477\^.+$||hkey_local_machine\software\microsoft\enterprisecertificates\disallowed\certificates\49cbe933151872e17c8eae7f0aba97fb610f6477\^.+$||hkey_local_machine\software\policies\microsoft\systemcertificates\disallowed\certificates\49cbe933151872e17c8eae7f0aba97fb610f6477\^.+$" -CollectedDataResult (Check-AtLeastOneRegistryExists -RegistryLocationsString "hkey_local_machine\software\microsoft\systemcertificates\disallowed\certificates\49cbe933151872e17c8eae7f0aba97fb610f6477||hkey_local_machine\software\microsoft\enterprisecertificates\disallowed\certificates\49cbe933151872e17c8eae7f0aba97fb610f6477||hkey_local_machine\software\policies\microsoft\systemcertificates\disallowed\certificates\49cbe933151872e17c8eae7f0aba97fb610f6477" -RegistryKeysString "^.+$||^.+$||^.+$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\systemcertificates\disallowed\certificates\49cbe933151872e17c8eae7f0aba97fb610f6477\^.+$||hkey_local_machine\software\microsoft\enterprisecertificates\disallowed\certificates\49cbe933151872e17c8eae7f0aba97fb610f6477\^.+$||hkey_local_machine\software\policies\microsoft\systemcertificates\disallowed\certificates\49cbe933151872e17c8eae7f0aba97fb610f6477\^.+$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_INC_BASE_PRIORITY_NAME_list_pattern_match_S-1-5-_32-544_90-0_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_INC_BASE_PRIORITY_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_INC_BASE_PRIORITY_NAME_list_pattern_match_S-1-5-_32-544_90-0_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_SERVICE_LOGON_NAME_list_pattern_match_S-1-5-83-0" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_SERVICE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_SERVICE_LOGON_NAME_list_pattern_match_S-1-5-83-0", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "trustee_name_S_-1_-5_-21_-_d+_-_d+_-_d+_-500_" -CollectedDataResult (Get-TrusteeName -SidRegulaRExpression '^S\-1\-5\-21\-\d+\-\d+\-\d+\-500$' ) } catch { New-Object CollectedBaselineValue(-1,"trustee_name_S_-1_-5_-21_-_d+_-_d+_-_d+_-500_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "trustee_name_S_-1_-5_-21_-_d+_-_d+_-_d+_-501_" -CollectedDataResult (Get-TrusteeName -SidRegulaRExpression '^S\-1\-5\-21\-\d+\-\d+\-\d+\-501$' ) } catch { New-Object CollectedBaselineValue(-1,"trustee_name_S_-1_-5_-21_-_d+_-_d+_-_d+_-501_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "force_logoff" -CollectedDataResult (Get-AccountsPoliciesState -PropertyToCheck "ForceUserLogoff" ) } catch { New-Object CollectedBaselineValue(-1,"force_logoff", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\btagservice\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\btagservice" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\btagservice\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\sshd\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\sshd" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\sshd\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\defaultpassword" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon" -RegistryKey "defaultpassword"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\defaultpassword", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\currentversion\pushnotifications\nocloudapplicationnotification" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\currentversion\pushnotifications" -RegistryKey "nocloudapplicationnotification"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\currentversion\pushnotifications\nocloudapplicationnotification", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\credssp\parameters\allowencryptionoracle" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\credssp\parameters" -RegistryKey "allowencryptionoracle"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\credssp\parameters\allowencryptionoracle", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\uploaduseractivities" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "uploaduseractivities"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\uploaduseractivities", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\securitylayer" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "securitylayer"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\securitylayer", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\userauthentication" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "userauthentication"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\userauthentication", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsstore\requireprivatestoreonly" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsstore" -RegistryKey "requireprivatestoreonly"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsstore\requireprivatestoreonly", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\26190899-1602-49e8-8b27-eb1d0a1ce869" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "26190899-1602-49e8-8b27-eb1d0a1ce869"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\26190899-1602-49e8-8b27-eb1d0a1ce869", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\7674ba52-37eb-4a4f-a9a1-f0f9a1619a2c" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "7674ba52-37eb-4a4f-a9a1-f0f9a1619a2c"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\7674ba52-37eb-4a4f-a9a1-f0f9a1619a2c", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\b2b3f03d-6a65-4f7b-a9c7-1c7ef74a9ba4" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "b2b3f03d-6a65-4f7b-a9c7-1c7ef74a9ba4"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\b2b3f03d-6a65-4f7b-a9c7-1c7ef74a9ba4", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\apphvsi\savefilestohost" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\apphvsi" -RegistryKey "savefilestohost"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\apphvsi\savefilestohost", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceguard\configuresystemguardlaunch" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceguard" -RegistryKey "configuresystemguardlaunch"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceguard\configuresystemguardlaunch", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\allowcrossdeviceclipboard" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "allowcrossdeviceclipboard"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\allowcrossdeviceclipboard", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\extensions\allowsideloadingofextensions" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\extensions" -RegistryKey "allowsideloadingofextensions"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\extensions\allowsideloadingofextensions", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\microsoftedge\internet settings\preventcerterroroverrides" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\microsoftedge\internet settings" -RegistryKey "preventcerterroroverrides"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\microsoftedge\internet settings\preventcerterroroverrides", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\puaprotection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender" -RegistryKey "puaprotection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\puaprotection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\apphvsi\allowcameramicrophoneredirection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\apphvsi" -RegistryKey "allowcameramicrophoneredirection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\apphvsi\allowcameramicrophoneredirection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\apphvsi\filetrustcriteria" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\apphvsi" -RegistryKey "filetrustcriteria"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\apphvsi\filetrustcriteria", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\setdisablepauseuxaccess" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate" -RegistryKey "setdisablepauseuxaccess"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\setdisablepauseuxaccess", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\appprivacy\letappsactivatewithvoiceabovelock" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\appprivacy" -RegistryKey "letappsactivatewithvoiceabovelock"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\appprivacy\letappsactivatewithvoiceabovelock", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\nolocalpasswordresetquestions" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "nolocalpasswordresetquestions"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\nolocalpasswordresetquestions", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\EventLog\Security\MaxSize" -CollectedDataResult (Get-RegistryValue -RegistryLocation "HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\EventLog\Security" -RegistryKey "MaxSize"  ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\EventLog\Security\MaxSize", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\lsaanonymousnamelookup" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "lsaanonymousnamelookup"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\lsaanonymousnamelookup", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\sam\relaxminimumpasswordlengthlimits" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\sam" -RegistryKey "relaxminimumpasswordlengthlimits"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\sam\relaxminimumpasswordlengthlimits", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\sacsvr\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\sacsvr" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\sacsvr\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\appx\blocknonadminuserinstall" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\appx" -RegistryKey "blocknonadminuserinstall"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\appx\blocknonadminuserinstall", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\mpengine\enablefilehashcomputation" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\mpengine" -RegistryKey "enablefilehashcomputation"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\mpengine\enablefilehashcomputation", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses\1" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses" -RegistryKey "1"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\restrictions\denydeviceclasses\1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\dnsclient\enablemulticast" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\dnsclient" -RegistryKey "enablemulticast"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\dnsclient\enablemulticast", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths\\\*\netlogon" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths" -RegistryKey "\\*\netlogon"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths\\\*\netlogon", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths\\\*\sysvol" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths" -RegistryKey "\\*\sysvol"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths\\\*\sysvol", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\spynet\submitsamplesconsent" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\spynet" -RegistryKey "submitsamplesconsent"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\spynet\submitsamplesconsent", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_CREATE_GLOBAL_NAME_list_pattern_match_S-1-5-_19_20_32-544_6_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_CREATE_GLOBAL_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_CREATE_GLOBAL_NAME_list_pattern_match_S-1-5-_19_20_32-544_6_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_NETWORK_LOGON_NAME_equals_S-1-5-113" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_NETWORK_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_NETWORK_LOGON_NAME_equals_S-1-5-113", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME_equals_S-1-5-113" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME_equals_S-1-5-113", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_IMPERSONATE_NAME_list_pattern_match_S-1-5-_19_20_32-544_6_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_IMPERSONATE_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_IMPERSONATE_NAME_list_pattern_match_S-1-5-_19_20_32-544_6_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\cloudcontent\disablecloudoptimizedcontent" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\cloudcontent" -RegistryKey "disablecloudoptimizedcontent"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\cloudcontent\disablecloudoptimizedcontent", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\e6db77e5-3df2-4cf1-b95a-636979351e5b" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "e6db77e5-3df2-4cf1-b95a-636979351e5b"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\e6db77e5-3df2-4cf1-b95a-636979351e5b", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\real-time protection\disableioavprotection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\real-time protection" -RegistryKey "disableioavprotection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\real-time protection\disableioavprotection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\real-time protection\disablerealtimemonitoring" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\real-time protection" -RegistryKey "disablerealtimemonitoring"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\real-time protection\disablerealtimemonitoring", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\spynet\disableblockatfirstseen" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\spynet" -RegistryKey "disableblockatfirstseen"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\spynet\disableblockatfirstseen", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\c1db55ab-c21a-4637-bb3f-a12568109d35" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules" -RegistryKey "c1db55ab-c21a-4637-bb3f-a12568109d35"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\windows defender exploit guard\asr\rules\c1db55ab-c21a-4637-bb3f-a12568109d35", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\mpengine\mpcloudblocklevel" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\mpengine" -RegistryKey "mpcloudblocklevel"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\mpengine\mpcloudblocklevel", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windows feeds\enablefeeds" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windows feeds" -RegistryKey "enablefeeds"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windows feeds\enablefeeds", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_NETWORK_LOGON_NAME_list_pattern_match_S-1-5-_32-544_11_9_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_NETWORK_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_NETWORK_LOGON_NAME_list_pattern_match_S-1-5-_32-544_11_9_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_NETWORK_LOGON_NAME_list_pattern_match_S-1-5-_32-544_11_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_NETWORK_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_NETWORK_LOGON_NAME_list_pattern_match_S-1-5-_32-544_11_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_MACHINE_ACCOUNT_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_MACHINE_ACCOUNT_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_MACHINE_ACCOUNT_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_INTERACTIVE_LOGON_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_INTERACTIVE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_INTERACTIVE_LOGON_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_REMOTE_INTERACTIVE_LOGON_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_REMOTE_INTERACTIVE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_REMOTE_INTERACTIVE_LOGON_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_TIME_ZONE_NAME_list_pattern_match_S-1-5-_32-544_19_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_TIME_ZONE_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_TIME_ZONE_NAME_list_pattern_match_S-1-5-_32-544_19_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_CREATE_SYMBOLIC_LINK_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_CREATE_SYMBOLIC_LINK_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_CREATE_SYMBOLIC_LINK_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_NETWORK_LOGON_NAME_equals_S-1-5-114_at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_NETWORK_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_NETWORK_LOGON_NAME_equals_S-1-5-114_at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_ENABLE_DELEGATION_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_ENABLE_DELEGATION_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_ENABLE_DELEGATION_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_IMPERSONATE_NAME_list_pattern_match_S-1-5-_32-544_19_20_6_32-568_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_IMPERSONATE_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_IMPERSONATE_NAME_list_pattern_match_S-1-5-_32-544_19_20_6_32-568_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_SECURITY_NAME_list_pattern_match_S-1-5-_32-544_21-[0-9-]+-1677_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_SECURITY_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_SECURITY_NAME_list_pattern_match_S-1-5-_32-544_21-[0-9-]+-1677_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_SHUTDOWN_NAME_equals_S-1-5-32-544" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_SHUTDOWN_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_SHUTDOWN_NAME_equals_S-1-5-32-544", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_SYNC_AGENT_NAME_User_Count_equals_0" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_SYNC_AGENT_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_SYNC_AGENT_NAME_User_Count_equals_0", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\submitcontrol" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "submitcontrol"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\submitcontrol", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\ntds\parameters\ldapserverintegrity" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\ntds\parameters" -RegistryKey "ldapserverintegrity"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\ntds\parameters\ldapserverintegrity", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\refusepasswordchange" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters" -RegistryKey "refusepasswordchange"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\refusepasswordchange", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\forceunlocklogon" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon" -RegistryKey "forceunlocklogon"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\forceunlocklogon", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionpipes_Pattern_match_^((LSARPC)|(NETLOGON)|(SAMR))$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "nullsessionpipes" -expectedValue "^((LSARPC)|(NETLOGON)|(SAMR))$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionpipes_Pattern_match_^((LSARPC)|(NETLOGON)|(SAMR))$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths\machine_Pattern_match_^((System\\CurrentControlSet\\Control\\Print\\Printers)|(System\\CurrentControlSet\\Services\\Eventlog)|(Software\\Microsoft\\OLAP Server)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Print)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows)|(System\\CurrentControlSet\\Control\\ContentIndex)|(System\\CurrentControlSet\\Control\\Terminal Server)|(System\\CurrentControlSet\\Control\\Terminal Server\\UserConfig)|(System\\CurrentControlSet\\Control\\Terminal Server\\DefaultUserConfiguration)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Perflib)|(System\\CurrentControlSet\\Services\\SysmonLog)|(System\\CurrentControlSet\\Services\\CertSvc)|(System\\CurrentControlSet\\Services\\WINS))$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths" -RegistryKey "machine" -expectedValue "^((System\\CurrentControlSet\\Control\\Print\\Printers)|(System\\CurrentControlSet\\Services\\Eventlog)|(Software\\Microsoft\\OLAP Server)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Print)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows)|(System\\CurrentControlSet\\Control\\ContentIndex)|(System\\CurrentControlSet\\Control\\Terminal Server)|(System\\CurrentControlSet\\Control\\Terminal Server\\UserConfig)|(System\\CurrentControlSet\\Control\\Terminal Server\\DefaultUserConfiguration)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Perflib)|(System\\CurrentControlSet\\Services\\SysmonLog)|(System\\CurrentControlSet\\Services\\CertSvc)|(System\\CurrentControlSet\\Services\\WINS))$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths\machine_Pattern_match_^((System\\CurrentControlSet\\Control\\Print\\Printers)|(System\\CurrentControlSet\\Services\\Eventlog)|(Software\\Microsoft\\OLAP Server)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Print)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows)|(System\\CurrentControlSet\\Control\\ContentIndex)|(System\\CurrentControlSet\\Control\\Terminal Server)|(System\\CurrentControlSet\\Control\\Terminal Server\\UserConfig)|(System\\CurrentControlSet\\Control\\Terminal Server\\DefaultUserConfiguration)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Perflib)|(System\\CurrentControlSet\\Services\\SysmonLog)|(System\\CurrentControlSet\\Services\\CertSvc)|(System\\CurrentControlSet\\Services\\WINS))$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\shutdownwithoutlogon" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "shutdownwithoutlogon"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\shutdownwithoutlogon", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\session manager\subsystems\optional_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\session manager\subsystems" -RegistryKey "optional" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\session manager\subsystems\optional_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "kerberos_authentication_service" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9242-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"kerberos_authentication_service", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "kerberos_service_ticket_operations" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9240-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"kerberos_service_ticket_operations", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "distribution_group_management" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce9238-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"distribution_group_management", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "directory_service_access" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce923b-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"directory_service_access", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "directory_service_changes" -CollectedDataResult (Get-AuditEventPolicySubcategoriesState -AuditEventGuidToCheck "0cce923c-69ae-11d9-bed3-505054503030" ) } catch { New-Object CollectedBaselineValue(-1,"directory_service_changes", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\dependonservice_Pattern_match_(Bowser|MRxSmb20|NSI)" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation" -RegistryKey "dependonservice" -expectedValue "(Bowser|MRxSmb20|NSI)" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\dependonservice_Pattern_match_(Bowser|MRxSmb20|NSI)", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\ntds\parameters\ldapenforcechannelbinding" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\ntds\parameters" -RegistryKey "ldapenforcechannelbinding"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\ntds\parameters\ldapenforcechannelbinding", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\settings\allowremoterpc" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\settings" -RegistryKey "allowremoterpc"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\settings\allowremoterpc", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\nointernetopenwith" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer" -RegistryKey "nointernetopenwith"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\nointernetopenwith", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\logontype" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "logontype"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\logontype", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\windows\sidebar\turnoffsidebar" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\windows\sidebar" -RegistryKey "turnoffsidebar"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\windows\sidebar\turnoffsidebar", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\windows\sidebar\turnoffuserinstalledgadgets" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\windows\sidebar" -RegistryKey "turnoffuserinstalledgadgets"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\windows\sidebar\turnoffuserinstalledgadgets", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\emet_service\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\emet_service" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\emet_service\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\syssettings\antidetours" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\syssettings" -RegistryKey "antidetours"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\syssettings\antidetours", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\syssettings\exploitaction" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\syssettings" -RegistryKey "exploitaction"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\syssettings\exploitaction", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\syssettings\deephooks" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\syssettings" -RegistryKey "deephooks"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\syssettings\deephooks", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\syssettings\bannedfunctions" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\syssettings" -RegistryKey "bannedfunctions"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\syssettings\bannedfunctions", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\internet explorer\iexplore.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\internet explorer\iexplore.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\internet explorer\iexplore.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\mozilla thunderbird\thunderbird.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\mozilla thunderbird\thunderbird.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\mozilla thunderbird\thunderbird.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\skydrive\skydrive.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\skydrive\skydrive.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\skydrive\skydrive.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\windows live\photo gallery\wlxphotogallery.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\windows live\photo gallery\wlxphotogallery.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\windows live\photo gallery\wlxphotogallery.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\foxit reader\foxit reader.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\foxit reader\foxit reader.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\foxit reader\foxit reader.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\microsoft lync\communicator.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\microsoft lync\communicator.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\microsoft lync\communicator.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\mozilla firefox\firefox.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\mozilla firefox\firefox.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\mozilla firefox\firefox.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\winzip\winzip32.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\winzip\winzip32.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\winzip\winzip32.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\google\google talk\googletalk.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\google\google talk\googletalk.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\google\google talk\googletalk.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\pidgin\pidgin.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\pidgin\pidgin.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\pidgin\pidgin.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\winrar\winrar.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\winrar\winrar.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\winrar\winrar.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\mozilla thunderbird\plugin-container.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\mozilla thunderbird\plugin-container.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\mozilla thunderbird\plugin-container.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\7-zip\7zg.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\7-zip\7zg.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\7-zip\7zg.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\real\realplayer\realplay.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\real\realplayer\realplay.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\real\realplayer\realplay.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\winrar\rar.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\winrar\rar.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\winrar\rar.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\real\realplayer\realconverter.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\real\realplayer\realconverter.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\real\realplayer\realconverter.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\google\chrome\application\chrome.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\google\chrome\application\chrome.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\google\chrome\application\chrome.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\windows media player\wmplayer.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\windows media player\wmplayer.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\windows media player\wmplayer.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\windows live\writer\windowslivewriter.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\windows live\writer\windowslivewriter.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\windows live\writer\windowslivewriter.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\itunes\itunes.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\itunes\itunes.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\itunes\itunes.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\skype\phone\skype.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\skype\phone\skype.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\skype\phone\skype.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\opera\opera.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\opera\opera.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\opera\opera.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\videolan\vlc\vlc.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\videolan\vlc\vlc.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\videolan\vlc\vlc.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\7-zip\7zfm.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\7-zip\7zfm.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\7-zip\7zfm.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\winzip\winzip64.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\winzip\winzip64.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\winzip\winzip64.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\safari\safari.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\safari\safari.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\safari\safari.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\mirc\mirc.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\mirc\mirc.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\mirc\mirc.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\mozilla firefox\plugin-container.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\mozilla firefox\plugin-container.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\mozilla firefox\plugin-container.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\winamp\winamp.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\winamp\winamp.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\winamp\winamp.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\winrar\unrar.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\winrar\unrar.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\winrar\unrar.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\quicktime\quicktimeplayer.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\quicktime\quicktimeplayer.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\quicktime\quicktimeplayer.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\7-zip\7z.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\7-zip\7z.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\7-zip\7z.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\adobe\adobe photoshop cs*\photoshop.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\adobe\adobe photoshop cs*\photoshop.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\adobe\adobe photoshop cs*\photoshop.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\java\jre*\bin\javaws.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\java\jre*\bin\javaws.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\java\jre*\bin\javaws.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\adobe\acrobat*\acrobat\acrobat.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\adobe\acrobat*\acrobat\acrobat.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\adobe\acrobat*\acrobat\acrobat.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\msaccess.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\office1*\msaccess.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\msaccess.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\pptview.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\office1*\pptview.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\pptview.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\powerpnt.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\office1*\powerpnt.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\powerpnt.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\windows nt\accessories\wordpad.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\windows nt\accessories\wordpad.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\windows nt\accessories\wordpad.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\java\jre*\bin\java.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\java\jre*\bin\java.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\java\jre*\bin\java.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\infopath.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\office1*\infopath.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\infopath.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\lync.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\office1*\lync.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\lync.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\excel.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\office1*\excel.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\excel.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\visio.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\office1*\visio.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\visio.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\mspub.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\office1*\mspub.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\mspub.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\vpreview.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\office1*\vpreview.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\vpreview.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\ois.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\office1*\ois.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\ois.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\winword.exe" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\office1*\winword.exe"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\winword.exe", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\outlook.exe_Pattern_match_^$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\defaults" -RegistryKey "*\office1*\outlook.exe" -expectedValue "^$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\defaults\*\office1*\outlook.exe_Pattern_match_^$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\syssettings\aslr" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\syssettings" -RegistryKey "aslr"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\syssettings\aslr", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\syssettings\dep" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\syssettings" -RegistryKey "dep"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\syssettings\dep", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\emet\syssettings\sehop" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\emet\syssettings" -RegistryKey "sehop"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\emet\syssettings\sehop", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\onedrive\disablefilesync" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\onedrive" -RegistryKey "disablefilesync"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\onedrive\disablefilesync", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fsinglesessionperuser" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "fsinglesessionperuser"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fsinglesessionperuser", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windows error reporting\consent\defaultconsent" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windows error reporting\consent" -RegistryKey "defaultconsent"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windows error reporting\consent\defaultconsent", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\noauasdefaultshutdownoption" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au" -RegistryKey "noauasdefaultshutdownoption"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\noauasdefaultshutdownoption", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\noaushutdownoption" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au" -RegistryKey "noaushutdownoption"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\noaushutdownoption", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\reschedulewaittimeenabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au" -RegistryKey "reschedulewaittimeenabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\reschedulewaittimeenabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\reschedulewaittime" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au" -RegistryKey "reschedulewaittime"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windowsupdate\au\reschedulewaittime", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\vulnerablechannelallowlist" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters" -RegistryKey "vulnerablechannelallowlist"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\vulnerablechannelallowlist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\turnoffanonymousblock" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "turnoffanonymousblock"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\turnoffanonymousblock", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\spooler\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\spooler" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\spooler\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\printers\pointandprint\restrictdriverinstallationtoadministrators" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\printers\pointandprint" -RegistryKey "restrictdriverinstallationtoadministrators"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\printers\pointandprint\restrictdriverinstallationtoadministrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\dnsclient\dohpolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\dnsclient" -RegistryKey "dohpolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\dnsclient\dohpolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\printers\registerspoolerremoterpcendpoint" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\printers" -RegistryKey "registerspoolerremoterpcendpoint"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\printers\registerspoolerremoterpcendpoint", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\printers\pointandprint\nowarningnoelevationoninstall" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\printers\pointandprint" -RegistryKey "nowarningnoelevationoninstall"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\printers\pointandprint\nowarningnoelevationoninstall", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\printers\pointandprint\updatepromptsettings" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\printers\pointandprint" -RegistryKey "updatepromptsettings"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\printers\pointandprint\updatepromptsettings", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\device metadata\preventdevicemetadatafromnetwork" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\device metadata" -RegistryKey "preventdevicemetadatafromnetwork"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\device metadata\preventdevicemetadatafromnetwork", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\sam\samngckeyrocavalidation" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\sam" -RegistryKey "samngckeyrocavalidation"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\sam\samngckeyrocavalidation", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\locationandsensors\disablewindowslocationprovider" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\locationandsensors" -RegistryKey "disablewindowslocationprovider"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\locationandsensors\disablewindowslocationprovider", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windows search\connectedsearchprivacy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windows search" -RegistryKey "connectedsearchprivacy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windows search\connectedsearchprivacy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\windows error reporting\autoapproveosdumps" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\windows error reporting" -RegistryKey "autoapproveosdumps"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\windows error reporting\autoapproveosdumps", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows defender\real-time protection\disablescriptscanning" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows defender\real-time protection" -RegistryKey "disablescriptscanning"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows defender\real-time protection\disablescriptscanning", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce9237-69ae-11d9-bed3-505054503030<#>2</#>0cce9237-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria" -ExecutionParamsString "GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce9237-69ae-11d9-bed3-505054503030<#>2</#>0cce9237-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce9237-69ae-11d9-bed3-505054503030<#>2</#>0cce9237-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce9235-69ae-11d9-bed3-505054503030<#>2</#>0cce9235-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria" -ExecutionParamsString "GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce9235-69ae-11d9-bed3-505054503030<#>2</#>0cce9235-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce9235-69ae-11d9-bed3-505054503030<#>2</#>0cce9235-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce9235-69ae-11d9-bed3-505054503030<#>2</#>0cce9235-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_FAILURE<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_FAILURE<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria" -ExecutionParamsString "GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce9235-69ae-11d9-bed3-505054503030<#>2</#>0cce9235-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_FAILURE<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_FAILURE<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce9235-69ae-11d9-bed3-505054503030<#>2</#>0cce9235-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_FAILURE<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_FAILURE<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAccountPolicyValue<#>1</#>GetAccountPolicyValue_LockoutThreshold<#>1</#>LockoutThreshold_less_than_or_equal<#>1</#>greater_than_3<#>1</#>0_less_than_or_equal<#>1</#>greater_than_3<#>1</#>0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAccountPolicyValue<#>1</#>GetAccountPolicyValue" -ExecutionParamsString "LockoutThreshold<#>1</#>LockoutThreshold" -AssessorConditionsString "less than or equal<#>1</#>greater than" -AssessorValuesString "3<#>1</#>0" -McmConditionsString "less than or equal<#>1</#>greater than" -McmValuesString "3<#>1</#>0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAccountPolicyValue<#>1</#>GetAccountPolicyValue_LockoutThreshold<#>1</#>LockoutThreshold_less_than_or_equal<#>1</#>greater_than_3<#>1</#>0_less_than_or_equal<#>1</#>greater_than_3<#>1</#>0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAccountPolicyValue<#>1</#>GetAccountPolicyValue_LockoutObservationWindow<#>1</#>LockoutThreshold_greater_than_or_equal<#>1</#>greater_than_900<#>1</#>0_greater_than_or_equal<#>1</#>greater_than_900<#>1</#>0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAccountPolicyValue<#>1</#>GetAccountPolicyValue" -ExecutionParamsString "LockoutObservationWindow<#>1</#>LockoutThreshold" -AssessorConditionsString "greater than or equal<#>1</#>greater than" -AssessorValuesString "900<#>1</#>0" -McmConditionsString "greater than or equal<#>1</#>greater than" -McmValuesString "900<#>1</#>0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAccountPolicyValue<#>1</#>GetAccountPolicyValue_LockoutObservationWindow<#>1</#>LockoutThreshold_greater_than_or_equal<#>1</#>greater_than_900<#>1</#>0_greater_than_or_equal<#>1</#>greater_than_900<#>1</#>0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9215-69ae-11d9-bed3-505054503030<#>1</#>0cce9215-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9215-69ae-11d9-bed3-505054503030<#>1</#>0cce9215-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9215-69ae-11d9-bed3-505054503030<#>1</#>0cce9215-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9215-69ae-11d9-bed3-505054503030<#>1</#>0cce9215-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9215-69ae-11d9-bed3-505054503030<#>1</#>0cce9215-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9215-69ae-11d9-bed3-505054503030<#>1</#>0cce9215-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_terminal_services<,>fencryptrpctraffic_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows nt\terminal services<,>fencryptrpctraffic" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_terminal_services<,>fencryptrpctraffic_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_terminal_services<,>minencryptionlevel_equals_3_equals_3_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows nt\terminal services<,>minencryptionlevel" -AssessorConditionsString "equals" -AssessorValuesString "3" -McmConditionsString "equals" -McmValuesString "3" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_terminal_services<,>minencryptionlevel_equals_3_equals_3_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<,>_<#>2</#>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<!#!>1</!#!>pattern_match<#>2</#>pattern_match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*<!#!>1</!#!>equals<#>2</#>not_equal<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<,>_<#>2</#>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<!#!>1</!#!>pattern_match<#>2</#>pattern_match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>\<,>null<,>^(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\application<,>file<,>\<#>2</#>hkey_local_machine\system\currentcontrolset\services\eventlog\application<,>file<!#!>1</!#!>pattern match<#>2</#>pattern match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$<!#!>1</!#!>equals<#>2</#>not equal<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine\software\microsoft\windows nt\currentversion<,>systemroot<,>^%.*%(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\application<,>file<,>\<#>2</#>hkey_local_machine\system\currentcontrolset\services\eventlog\application<,>file<!#!>1</!#!>pattern match<#>2</#>pattern match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<,>_<#>2</#>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<!#!>1</!#!>pattern_match<#>2</#>pattern_match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*<!#!>1</!#!>equals<#>2</#>not_equal<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<,>_<#>2</#>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<!#!>1</!#!>pattern_match<#>2</#>pattern_match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<,>_<#>2</#>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<!#!>1</!#!>pattern_match<#>2</#>pattern_match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*<!#!>1</!#!>equals<#>2</#>not_equal<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<,>_<#>2</#>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<!#!>1</!#!>pattern_match<#>2</#>pattern_match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>\<,>null<,>^(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\security<,>file<,>\<#>2</#>hkey_local_machine\system\currentcontrolset\services\eventlog\security<,>file<!#!>1</!#!>pattern match<#>2</#>pattern match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$<!#!>1</!#!>equals<#>2</#>not equal<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine\software\microsoft\windows nt\currentversion<,>systemroot<,>^%.*%(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\security<,>file<,>\<#>2</#>hkey_local_machine\system\currentcontrolset\services\eventlog\security<,>file<!#!>1</!#!>pattern match<#>2</#>pattern match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<,>_<#>2</#>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<!#!>1</!#!>pattern_match<#>2</#>pattern_match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*<!#!>1</!#!>equals<#>2</#>not_equal<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<,>_<#>2</#>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<!#!>1</!#!>pattern_match<#>2</#>pattern_match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<,>_<#>2</#>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<!#!>1</!#!>pattern_match<#>2</#>pattern_match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*<!#!>1</!#!>equals<#>2</#>not_equal<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<,>_<#>2</#>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<!#!>1</!#!>pattern_match<#>2</#>pattern_match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>\<,>null<,>^(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\system<,>file<,>\<#>2</#>hkey_local_machine\system\currentcontrolset\services\eventlog\system<,>file<!#!>1</!#!>pattern match<#>2</#>pattern match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$<!#!>1</!#!>equals<#>2</#>not equal<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine\software\microsoft\windows nt\currentversion<,>systemroot<,>^%.*%(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\system<,>file<,>\<#>2</#>hkey_local_machine\system\currentcontrolset\services\eventlog\system<,>file<!#!>1</!#!>pattern match<#>2</#>pattern match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<,>_<#>2</#>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<!#!>1</!#!>pattern_match<#>2</#>pattern_match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*<!#!>1</!#!>equals<#>2</#>not_equal<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckFileEffectiveRight<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<,>_<#>2</#>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<!#!>1</!#!>pattern_match<#>2</#>pattern_match<!#!>1</!#!>.*<#>2</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_sesecurityprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "sesecurityprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_sesecurityprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>scenoapplylegacyauditpolicy_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa<,>scenoapplylegacyauditpolicy" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>scenoapplylegacyauditpolicy_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_cryptography<,>forcekeyprotection_equals_2_equals_2_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\cryptography<,>forcekeyprotection" -AssessorConditionsString "equals" -AssessorValuesString "2" -McmConditionsString "equals" -McmValuesString "2" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_cryptography<,>forcekeyprotection_equals_2_equals_2_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAccountPolicyValue_PasswordComplexity_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAccountPolicyValue" -ExecutionParamsString "PasswordComplexity" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAccountPolicyValue_PasswordComplexity_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAccountPolicyValue_ReversibleEncryption_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAccountPolicyValue" -ExecutionParamsString "ReversibleEncryption" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAccountPolicyValue_ReversibleEncryption_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>nolmhash_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa<,>nolmhash" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>nolmhash_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanworkstation_parameters<,>enableplaintextpassword_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters<,>enableplaintextpassword" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanworkstation_parameters<,>enableplaintextpassword_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAccountPolicyValue_MinimumPasswordAge_greater_than_or_equal_86400_greater_than_or_equal_86400_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAccountPolicyValue" -ExecutionParamsString "MinimumPasswordAge" -AssessorConditionsString "greater than or equal" -AssessorValuesString "86400" -McmConditionsString "greater than or equal" -McmValuesString "86400" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAccountPolicyValue_MinimumPasswordAge_greater_than_or_equal_86400_greater_than_or_equal_86400_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAccountPolicyValue<#>1</#>GetAccountPolicyValue_MaximumPasswordAge<#>1</#>MaximumPasswordAge_less_than_or_equal<#>1</#>greater_than_5184000<#>1</#>0_less_than_or_equal<#>1</#>greater_than_5184000<#>1</#>0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAccountPolicyValue<#>1</#>GetAccountPolicyValue" -ExecutionParamsString "MaximumPasswordAge<#>1</#>MaximumPasswordAge" -AssessorConditionsString "less than or equal<#>1</#>greater than" -AssessorValuesString "5184000<#>1</#>0" -McmConditionsString "less than or equal<#>1</#>greater than" -McmValuesString "5184000<#>1</#>0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAccountPolicyValue<#>1</#>GetAccountPolicyValue_MaximumPasswordAge<#>1</#>MaximumPasswordAge_less_than_or_equal<#>1</#>greater_than_5184000<#>1</#>0_less_than_or_equal<#>1</#>greater_than_5184000<#>1</#>0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAccountPolicyValue_LengthOfPasswordHistory_greater_than_or_equal_24_greater_than_or_equal_24_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAccountPolicyValue" -ExecutionParamsString "LengthOfPasswordHistory" -AssessorConditionsString "greater than or equal" -AssessorValuesString "24" -McmConditionsString "greater than or equal" -McmValuesString "24" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAccountPolicyValue_LengthOfPasswordHistory_greater_than_or_equal_24_greater_than_or_equal_24_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAccountPolicyValue_MinimumPasswordLength_greater_than_or_equal_14_greater_than_or_equal_14_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAccountPolicyValue" -ExecutionParamsString "MinimumPasswordLength" -AssessorConditionsString "greater than or equal" -AssessorValuesString "14" -McmConditionsString "greater than or equal" -McmValuesString "14" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAccountPolicyValue_MinimumPasswordLength_greater_than_or_equal_14_greater_than_or_equal_14_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiCount_root_cimv2<,>SELECT_filesystem_FROM_win32_logicaldisk_WHERE_drivetype=3_AND_filesystem!=_NTFS__AND_filesystem!=_ReFS__greater_than_or_equal_1_greater_than_or_equal_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiCount" -ExecutionParamsString "root\cimv2<,>SELECT filesystem FROM win32_logicaldisk WHERE drivetype=3 AND filesystem!='NTFS' AND filesystem!='ReFS'" -AssessorConditionsString "greater than or equal" -AssessorValuesString "1" -McmConditionsString "greater than or equal" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiCount_root_cimv2<,>SELECT_filesystem_FROM_win32_logicaldisk_WHERE_drivetype=3_AND_filesystem!=_NTFS__AND_filesystem!=_ReFS__greater_than_or_equal_1_greater_than_or_equal_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>senetworklogonright<,>pattern_match<,>.*<,>0<,>Authenticated_Users||ENTERPRISE_DOMAIN_CONTROLLERS||Administrators_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>senetworklogonright<,>pattern match<,>.*<,>0<,>Authenticated Users||ENTERPRISE DOMAIN CONTROLLERS||Administrators" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>senetworklogonright<,>pattern_match<,>.*<,>0<,>Authenticated_Users||ENTERPRISE_DOMAIN_CONTROLLERS||Administrators_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>seremoteinteractivelogonright<,>pattern_match<,>.*<,>0<,>Administrators_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>seremoteinteractivelogonright<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>seremoteinteractivelogonright<,>pattern_match<,>.*<,>0<,>Administrators_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,>_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,>_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,>_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,>_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyservicelogonright<,>pattern_match<,>.*<,>0<,>_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyservicelogonright<,>pattern match<,>.*<,>0<,>" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyservicelogonright<,>pattern_match<,>.*<,>0<,>_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,>_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,>_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>senetworklogonright<,>pattern_match<,>.*<,>0<,>Administrators||Authenticated_Users_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>senetworklogonright<,>pattern match<,>.*<,>0<,>Administrators||Authenticated Users" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>senetworklogonright<,>pattern_match<,>.*<,>0<,>Administrators||Authenticated_Users_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria_GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>2</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>sedenynetworklogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenynetworklogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>2</#>sedenynetworklogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>3</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>2</!#!>sedenynetworklogonright<,>equals||equals<,>Local_account||NT_AUTHORITY_Local_account<,>1<,><#>3</#>sedenynetworklogonright<,>equals||equals<,>Local_account_and_member_of_Administrators_group||NT_AUTHORITY_Local_account_and_member_of_Administrators_group<,>1<,><!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>1<#>3</#>1<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>1<#>3</#>1<!#!>2</!#!>OR<!#!>2</!#!>3<#>2</#>GetWmiValue<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<#>2</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>sedenynetworklogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenynetworklogonright<,>pattern match||equals<,>^(.*\\)?Domain Admins$||Domain Admins<,>1<,><#>2</#>sedenynetworklogonright<,>pattern match||equals<,>^(.*\\)?Enterprise Admins$||Enterprise Admins<,>1<,><#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>3</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>2</!#!>sedenynetworklogonright<,>equals||equals<,>Local account||NT AUTHORITY\Local account<,>1<,><#>3</#>sedenynetworklogonright<,>equals||equals<,>Local account and member of Administrators group||NT AUTHORITY\Local account and member of Administrators group<,>1<,><!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>1<#>3</#>1<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>1<#>3</#>1<!#!>2</!#!>OR<!#!>2</!#!>3<#>2</#>GetWmiValue<!#!>2</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria_GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>2</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>sedenynetworklogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenynetworklogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>2</#>sedenynetworklogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>3</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>2</!#!>sedenynetworklogonright<,>equals||equals<,>Local_account||NT_AUTHORITY_Local_account<,>1<,><#>3</#>sedenynetworklogonright<,>equals||equals<,>Local_account_and_member_of_Administrators_group||NT_AUTHORITY_Local_account_and_member_of_Administrators_group<,>1<,><!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>1<#>3</#>1<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>1<#>3</#>1<!#!>2</!#!>OR<!#!>2</!#!>3<#>2</#>GetWmiValue<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria_GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>2</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenybatchLogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenybatchLogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>2</#>sedenybatchLogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>2</#>GetWmiValue<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<#>2</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenybatchLogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenybatchLogonright<,>pattern match||equals<,>^(.*\\)?Domain Admins$||Domain Admins<,>1<,><#>2</#>sedenybatchLogonright<,>pattern match||equals<,>^(.*\\)?Enterprise Admins$||Enterprise Admins<,>1<,><#>2</#>GetWmiValue<!#!>2</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria_GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>2</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenybatchLogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenybatchLogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>2</#>sedenybatchLogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>2</#>GetWmiValue<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria_GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>2</#>sedenyservicelogonright<,>pattern_match<,>.*<,>0<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyservicelogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>2</#>sedenyservicelogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>2</#>GetWmiValue<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<#>2</#>sedenyservicelogonright<,>pattern match<,>.*<,>0<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyservicelogonright<,>pattern match||equals<,>^(.*\\)?Domain Admins$||Domain Admins<,>1<,><#>2</#>sedenyservicelogonright<,>pattern match||equals<,>^(.*\\)?Enterprise Admins$||Enterprise Admins<,>1<,><#>2</#>GetWmiValue<!#!>2</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria_GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>2</#>sedenyservicelogonright<,>pattern_match<,>.*<,>0<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyservicelogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>2</#>sedenyservicelogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>2</#>GetWmiValue<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria_GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>2</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenyinteractivelogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>2</#>sedenyinteractivelogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>2</#>GetWmiValue<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<#>2</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenyinteractivelogonright<,>pattern match||equals<,>^(.*\\)?Domain Admins$||Domain Admins<,>1<,><#>2</#>sedenyinteractivelogonright<,>pattern match||equals<,>^(.*\\)?Enterprise Admins$||Enterprise Admins<,>1<,><#>2</#>GetWmiValue<!#!>2</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria_GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>2</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenyinteractivelogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>2</#>sedenyinteractivelogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>2</#>GetWmiValue<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_seinteractivelogonright<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "seinteractivelogonright<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_seinteractivelogonright<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiCount<#>1</#>GetWmiValue_root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_fax_<#>1</#>root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_fax_<,>startmode_equals<#>1</#>equals_0<#>1</#>Disabled_equals<#>1</#>equals_0<#>1</#>Disabled_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiCount<#>1</#>GetWmiValue" -ExecutionParamsString "root\cimv2<,>SELECT startmode FROM Win32_Service WHERE name='fax'<#>1</#>root\cimv2<,>SELECT startmode FROM Win32_Service WHERE name='fax'<,>startmode" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "0<#>1</#>Disabled" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "0<#>1</#>Disabled" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiCount<#>1</#>GetWmiValue_root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_fax_<#>1</#>root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_fax_<,>startmode_equals<#>1</#>equals_0<#>1</#>Disabled_equals<#>1</#>equals_0<#>1</#>Disabled_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiCount<#>1</#>GetWmiValue_root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_pnrpsvc_<#>1</#>root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_pnrpsvc_<,>startmode_equals<#>1</#>equals_0<#>1</#>Disabled_equals<#>1</#>equals_0<#>1</#>Disabled_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiCount<#>1</#>GetWmiValue" -ExecutionParamsString "root\cimv2<,>SELECT startmode FROM Win32_Service WHERE name='pnrpsvc'<#>1</#>root\cimv2<,>SELECT startmode FROM Win32_Service WHERE name='pnrpsvc'<,>startmode" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "0<#>1</#>Disabled" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "0<#>1</#>Disabled" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiCount<#>1</#>GetWmiValue_root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_pnrpsvc_<#>1</#>root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_pnrpsvc_<,>startmode_equals<#>1</#>equals_0<#>1</#>Disabled_equals<#>1</#>equals_0<#>1</#>Disabled_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiCount<#>1</#>GetWmiValue_root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_simptcp_<#>1</#>root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_simptcp_<,>startmode_equals<#>1</#>equals_0<#>1</#>Disabled_equals<#>1</#>equals_0<#>1</#>Disabled_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiCount<#>1</#>GetWmiValue" -ExecutionParamsString "root\cimv2<,>SELECT startmode FROM Win32_Service WHERE name='simptcp'<#>1</#>root\cimv2<,>SELECT startmode FROM Win32_Service WHERE name='simptcp'<,>startmode" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "0<#>1</#>Disabled" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "0<#>1</#>Disabled" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiCount<#>1</#>GetWmiValue_root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_simptcp_<#>1</#>root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_simptcp_<,>startmode_equals<#>1</#>equals_0<#>1</#>Disabled_equals<#>1</#>equals_0<#>1</#>Disabled_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareAllWmiObjects_root_cimv2<,>SELECT_id_FROM_win32_serverfeature<,>id<,>58<,>none_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareAllWmiObjects" -ExecutionParamsString "root\cimv2<,>SELECT id FROM win32_serverfeature<,>id<,>58<,>none" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareAllWmiObjects_root_cimv2<,>SELECT_id_FROM_win32_serverfeature<,>id<,>58<,>none_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_GetRegistryValue<!#!>1</!#!>hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>smb1<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareAllWmiObjects<!#!>1</!#!>root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__SMB1Protocol_<,>installstate<,>2<,>all<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "GetRegistryValue<!#!>1</!#!>hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters<,>smb1<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareAllWmiObjects<!#!>1</!#!>root\cimv2<,>SELECT installstate FROM win32_optionalfeature WHERE name = 'SMB1Protocol'<,>installstate<,>2<,>all<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_GetRegistryValue<!#!>1</!#!>hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>smb1<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareAllWmiObjects<!#!>1</!#!>root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__SMB1Protocol_<,>installstate<,>2<,>all<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_GetRegistryValue<!#!>1</!#!>hkey_local_machine_system_currentcontrolset_services_mrxsmb10<,>start<!#!>1</!#!>equals<!#!>1</!#!>4<!#!>1</!#!>equals<!#!>1</!#!>4<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareAllWmiObjects<!#!>1</!#!>root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__SMB1Protocol_<,>installstate<,>2<,>all<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "GetRegistryValue<!#!>1</!#!>hkey_local_machine\system\currentcontrolset\services\mrxsmb10<,>start<!#!>1</!#!>equals<!#!>1</!#!>4<!#!>1</!#!>equals<!#!>1</!#!>4<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareAllWmiObjects<!#!>1</!#!>root\cimv2<,>SELECT installstate FROM win32_optionalfeature WHERE name = 'SMB1Protocol'<,>installstate<,>2<,>all<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_GetRegistryValue<!#!>1</!#!>hkey_local_machine_system_currentcontrolset_services_mrxsmb10<,>start<!#!>1</!#!>equals<!#!>1</!#!>4<!#!>1</!#!>equals<!#!>1</!#!>4<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareAllWmiObjects<!#!>1</!#!>root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__SMB1Protocol_<,>installstate<,>2<,>all<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_id_FROM_win32_serverfeature_id_411_none" -CollectedDataResult (Compare-AllWmiObjects -Namespace "root\cimv2" -Query "SELECT id FROM win32_serverfeature" -OutputFieldName "id"  -ExpectedValue "411" -allOrNone "none" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_id_FROM_win32_serverfeature_id_411_none", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_personalization<,>nolockscreenslideshow_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\personalization<,>nolockscreenslideshow" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_personalization<,>nolockscreenslideshow_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_securityproviders_wdigest<,>uselogoncredential_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\securityproviders\wdigest<,>uselogoncredential" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_securityproviders_wdigest<,>uselogoncredential_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_printers<,>disablewebpnpdownload_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows nt\printers<,>disablewebpnpdownload" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_printers<,>disablewebpnpdownload_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_printers<,>disablehttpprinting_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows nt\printers<,>disablehttpprinting" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_printers<,>disablehttpprinting_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_system<,>dontdisplaynetworkselectionui_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\system<,>dontdisplaynetworkselectionui" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_system<,>dontdisplaynetworkselectionui_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_appcompat<,>disableinventory_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\appcompat<,>disableinventory" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_appcompat<,>disableinventory_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_system<,>enablesmartscreen_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\system<,>enablesmartscreen" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_system<,>enablesmartscreen_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareRegistryValueOrNotExist_hkey_local_machine_software_policies_microsoft_internet_explorer_feeds<,>allowbasicauthinclear<,>0_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareRegistryValueOrNotExist" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\internet explorer\feeds<,>allowbasicauthinclear<,>0" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareRegistryValueOrNotExist_hkey_local_machine_software_policies_microsoft_internet_explorer_feeds<,>allowbasicauthinclear<,>0_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_windows_search<,>allowindexingencryptedstoresoritems_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\windows search<,>allowindexingencryptedstoresoritems" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_windows_search<,>allowindexingencryptedstoresoritems_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>GetRegistryValue_GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_software_policies_microsoft_windows_system<,>enumeratelocalusers_not_equal<#>1</#>equals_true<#>1</#>0_not_equal<#>1</#>equals_true<#>1</#>0_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>GetRegistryValue" -ExecutionParamsString "GetWmiValue<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine\software\policies\microsoft\windows\system<,>enumeratelocalusers" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>0" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>0" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>GetRegistryValue_GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_software_policies_microsoft_windows_system<,>enumeratelocalusers_not_equal<#>1</#>equals_true<#>1</#>0_not_equal<#>1</#>equals_true<#>1</#>0_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiCount<#>1</#>GetWmiValue_root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_ftpsvc_<#>1</#>root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_ftpsvc_<,>startmode_equals<#>1</#>equals_0<#>1</#>Disabled_equals<#>1</#>equals_0<#>1</#>Disabled_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiCount<#>1</#>GetWmiValue" -ExecutionParamsString "root\cimv2<,>SELECT startmode FROM Win32_Service WHERE name='ftpsvc'<#>1</#>root\cimv2<,>SELECT startmode FROM Win32_Service WHERE name='ftpsvc'<,>startmode" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "0<#>1</#>Disabled" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "0<#>1</#>Disabled" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiCount<#>1</#>GetWmiValue_root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_ftpsvc_<#>1</#>root_cimv2<,>SELECT_startmode_FROM_Win32_Service_WHERE_name=_ftpsvc_<,>startmode_equals<#>1</#>equals_0<#>1</#>Disabled_equals<#>1</#>equals_0<#>1</#>Disabled_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiCount<#>1</#>CompareAllWmiObjects_root_cimv2<,>SELECT_InstallState_FROM_Win32_OptionalFeature_WHERE_name=_telnetclient_<#>1</#>root_cimv2<,>SELECT_InstallState_FROM_Win32_OptionalFeature_WHERE_name=_telnetclient_<,>installstate<,>1<,>none_equals<#>1</#>equals_0<#>1</#>true_equals<#>1</#>equals_0<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiCount<#>1</#>CompareAllWmiObjects" -ExecutionParamsString "root\cimv2<,>SELECT InstallState FROM Win32_OptionalFeature WHERE name='telnetclient'<#>1</#>root\cimv2<,>SELECT InstallState FROM Win32_OptionalFeature WHERE name='telnetclient'<,>installstate<,>1<,>none" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "0<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "0<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiCount<#>1</#>CompareAllWmiObjects_root_cimv2<,>SELECT_InstallState_FROM_Win32_OptionalFeature_WHERE_name=_telnetclient_<#>1</#>root_cimv2<,>SELECT_InstallState_FROM_Win32_OptionalFeature_WHERE_name=_telnetclient_<,>installstate<,>1<,>none_equals<#>1</#>equals_0<#>1</#>true_equals<#>1</#>equals_0<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_rsop_computer_SELECT_setting_FROM_RSOP_SecuritySettingBoolean_WHERE_KeyName=_TicketValidateClient__setting" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\rsop\computer" -Query "SELECT setting FROM RSOP_SecuritySettingBoolean WHERE KeyName='TicketValidateClient'" -OutputFieldName "setting" ) } catch { New-Object CollectedBaselineValue(-1,"root_rsop_computer_SELECT_setting_FROM_RSOP_SecuritySettingBoolean_WHERE_KeyName=_TicketValidateClient__setting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareWmiWithMultipleValues_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareWmiWithMultipleValues" -ExecutionParamsString "root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareWmiWithMultipleValues_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue<#>1</#>GetWmiValue_root_rsop_computer<,>SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxServiceAge_<,>setting<#>1</#>root_rsop_computer<,>SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxServiceAge_<,>setting_not_equal<#>1</#>less_than_or_equal_-1<#>1</#>600_not_equal<#>1</#>less_than_or_equal_-1<#>1</#>600_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue<#>1</#>GetWmiValue" -ExecutionParamsString "root\rsop\computer<,>SELECT setting FROM RSOP_SecuritySettingNumeric WHERE KeyName='MaxServiceAge'<,>setting<#>1</#>root\rsop\computer<,>SELECT setting FROM RSOP_SecuritySettingNumeric WHERE KeyName='MaxServiceAge'<,>setting" -AssessorConditionsString "not equal<#>1</#>less than or equal" -AssessorValuesString "-1<#>1</#>600" -McmConditionsString "not equal<#>1</#>less than or equal" -McmValuesString "-1<#>1</#>600" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue<#>1</#>GetWmiValue_root_rsop_computer<,>SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxServiceAge_<,>setting<#>1</#>root_rsop_computer<,>SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxServiceAge_<,>setting_not_equal<#>1</#>less_than_or_equal_-1<#>1</#>600_not_equal<#>1</#>less_than_or_equal_-1<#>1</#>600_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue<#>1</#>GetWmiValue_root_rsop_computer<,>SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxTicketAge_<,>setting<#>1</#>root_rsop_computer<,>SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxTicketAge_<,>setting_not_equal<#>1</#>less_than_or_equal_-1<#>1</#>10_not_equal<#>1</#>less_than_or_equal_-1<#>1</#>10_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue<#>1</#>GetWmiValue" -ExecutionParamsString "root\rsop\computer<,>SELECT setting FROM RSOP_SecuritySettingNumeric WHERE KeyName='MaxTicketAge'<,>setting<#>1</#>root\rsop\computer<,>SELECT setting FROM RSOP_SecuritySettingNumeric WHERE KeyName='MaxTicketAge'<,>setting" -AssessorConditionsString "not equal<#>1</#>less than or equal" -AssessorValuesString "-1<#>1</#>10" -McmConditionsString "not equal<#>1</#>less than or equal" -McmValuesString "-1<#>1</#>10" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue<#>1</#>GetWmiValue_root_rsop_computer<,>SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxTicketAge_<,>setting<#>1</#>root_rsop_computer<,>SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxTicketAge_<,>setting_not_equal<#>1</#>less_than_or_equal_-1<#>1</#>10_not_equal<#>1</#>less_than_or_equal_-1<#>1</#>10_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_rsop_computer_SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxRenewAge__setting" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\rsop\computer" -Query "SELECT setting FROM RSOP_SecuritySettingNumeric WHERE KeyName='MaxRenewAge'" -OutputFieldName "setting" ) } catch { New-Object CollectedBaselineValue(-1,"root_rsop_computer_SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxRenewAge__setting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_rsop_computer_SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxClockSkew__setting" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\rsop\computer" -Query "SELECT setting FROM RSOP_SecuritySettingNumeric WHERE KeyName='MaxClockSkew'" -OutputFieldName "setting" ) } catch { New-Object CollectedBaselineValue(-1,"root_rsop_computer_SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxClockSkew__setting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system_kerberos_parameters<,>supportedencryptiontypes_equals_2147483640_equals_2147483640_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters<,>supportedencryptiontypes" -AssessorConditionsString "equals" -AssessorValuesString "2147483640" -McmConditionsString "equals" -McmValuesString "2147483640" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system_kerberos_parameters<,>supportedencryptiontypes_equals_2147483640_equals_2147483640_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_winrm_client<,>allowbasic_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\winrm\client<,>allowbasic" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_winrm_client<,>allowbasic_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_winrm_client<,>allowdigest_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\winrm\client<,>allowdigest" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_winrm_client<,>allowdigest_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_winrm_service<,>allowbasic_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\winrm\service<,>allowbasic" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_winrm_service<,>allowbasic_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_credui<,>enumerateadministrators_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\credui<,>enumerateadministrators" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_credui<,>enumerateadministrators_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>GetRegistryValue_GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>localaccounttokenfilterpolicy_not_equal<#>1</#>equals_true<#>1</#>0_not_equal<#>1</#>equals_true<#>1</#>0_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>GetRegistryValue" -ExecutionParamsString "GetWmiValue<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>localaccounttokenfilterpolicy" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>0" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>0" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>GetRegistryValue_GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>localaccounttokenfilterpolicy_not_equal<#>1</#>equals_true<#>1</#>0_not_equal<#>1</#>equals_true<#>1</#>0_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>enableuiadesktoptoggle_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>enableuiadesktoptoggle" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>enableuiadesktoptoggle_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>consentpromptbehavioradmin<#>1</#>hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>consentpromptbehavioradmin_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>consentpromptbehavioradmin<#>1</#>hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>consentpromptbehavioradmin" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "2<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "2<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>consentpromptbehavioradmin<#>1</#>hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>consentpromptbehavioradmin_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>enableinstallerdetection_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>enableinstallerdetection" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>enableinstallerdetection_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>enablesecureuiapaths_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>enablesecureuiapaths" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>enablesecureuiapaths_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>enablevirtualization_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>enablevirtualization" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>enablevirtualization_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_terminal_services<,>fdisablecdm_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows nt\terminal services<,>fdisablecdm" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_terminal_services<,>fdisablecdm_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>restrictanonymous_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa<,>restrictanonymous" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>restrictanonymous_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>restrictnullsessaccess_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters<,>restrictnullsessaccess" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>restrictnullsessaccess_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9217-69ae-11d9-bed3-505054503030<#>1</#>0cce9217-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9217-69ae-11d9-bed3-505054503030<#>1</#>0cce9217-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9217-69ae-11d9-bed3-505054503030<#>1</#>0cce9217-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9217-69ae-11d9-bed3-505054503030<#>1</#>0cce9217-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9217-69ae-11d9-bed3-505054503030<#>1</#>0cce9217-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9217-69ae-11d9-bed3-505054503030<#>1</#>0cce9217-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckSpecificFileEffectiveRight_.*<,>S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>null<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>_System32_Eventvwr.exe<,>standard_delete||standard_write_dac||standard_write_owner||generic_write||file_write_data||file_append_data||file_write_ea||file_delete_child||file_write_attributes<,>false||false||false||false||false||false||false||false||false_pattern_match_.*_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckSpecificFileEffectiveRight" -ExecutionParamsString ".*<,>S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464<,>hkey_local_machine\software\microsoft\windows nt\currentversion<,>systemroot<,>null<,>hkey_local_machine\software\microsoft\windows nt\currentversion<,>systemroot<,>\System32\Eventvwr.exe<,>standard_delete||standard_write_dac||standard_write_owner||generic_write||file_write_data||file_append_data||file_write_ea||file_delete_child||file_write_attributes<,>false||false||false||false||false||false||false||false||false" -AssessorConditionsString "pattern match" -AssessorValuesString ".*" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckSpecificFileEffectiveRight_.*<,>S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>null<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>_System32_Eventvwr.exe<,>standard_delete||standard_write_dac||standard_write_owner||generic_write||file_write_data||file_append_data||file_write_ea||file_delete_child||file_write_attributes<,>false||false||false||false||false||false||false||false||false_pattern_match_.*_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,>_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,>_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria_GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>2</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>equals||equals<,>Local_account||NT_AUTHORITY_Local_account<,>1<,><#>2</#>GetWmiValue<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<#>2</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>pattern match||equals<,>^(.*\\)?Domain Admins$||Domain Admins<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>pattern match||equals<,>^(.*\\)?Enterprise Admins$||Enterprise Admins<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>equals||equals<,>Local account||NT AUTHORITY\Local account<,>1<,><#>2</#>GetWmiValue<!#!>2</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria_GetWmiValue<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>2</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>2<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>SubCriteria<!#!>1</!#!>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>2</#>sedenyremoteInteractivelogonright<,>equals||equals<,>Local_account||NT_AUTHORITY_Local_account<,>1<,><#>2</#>GetWmiValue<!#!>2</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>equals<!#!>2</!#!>3<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<#>2</#>1<#>2</#>1<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_SubCriteria<#>2</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>SubCriteria<#>3</#>SubCriteria<!#!>2</!#!>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern_match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<#>3</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern_match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<#>2</#>SubCriteria<#>3</#>SubCriteria<!#!>2</!#!>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern_match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<#>3</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern_match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<#>2</#>SubCriteria<#>3</#>SubCriteria<!#!>2</!#!>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern_match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<#>3</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern_match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>not_equal_true<#>1</#>true_equals<#>1</#>not_equal_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "SubCriteria<#>2</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>SubCriteria<#>3</#>SubCriteria<!#!>2</!#!>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<#>3</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<#>2</#>SubCriteria<#>3</#>SubCriteria<!#!>2</!#!>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<#>3</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<#>2</#>SubCriteria<#>3</#>SubCriteria<!#!>2</!#!>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<#>3</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>not equal" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>not equal" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_SubCriteria<#>2</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>SubCriteria<#>3</#>SubCriteria<!#!>2</!#!>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern_match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<#>3</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern_match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<#>2</#>SubCriteria<#>3</#>SubCriteria<!#!>2</!#!>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern_match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<#>3</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern_match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<#>2</#>SubCriteria<#>3</#>SubCriteria<!#!>2</!#!>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern_match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<#>3</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<#>4</#>CheckSpecificFileEffectiveRight<!#!>3</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>4</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>3</!#!>equals<#>4</#>equals<#>4</#>pattern_match<!#!>3</!#!>S-1-5-18<#>4</#>S-1-5-32-544<#>4</#>.*<!#!>3</!#!>equals<#>4</#>equals<#>4</#>equals<!#!>3</!#!>true<#>4</#>true<#>4</#>true<!#!>3</!#!>AND<!#!>3</!#!>4<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>not_equal_true<#>1</#>true_equals<#>1</#>not_equal_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>semachineaccountprivilege<,>pattern_match<,>.*<,>0<,>Administrators_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>semachineaccountprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>semachineaccountprivilege<,>pattern_match<,>.*<,>0<,>Administrators_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>seenabledelegationprivilege<,>pattern_match<,>.*<,>0<,>Administrators_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>seenabledelegationprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>seenabledelegationprivilege<,>pattern_match<,>.*<,>0<,>Administrators_not_equal<#>1</#>equals_true<#>1</#>1_not_equal<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>GetRegistryValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_system_currentcontrolset_control_lsa<,>restrictremotesam_equals<#>1</#>equals_true<#>1</#>O:BAG:BAD:(A;;RC;;;BA)_equals<#>1</#>equals_true<#>1</#>O:BAG:BAD:(A;;RC;;;BA)_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>GetRegistryValue" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine\system\currentcontrolset\control\lsa<,>restrictremotesam" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>O:BAG:BAD:(A;;RC;;;BA)" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>O:BAG:BAD:(A;;RC;;;BA)" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>GetRegistryValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_system_currentcontrolset_control_lsa<,>restrictremotesam_equals<#>1</#>equals_true<#>1</#>O:BAG:BAD:(A;;RC;;;BA)_equals<#>1</#>equals_true<#>1</#>O:BAG:BAD:(A;;RC;;;BA)_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>seenabledelegationprivilege<,>pattern_match<,>.*<,>0<,>_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>seenabledelegationprivilege<,>pattern match<,>.*<,>0<,>" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>seenabledelegationprivilege<,>pattern_match<,>.*<,>0<,>_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_setrustedcredmanaccessnameright<,>pattern_match<,>.*<,>0<,>_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "setrustedcredmanaccessnameright<,>pattern match<,>.*<,>0<,>" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_setrustedcredmanaccessnameright<,>pattern_match<,>.*<,>0<,>_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_setcbprivilege<,>pattern_match<,>.*<,>0<,>_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "setcbprivilege<,>pattern match<,>.*<,>0<,>" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_setcbprivilege<,>pattern_match<,>.*<,>0<,>_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_sebackupprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "sebackupprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_sebackupprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_secreatepagefileprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "secreatepagefileprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_secreatepagefileprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_secreatetokenprivilege<,>pattern_match<,>.*<,>0<,>_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "secreatetokenprivilege<,>pattern match<,>.*<,>0<,>" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_secreatetokenprivilege<,>pattern_match<,>.*<,>0<,>_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_secreateglobalprivilege<,>pattern_match<,>.*<,>0<,>Administrators||LOCAL_SERVICE||NETWORK_SERVICE||SERVICE_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "secreateglobalprivilege<,>pattern match<,>.*<,>0<,>Administrators||LOCAL SERVICE||NETWORK SERVICE||SERVICE" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_secreateglobalprivilege<,>pattern_match<,>.*<,>0<,>Administrators||LOCAL_SERVICE||NETWORK_SERVICE||SERVICE_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_secreatepermanentprivilege<,>pattern_match<,>.*<,>0<,>_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "secreatepermanentprivilege<,>pattern match<,>.*<,>0<,>" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_secreatepermanentprivilege<,>pattern_match<,>.*<,>0<,>_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CheckUsersPrivilegeBySidAndPrivilege<#>2</#>GetWmiValue<!#!>1</!#!>secreatesymboliclinkprivilege<,>pattern_match<,>.*<,>0<,>Administrators||NT_VIRTUAL_MACHINE_Virtual_Machines<#>2</#>root_cimv2<,>SELECT_name_FROM_Win32_ServerFeature_WHERE_ID_=_20<,>name<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>Hyper-V<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>Hyper-V<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>secreatesymboliclinkprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CheckUsersPrivilegeBySidAndPrivilege<#>2</#>GetWmiValue<!#!>1</!#!>secreatesymboliclinkprivilege<,>pattern match<,>.*<,>0<,>Administrators||NT VIRTUAL MACHINE\Virtual Machines<#>2</#>root\cimv2<,>SELECT name FROM Win32_ServerFeature WHERE ID = 20<,>name<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>Hyper-V<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>Hyper-V<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>secreatesymboliclinkprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CheckUsersPrivilegeBySidAndPrivilege<#>2</#>GetWmiValue<!#!>1</!#!>secreatesymboliclinkprivilege<,>pattern_match<,>.*<,>0<,>Administrators||NT_VIRTUAL_MACHINE_Virtual_Machines<#>2</#>root_cimv2<,>SELECT_name_FROM_Win32_ServerFeature_WHERE_ID_=_20<,>name<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>Hyper-V<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>Hyper-V<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>secreatesymboliclinkprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_sedebugprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "sedebugprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_sedebugprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_seremoteshutdownprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "seremoteshutdownprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_seremoteshutdownprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_seauditprivilege<,>pattern_match<,>.*<,>0<,>LOCAL_SERVICE||NETWORK_SERVICE_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "seauditprivilege<,>pattern match<,>.*<,>0<,>LOCAL SERVICE||NETWORK SERVICE" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_seauditprivilege<,>pattern_match<,>.*<,>0<,>LOCAL_SERVICE||NETWORK_SERVICE_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_seimpersonateprivilege<,>pattern_match<,>.*<,>0<,>Administrators||LOCAL_SERVICE||NETWORK_SERVICE||SERVICE_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "seimpersonateprivilege<,>pattern match<,>.*<,>0<,>Administrators||LOCAL SERVICE||NETWORK SERVICE||SERVICE" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_seimpersonateprivilege<,>pattern_match<,>.*<,>0<,>Administrators||LOCAL_SERVICE||NETWORK_SERVICE||SERVICE_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_seincreasebasepriorityprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "seincreasebasepriorityprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_seincreasebasepriorityprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_seloaddriverprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "seloaddriverprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_seloaddriverprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_selockmemoryprivilege<,>pattern_match<,>.*<,>0<,>_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "selockmemoryprivilege<,>pattern match<,>.*<,>0<,>" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_selockmemoryprivilege<,>pattern_match<,>.*<,>0<,>_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_sesystemenvironmentprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "sesystemenvironmentprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_sesystemenvironmentprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_semanagevolumeprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "semanagevolumeprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_semanagevolumeprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_seprofilesingleprocessprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "seprofilesingleprocessprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_seprofilesingleprocessprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_serestoreprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "serestoreprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_serestoreprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege_setakeownershipprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "setakeownershipprivilege<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege_setakeownershipprivilege<,>pattern_match<,>.*<,>0<,>Administrators_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce923a-69ae-11d9-bed3-505054503030<#>2</#>0cce923a-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria" -ExecutionParamsString "GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce923a-69ae-11d9-bed3-505054503030<#>2</#>0cce923a-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce923a-69ae-11d9-bed3-505054503030<#>2</#>0cce923a-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce922b-69ae-11d9-bed3-505054503030<#>2</#>0cce922b-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria" -ExecutionParamsString "GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce922b-69ae-11d9-bed3-505054503030<#>2</#>0cce922b-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce922b-69ae-11d9-bed3-505054503030<#>2</#>0cce922b-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce922f-69ae-11d9-bed3-505054503030<#>1</#>0cce922f-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce922f-69ae-11d9-bed3-505054503030<#>1</#>0cce922f-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce922f-69ae-11d9-bed3-505054503030<#>1</#>0cce922f-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce922f-69ae-11d9-bed3-505054503030<#>1</#>0cce922f-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce922f-69ae-11d9-bed3-505054503030<#>1</#>0cce922f-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce922f-69ae-11d9-bed3-505054503030<#>1</#>0cce922f-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9230-69ae-11d9-bed3-505054503030<#>1</#>0cce9230-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9230-69ae-11d9-bed3-505054503030<#>1</#>0cce9230-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9230-69ae-11d9-bed3-505054503030<#>1</#>0cce9230-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9231-69ae-11d9-bed3-505054503030<#>1</#>0cce9231-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9231-69ae-11d9-bed3-505054503030<#>1</#>0cce9231-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9231-69ae-11d9-bed3-505054503030<#>1</#>0cce9231-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9228-69ae-11d9-bed3-505054503030<#>1</#>0cce9228-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9228-69ae-11d9-bed3-505054503030<#>1</#>0cce9228-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9228-69ae-11d9-bed3-505054503030<#>1</#>0cce9228-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9228-69ae-11d9-bed3-505054503030<#>1</#>0cce9228-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9228-69ae-11d9-bed3-505054503030<#>1</#>0cce9228-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9228-69ae-11d9-bed3-505054503030<#>1</#>0cce9228-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9213-69ae-11d9-bed3-505054503030<#>1</#>0cce9213-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9213-69ae-11d9-bed3-505054503030<#>1</#>0cce9213-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9213-69ae-11d9-bed3-505054503030<#>1</#>0cce9213-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9213-69ae-11d9-bed3-505054503030<#>1</#>0cce9213-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9213-69ae-11d9-bed3-505054503030<#>1</#>0cce9213-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9213-69ae-11d9-bed3-505054503030<#>1</#>0cce9213-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9214-69ae-11d9-bed3-505054503030<#>1</#>0cce9214-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9214-69ae-11d9-bed3-505054503030<#>1</#>0cce9214-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9214-69ae-11d9-bed3-505054503030<#>1</#>0cce9214-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9214-69ae-11d9-bed3-505054503030<#>1</#>0cce9214-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9214-69ae-11d9-bed3-505054503030<#>1</#>0cce9214-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9214-69ae-11d9-bed3-505054503030<#>1</#>0cce9214-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9210-69ae-11d9-bed3-505054503030<#>1</#>0cce9210-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9210-69ae-11d9-bed3-505054503030<#>1</#>0cce9210-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9210-69ae-11d9-bed3-505054503030<#>1</#>0cce9210-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9211-69ae-11d9-bed3-505054503030<#>1</#>0cce9211-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9211-69ae-11d9-bed3-505054503030<#>1</#>0cce9211-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9211-69ae-11d9-bed3-505054503030<#>1</#>0cce9211-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9212-69ae-11d9-bed3-505054503030<#>1</#>0cce9212-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9212-69ae-11d9-bed3-505054503030<#>1</#>0cce9212-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9212-69ae-11d9-bed3-505054503030<#>1</#>0cce9212-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9212-69ae-11d9-bed3-505054503030<#>1</#>0cce9212-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9212-69ae-11d9-bed3-505054503030<#>1</#>0cce9212-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9212-69ae-11d9-bed3-505054503030<#>1</#>0cce9212-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>0cce923b-69ae-11d9-bed3-505054503030<#>1</#>0cce923b-69ae-11d9-bed3-505054503030_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>0cce923b-69ae-11d9-bed3-505054503030<#>1</#>0cce923b-69ae-11d9-bed3-505054503030" -AssessorConditionsString "not equal<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "not equal<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>0cce923b-69ae-11d9-bed3-505054503030<#>1</#>0cce923b-69ae-11d9-bed3-505054503030_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>0cce923b-69ae-11d9-bed3-505054503030<#>1</#>0cce923b-69ae-11d9-bed3-505054503030_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>0cce923b-69ae-11d9-bed3-505054503030<#>1</#>0cce923b-69ae-11d9-bed3-505054503030" -AssessorConditionsString "not equal<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "not equal<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>0cce923b-69ae-11d9-bed3-505054503030<#>1</#>0cce923b-69ae-11d9-bed3-505054503030_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>0cce923c-69ae-11d9-bed3-505054503030<#>1</#>0cce923c-69ae-11d9-bed3-505054503030_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>0cce923c-69ae-11d9-bed3-505054503030<#>1</#>0cce923c-69ae-11d9-bed3-505054503030" -AssessorConditionsString "not equal<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "not equal<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>0cce923c-69ae-11d9-bed3-505054503030<#>1</#>0cce923c-69ae-11d9-bed3-505054503030_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>0cce923c-69ae-11d9-bed3-505054503030<#>1</#>0cce923c-69ae-11d9-bed3-505054503030_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>0cce923c-69ae-11d9-bed3-505054503030<#>1</#>0cce923c-69ae-11d9-bed3-505054503030" -AssessorConditionsString "not equal<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "not equal<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>0cce923c-69ae-11d9-bed3-505054503030<#>1</#>0cce923c-69ae-11d9-bed3-505054503030_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_not_equal<#>1</#>equals<#>1</#>equals_true<#>1</#>AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareLockoutValues<#>1</#>GetAccountPolicyValue_LockoutDuration||LockoutDuration||LockoutDuration<,>less_than_or_equal||equals||greater_than_or_equal<,>0||4294967295||900<#>1</#>LockoutThreshold_equals<#>1</#>greater_than_true<#>1</#>0_equals<#>1</#>greater_than_true<#>1</#>0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareLockoutValues<#>1</#>GetAccountPolicyValue" -ExecutionParamsString "LockoutDuration||LockoutDuration||LockoutDuration<,>less than or equal||equals||greater than or equal<,>0||4294967295||900<#>1</#>LockoutThreshold" -AssessorConditionsString "equals<#>1</#>greater than" -AssessorValuesString "true<#>1</#>0" -McmConditionsString "equals<#>1</#>greater than" -McmValuesString "true<#>1</#>0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareLockoutValues<#>1</#>GetAccountPolicyValue_LockoutDuration||LockoutDuration||LockoutDuration<,>less_than_or_equal||equals||greater_than_or_equal<,>0||4294967295||900<#>1</#>LockoutThreshold_equals<#>1</#>greater_than_true<#>1</#>0_equals<#>1</#>greater_than_true<#>1</#>0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_eventlog_application<,>maxsize_greater_than_or_equal_32768_greater_than_or_equal_32768_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\eventlog\application<,>maxsize" -AssessorConditionsString "greater than or equal" -AssessorValuesString "32768" -McmConditionsString "greater than or equal" -McmValuesString "32768" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_eventlog_application<,>maxsize_greater_than_or_equal_32768_greater_than_or_equal_32768_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_eventlog_security<,>maxsize_greater_than_or_equal_196608_greater_than_or_equal_196608_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\eventlog\security<,>maxsize" -AssessorConditionsString "greater than or equal" -AssessorValuesString "196608" -McmConditionsString "greater than or equal" -McmValuesString "196608" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_eventlog_security<,>maxsize_greater_than_or_equal_196608_greater_than_or_equal_196608_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_eventlog_system<,>maxsize_greater_than_or_equal_32768_greater_than_or_equal_32768_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\eventlog\system<,>maxsize" -AssessorConditionsString "greater than or equal" -AssessorValuesString "32768" -McmConditionsString "greater than or equal" -McmValuesString "32768" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_eventlog_system<,>maxsize_greater_than_or_equal_32768_greater_than_or_equal_32768_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_installer<,>enableusercontrol_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\installer<,>enableusercontrol" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_installer<,>enableusercontrol_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_installer<,>alwaysinstallelevated_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\installer<,>alwaysinstallelevated" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_installer<,>alwaysinstallelevated_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_explorer<,>noautoplayfornonvolume_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\explorer<,>noautoplayfornonvolume" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_explorer<,>noautoplayfornonvolume_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_explorer<,>noautorun_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer<,>noautorun" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_explorer<,>noautorun_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_explorer<,>nodrivetypeautorun_equals_255_equals_255_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer<,>nodrivetypeautorun" -AssessorConditionsString "equals" -AssessorValuesString "255" -McmConditionsString "equals" -McmValuesString "255" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_explorer<,>nodrivetypeautorun_equals_255_equals_255_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_terminal_services<,>disablepasswordsaving_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows nt\terminal services<,>disablepasswordsaving" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_terminal_services<,>disablepasswordsaving_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_terminal_services<,>fpromptforpassword_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows nt\terminal services<,>fpromptforpassword" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_nt_terminal_services<,>fpromptforpassword_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_winrm_service<,>disablerunas_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\winrm\service<,>disablerunas" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_winrm_service<,>disablerunas_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>filteradministratortoken_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>filteradministratortoken" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>filteradministratortoken_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>consentpromptbehavioruser_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>consentpromptbehavioruser" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>consentpromptbehavioruser_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>enablelua_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>enablelua" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>enablelua_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>GetRegistryValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_software_policies_microsoft_windows_nt_rpc<,>restrictremoteclients_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>GetRegistryValue" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine\software\policies\microsoft\windows nt\rpc<,>restrictremoteclients" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>GetRegistryValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_software_policies_microsoft_windows_nt_rpc<,>restrictremoteclients_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>disablepasswordchange_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters<,>disablepasswordchange" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>disablepasswordchange_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_winrm_client<,>allowunencryptedtraffic_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\winrm\client<,>allowunencryptedtraffic" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_winrm_client<,>allowunencryptedtraffic_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_winrm_service<,>allowunencryptedtraffic_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\winrm\service<,>allowunencryptedtraffic" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_winrm_service<,>allowunencryptedtraffic_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netbt_parameters<,>nonamereleaseondemand_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\netbt\parameters<,>nonamereleaseondemand" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netbt_parameters<,>nonamereleaseondemand_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>GetRegistryValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>ldapserverintegrity_not_equal<#>1</#>equals_true<#>1</#>2_not_equal<#>1</#>equals_true<#>1</#>2_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>GetRegistryValue" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>ldapserverintegrity" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>2" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>2" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>GetRegistryValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>ldapserverintegrity_not_equal<#>1</#>equals_true<#>1</#>2_not_equal<#>1</#>equals_true<#>1</#>2_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>requiresignorseal_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters<,>requiresignorseal" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>requiresignorseal_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>sealsecurechannel_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters<,>sealsecurechannel" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>sealsecurechannel_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>signsecurechannel_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters<,>signsecurechannel" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>signsecurechannel_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>requirestrongkey_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters<,>requirestrongkey" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>requirestrongkey_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanworkstation_parameters<,>requiresecuritysignature_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters<,>requiresecuritysignature" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanworkstation_parameters<,>requiresecuritysignature_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanworkstation_parameters<,>enablesecuritysignature_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters<,>enablesecuritysignature" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanworkstation_parameters<,>enablesecuritysignature_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>requiresecuritysignature_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters<,>requiresecuritysignature" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>requiresecuritysignature_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>enablesecuritysignature_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters<,>enablesecuritysignature" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>enablesecuritysignature_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareRegistryValueOrNotExist_hkey_local_machine_software_policies_microsoft_windows_explorer<,>nodataexecutionprevention<,>0_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareRegistryValueOrNotExist" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\explorer<,>nodataexecutionprevention<,>0" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareRegistryValueOrNotExist_hkey_local_machine_software_policies_microsoft_windows_explorer<,>nodataexecutionprevention<,>0_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce923f-69ae-11d9-bed3-505054503030<#>2</#>0cce923f-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria" -ExecutionParamsString "GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce923f-69ae-11d9-bed3-505054503030<#>2</#>0cce923f-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce923f-69ae-11d9-bed3-505054503030<#>2</#>0cce923f-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce923f-69ae-11d9-bed3-505054503030<#>2</#>0cce923f-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_FAILURE<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_FAILURE<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria" -ExecutionParamsString "GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce923f-69ae-11d9-bed3-505054503030<#>2</#>0cce923f-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_FAILURE<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_FAILURE<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce923f-69ae-11d9-bed3-505054503030<#>2</#>0cce923f-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_FAILURE<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_FAILURE<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce921b-69ae-11d9-bed3-505054503030<#>1</#>0cce921b-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce921b-69ae-11d9-bed3-505054503030<#>1</#>0cce921b-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce921b-69ae-11d9-bed3-505054503030<#>1</#>0cce921b-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9227-69ae-11d9-bed3-505054503030<#>1</#>0cce9227-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9227-69ae-11d9-bed3-505054503030<#>1</#>0cce9227-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9227-69ae-11d9-bed3-505054503030<#>1</#>0cce9227-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9227-69ae-11d9-bed3-505054503030<#>1</#>0cce9227-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9227-69ae-11d9-bed3-505054503030<#>1</#>0cce9227-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9227-69ae-11d9-bed3-505054503030<#>1</#>0cce9227-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce9216-69ae-11d9-bed3-505054503030<#>2</#>0cce9216-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria" -ExecutionParamsString "GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce9216-69ae-11d9-bed3-505054503030<#>2</#>0cce9216-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria_GetAuditEventPolicySubcategoriesValue<#>2</#>GetAuditEventPolicySubcategoriesValue<!#!>1</!#!>0cce9216-69ae-11d9-bed3-505054503030<#>2</#>0cce9216-69ae-11d9-bed3-505054503030<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>AUDIT_SUCCESS<#>2</#>AUDIT_SUCCESS_FAILURE<!#!>1</!#!>OR<!#!>1</!#!>2_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa_fipsalgorithmpolicy<,>enabled_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa\fipsalgorithmpolicy<,>enabled" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa_fipsalgorithmpolicy<,>enabled_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\currentmajorversionnumber" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion" -RegistryKey "currentmajorversionnumber"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\currentmajorversionnumber", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\currentbuild" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion" -RegistryKey "currentbuild"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\currentbuild", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\currentbuildnumber" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion" -RegistryKey "currentbuildnumber"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\currentbuildnumber", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_tcpip6_parameters<,>disableipsourcerouting_equals_2_equals_2_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\tcpip6\parameters<,>disableipsourcerouting" -AssessorConditionsString "equals" -AssessorValuesString "2" -McmConditionsString "equals" -McmValuesString "2" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_tcpip6_parameters<,>disableipsourcerouting_equals_2_equals_2_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>disableipsourcerouting_equals_2_equals_2_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters<,>disableipsourcerouting" -AssessorConditionsString "equals" -AssessorValuesString "2" -McmConditionsString "equals" -McmValuesString "2" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>disableipsourcerouting_equals_2_equals_2_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>enableicmpredirect_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters<,>enableicmpredirect" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>enableicmpredirect_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_lanmanworkstation<,>allowinsecureguestauth_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\lanmanworkstation<,>allowinsecureguestauth" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_lanmanworkstation<,>allowinsecureguestauth_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_CompareRegistryWithMultipleAcceptedValues<#>2</#>CompareRegistryWithMultipleAcceptedValues<!#!>1</!#!>hkey_local_machine_software_policies_microsoft_windows_networkprovider_hardenedpaths<,>__*_sysvol<,>(^|_*,_*)RequireMutualAuthentication=1(_*,_*|)||(^|[_*,_*])RequireMutualAuthentication=(?!1(_*,_*|))||(^|_*,_*)RequireIntegrity=1(_*,_*|)||(^|_*,_*)RequireIntegrity=(?!1(_*,_*|))<,>false<,>pattern_match||pattern_match||pattern_match||pattern_match<,>false<#>2</#>hkey_local_machine_software_policies_microsoft_windows_networkprovider_hardenedpaths<,>__*_netlogon<,>(^|_*,_*)RequireMutualAuthentication=1(_*,_*|)||(^|[_*,_*])RequireMutualAuthentication=(?!1(_*,_*|))||(^|_*,_*)RequireIntegrity=1(_*,_*|)||(^|_*,_*)RequireIntegrity=(?!1(_*,_*|))<,>false<,>pattern_match||pattern_match||pattern_match||pattern_match<,>false<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_Win32_ComputerSystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "CompareRegistryWithMultipleAcceptedValues<#>2</#>CompareRegistryWithMultipleAcceptedValues<!#!>1</!#!>hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths<,>\\*\sysvol<,>(^| *, *)RequireMutualAuthentication=1( *, *|$)||(^|[ *, *])RequireMutualAuthentication=(?!1( *, *|$))||(^| *, *)RequireIntegrity=1( *, *|$)||(^| *, *)RequireIntegrity=(?!1( *, *|$))<,>false<,>pattern match||pattern match||pattern match||pattern match<,>false<#>2</#>hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths<,>\\*\netlogon<,>(^| *, *)RequireMutualAuthentication=1( *, *|$)||(^|[ *, *])RequireMutualAuthentication=(?!1( *, *|$))||(^| *, *)RequireIntegrity=1( *, *|$)||(^| *, *)RequireIntegrity=(?!1( *, *|$))<,>false<,>pattern match||pattern match||pattern match||pattern match<,>false<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM Win32_ComputerSystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_CompareRegistryWithMultipleAcceptedValues<#>2</#>CompareRegistryWithMultipleAcceptedValues<!#!>1</!#!>hkey_local_machine_software_policies_microsoft_windows_networkprovider_hardenedpaths<,>__*_sysvol<,>(^|_*,_*)RequireMutualAuthentication=1(_*,_*|)||(^|[_*,_*])RequireMutualAuthentication=(?!1(_*,_*|))||(^|_*,_*)RequireIntegrity=1(_*,_*|)||(^|_*,_*)RequireIntegrity=(?!1(_*,_*|))<,>false<,>pattern_match||pattern_match||pattern_match||pattern_match<,>false<#>2</#>hkey_local_machine_software_policies_microsoft_windows_networkprovider_hardenedpaths<,>__*_netlogon<,>(^|_*,_*)RequireMutualAuthentication=1(_*,_*|)||(^|[_*,_*])RequireMutualAuthentication=(?!1(_*,_*|))||(^|_*,_*)RequireIntegrity=1(_*,_*|)||(^|_*,_*)RequireIntegrity=(?!1(_*,_*|))<,>false<,>pattern_match||pattern_match||pattern_match||pattern_match<,>false<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_Win32_ComputerSystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareRegistryWithMultipleAcceptedValues_hkey_local_machine_system_currentcontrolset_policies_earlylaunch<,>driverloadpolicy<,>1||3||8<,>true<,>equals||equals||equals<,>false_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareRegistryWithMultipleAcceptedValues" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\policies\earlylaunch<,>driverloadpolicy<,>1||3||8<,>true<,>equals||equals||equals<,>false" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareRegistryWithMultipleAcceptedValues_hkey_local_machine_system_currentcontrolset_policies_earlylaunch<,>driverloadpolicy<,>1||3||8<,>true<,>equals||equals||equals<,>false_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_group_policy_{35378eac-683f-11d2-a89a-00c04fbbcfa2}<,>nogpolistchanges_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\group policy\{35378eac-683f-11d2-a89a-00c04fbbcfa2}<,>nogpolistchanges" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_windows_group_policy_{35378eac-683f-11d2-a89a-00c04fbbcfa2}<,>nogpolistchanges_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_power_powersettings_0e796bdb-100d-47d6-a2d5-f7d2daa51f51<,>dcsettingindex_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\power\powersettings\0e796bdb-100d-47d6-a2d5-f7d2daa51f51<,>dcsettingindex" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_power_powersettings_0e796bdb-100d-47d6-a2d5-f7d2daa51f51<,>dcsettingindex_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_power_powersettings_0e796bdb-100d-47d6-a2d5-f7d2daa51f51<,>acsettingindex_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\power\powersettings\0e796bdb-100d-47d6-a2d5-f7d2daa51f51<,>acsettingindex" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_power_powersettings_0e796bdb-100d-47d6-a2d5-f7d2daa51f51<,>acsettingindex_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareRegistryWithMultipleAcceptedValues_hkey_local_machine_software_policies_microsoft_windows_datacollection<,>allowtelemetry<,>0||1<,>false<,>equals||equals<,>false_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareRegistryWithMultipleAcceptedValues" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\datacollection<,>allowtelemetry<,>0||1<,>false<,>equals||equals<,>false" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareRegistryWithMultipleAcceptedValues_hkey_local_machine_software_policies_microsoft_windows_datacollection<,>allowtelemetry<,>0||1<,>false<,>equals||equals<,>false_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareRegistryValueOrNotExist_hkey_local_machine_software_policies_microsoft_windows_explorer<,>noheapterminationoncorruption<,>0_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareRegistryValueOrNotExist" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\explorer<,>noheapterminationoncorruption<,>0" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareRegistryValueOrNotExist_hkey_local_machine_software_policies_microsoft_windows_explorer<,>noheapterminationoncorruption<,>0_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareRegistryValueOrNotExist_hkey_local_machine_software_microsoft_windows_currentversion_policies_explorer<,>prexpsp2shellprotocolbehavior<,>0_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareRegistryValueOrNotExist" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer<,>prexpsp2shellprotocolbehavior<,>0" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareRegistryValueOrNotExist_hkey_local_machine_software_microsoft_windows_currentversion_policies_explorer<,>prexpsp2shellprotocolbehavior<,>0_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_policies_microsoft_internet_explorer_feeds<,>disableenclosuredownload_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\internet explorer\feeds<,>disableenclosuredownload" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_policies_microsoft_internet_explorer_feeds<,>disableenclosuredownload_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareRegistryValueOrNotExist_hkey_local_machine_software_policies_microsoft_windows_installer<,>safeforscripting<,>0_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareRegistryValueOrNotExist" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\installer<,>safeforscripting<,>0" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareRegistryValueOrNotExist_hkey_local_machine_software_policies_microsoft_windows_installer<,>safeforscripting<,>0_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>GetRegistryValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>refusepasswordchange_not_equal<#>1</#>equals_true<#>1</#>0_not_equal<#>1</#>equals_true<#>1</#>0_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>GetRegistryValue" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine\system\currentcontrolset\services\netlogon\parameters<,>refusepasswordchange" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "true<#>1</#>0" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "true<#>1</#>0" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>GetRegistryValue_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole||domainrole<,>5||4<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>refusepasswordchange_not_equal<#>1</#>equals_true<#>1</#>0_not_equal<#>1</#>equals_true<#>1</#>0_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>GetRegistryValue_GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion_winlogon<,>cachedlogonscount_not_equal<#>1</#>less_than_or_equal_true<#>1</#>4_not_equal<#>1</#>less_than_or_equal_true<#>1</#>4_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>GetRegistryValue" -ExecutionParamsString "GetWmiValue<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon<,>cachedlogonscount" -AssessorConditionsString "not equal<#>1</#>less than or equal" -AssessorValuesString "true<#>1</#>4" -McmConditionsString "not equal<#>1</#>less than or equal" -McmValuesString "true<#>1</#>4" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>GetRegistryValue_GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion_winlogon<,>cachedlogonscount_not_equal<#>1</#>less_than_or_equal_true<#>1</#>4_not_equal<#>1</#>less_than_or_equal_true<#>1</#>4_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>limitblankpassworduse_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa<,>limitblankpassworduse" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>limitblankpassworduse_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetTrusteeName<#>1</#>CompareToDynamicTrusteeName_^S-1-5-[0-9-]+-500<#>1</#>^S-1-5-[0-9-]+-500<,>domain<,>_Administrator_case_insensitive_not_equal<#>1</#>equals_Administrator<#>1</#>true_case_insensitive_not_equal<#>1</#>equals_Administrator<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetTrusteeName<#>1</#>CompareToDynamicTrusteeName" -ExecutionParamsString "^S-1-5-[0-9-]+-500$<#>1</#>^S-1-5-[0-9-]+-500$<,>domain<,>\Administrator" -AssessorConditionsString "case insensitive not equal<#>1</#>equals" -AssessorValuesString "Administrator<#>1</#>true" -McmConditionsString "case insensitive not equal<#>1</#>equals" -McmValuesString "Administrator<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetTrusteeName<#>1</#>CompareToDynamicTrusteeName_^S-1-5-[0-9-]+-500<#>1</#>^S-1-5-[0-9-]+-500<,>domain<,>_Administrator_case_insensitive_not_equal<#>1</#>equals_Administrator<#>1</#>true_case_insensitive_not_equal<#>1</#>equals_Administrator<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetTrusteeName<#>1</#>CompareToDynamicTrusteeName_^S-1-5-[0-9-]+-501<#>1</#>^S-1-5-[0-9-]+-501<,>domain<,>_Guest_case_insensitive_not_equal<#>1</#>equals_Guest<#>1</#>true_case_insensitive_not_equal<#>1</#>equals_Guest<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetTrusteeName<#>1</#>CompareToDynamicTrusteeName" -ExecutionParamsString "^S-1-5-[0-9-]+-501$<#>1</#>^S-1-5-[0-9-]+-501$<,>domain<,>\Guest" -AssessorConditionsString "case insensitive not equal<#>1</#>equals" -AssessorValuesString "Guest<#>1</#>true" -McmConditionsString "case insensitive not equal<#>1</#>equals" -McmValuesString "Guest<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetTrusteeName<#>1</#>CompareToDynamicTrusteeName_^S-1-5-[0-9-]+-501<#>1</#>^S-1-5-[0-9-]+-501<,>domain<,>_Guest_case_insensitive_not_equal<#>1</#>equals_Guest<#>1</#>true_case_insensitive_not_equal<#>1</#>equals_Guest<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>maximumpasswordage<#>1</#>hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>maximumpasswordage_less_than_or_equal<#>1</#>greater_than_30<#>1</#>0_less_than_or_equal<#>1</#>greater_than_30<#>1</#>0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters<,>maximumpasswordage<#>1</#>hkey_local_machine\system\currentcontrolset\services\netlogon\parameters<,>maximumpasswordage" -AssessorConditionsString "less than or equal<#>1</#>greater than" -AssessorValuesString "30<#>1</#>0" -McmConditionsString "less than or equal<#>1</#>greater than" -McmValuesString "30<#>1</#>0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>maximumpasswordage<#>1</#>hkey_local_machine_system_currentcontrolset_services_netlogon_parameters<,>maximumpasswordage_less_than_or_equal<#>1</#>greater_than_30<#>1</#>0_less_than_or_equal<#>1</#>greater_than_30<#>1</#>0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion_winlogon<,>scremoveoption<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion_winlogon<,>scremoveoption_equals<#>1</#>equals_1<#>1</#>2_equals<#>1</#>equals_1<#>1</#>2_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon<,>scremoveoption<#>1</#>hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon<,>scremoveoption" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "1<#>1</#>2" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "1<#>1</#>2" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_nt_currentversion_winlogon<,>scremoveoption<#>1</#>hkey_local_machine_software_microsoft_windows_nt_currentversion_winlogon<,>scremoveoption_equals<#>1</#>equals_1<#>1</#>2_equals<#>1</#>equals_1<#>1</#>2_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>restrictanonymoussam_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa<,>restrictanonymoussam" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>restrictanonymoussam_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>everyoneincludesanonymous_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa<,>everyoneincludesanonymous" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>everyoneincludesanonymous_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>usemachineid_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa<,>usemachineid" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>usemachineid_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa_msv1_0<,>allownullsessionfallback_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0<,>allownullsessionfallback" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa_msv1_0<,>allownullsessionfallback_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa_pku2u<,>allowonlineid_equals_0_equals_0_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa\pku2u<,>allowonlineid" -AssessorConditionsString "equals" -AssessorValuesString "0" -McmConditionsString "equals" -McmValuesString "0" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa_pku2u<,>allowonlineid_equals_0_equals_0_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>lmcompatibilitylevel_equals_5_equals_5_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa<,>lmcompatibilitylevel" -AssessorConditionsString "equals" -AssessorValuesString "5" -McmConditionsString "equals" -McmValuesString "5" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_lsa<,>lmcompatibilitylevel_equals_5_equals_5_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_ldap<,>ldapclientintegrity_greater_than_or_equal_1_greater_than_or_equal_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\ldap<,>ldapclientintegrity" -AssessorConditionsString "greater than or equal" -AssessorValuesString "1" -McmConditionsString "greater than or equal" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_services_ldap<,>ldapclientintegrity_greater_than_or_equal_1_greater_than_or_equal_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckBitwiseAndValue<#>1</#>CheckBitwiseAndValue_hkey_local_machine_system_currentcontrolset_control_lsa_msv1_0<,>ntlmminclientsec<,>524288<#>1</#>hkey_local_machine_system_currentcontrolset_control_lsa_msv1_0<,>ntlmminclientsec<,>536870912_equals<#>1</#>equals_1<#>1</#>1_equals<#>1</#>equals_1<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckBitwiseAndValue<#>1</#>CheckBitwiseAndValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0<,>ntlmminclientsec<,>524288<#>1</#>hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0<,>ntlmminclientsec<,>536870912" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "1<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "1<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckBitwiseAndValue<#>1</#>CheckBitwiseAndValue_hkey_local_machine_system_currentcontrolset_control_lsa_msv1_0<,>ntlmminclientsec<,>524288<#>1</#>hkey_local_machine_system_currentcontrolset_control_lsa_msv1_0<,>ntlmminclientsec<,>536870912_equals<#>1</#>equals_1<#>1</#>1_equals<#>1</#>equals_1<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckBitwiseAndValue<#>1</#>CheckBitwiseAndValue_hkey_local_machine_system_currentcontrolset_control_lsa_msv1_0<,>ntlmminserversec<,>524288<#>1</#>hkey_local_machine_system_currentcontrolset_control_lsa_msv1_0<,>ntlmminserversec<,>536870912_equals<#>1</#>equals_1<#>1</#>1_equals<#>1</#>equals_1<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckBitwiseAndValue<#>1</#>CheckBitwiseAndValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0<,>ntlmminserversec<,>524288<#>1</#>hkey_local_machine\system\currentcontrolset\control\lsa\msv1_0<,>ntlmminserversec<,>536870912" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "1<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "1<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckBitwiseAndValue<#>1</#>CheckBitwiseAndValue_hkey_local_machine_system_currentcontrolset_control_lsa_msv1_0<,>ntlmminserversec<,>524288<#>1</#>hkey_local_machine_system_currentcontrolset_control_lsa_msv1_0<,>ntlmminserversec<,>536870912_equals<#>1</#>equals_1<#>1</#>1_equals<#>1</#>equals_1<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_session_manager<,>protectionmode_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\control\session manager<,>protectionmode" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_system_currentcontrolset_control_session_manager<,>protectionmode_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>disableautomaticrestartsignon_equals_1_equals_1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>disableautomaticrestartsignon" -AssessorConditionsString "equals" -AssessorValuesString "1" -McmConditionsString "equals" -McmValuesString "1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>disableautomaticrestartsignon_equals_1_equals_1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_filesystem_FROM_win32_logicaldisk_WHERE_drivetype=3_AND_filesystem!=_NTFS__AND_filesystem!=_ReFS_" -CollectedDataResult (Get-WmiObjectCount -Namespace "root\cimv2" -Query "SELECT filesystem FROM win32_logicaldisk WHERE drivetype=3 AND filesystem!='NTFS' AND filesystem!='ReFS'" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_filesystem_FROM_win32_logicaldisk_WHERE_drivetype=3_AND_filesystem!=_NTFS__AND_filesystem!=_ReFS_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_fax_" -CollectedDataResult (Get-WmiObjectCount -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='fax'" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_fax_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_fax__startmode" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='fax'" -OutputFieldName "startmode" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_fax__startmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_ftpsvc_" -CollectedDataResult (Get-WmiObjectCount -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='ftpsvc'" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_ftpsvc_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_ftpsvc__startmode" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='ftpsvc'" -OutputFieldName "startmode" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_ftpsvc__startmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_pnrpsvc_" -CollectedDataResult (Get-WmiObjectCount -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='pnrpsvc'" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_pnrpsvc_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_pnrpsvc__startmode" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='pnrpsvc'" -OutputFieldName "startmode" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_pnrpsvc__startmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_simptcp_" -CollectedDataResult (Get-WmiObjectCount -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='simptcp'" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_simptcp_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_simptcp__startmode" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='simptcp'" -OutputFieldName "startmode" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_simptcp__startmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_InstallState_FROM_Win32_OptionalFeature_WHERE_name=_telnetclient_" -CollectedDataResult (Get-WmiObjectCount -Namespace "root\cimv2" -Query "SELECT InstallState FROM Win32_OptionalFeature WHERE name='telnetclient'" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_InstallState_FROM_Win32_OptionalFeature_WHERE_name=_telnetclient_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_InstallState_FROM_Win32_OptionalFeature_WHERE_name=_telnetclient__installstate_1_none" -CollectedDataResult (Compare-AllWmiObjects -Namespace "root\cimv2" -Query "SELECT InstallState FROM Win32_OptionalFeature WHERE name='telnetclient'" -OutputFieldName "installstate"  -ExpectedValue "1" -allOrNone "none" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_InstallState_FROM_Win32_OptionalFeature_WHERE_name=_telnetclient__installstate_1_none", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_id_FROM_win32_serverfeature_id_58_none" -CollectedDataResult (Compare-AllWmiObjects -Namespace "root\cimv2" -Query "SELECT id FROM win32_serverfeature" -OutputFieldName "id"  -ExpectedValue "58" -allOrNone "none" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_id_FROM_win32_serverfeature_id_58_none", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "LockoutDuration||LockoutDuration||LockoutDuration" -CollectedDataResult (Compare-LockoutValues -propertiesToCheckString "LockoutDuration||LockoutDuration||LockoutDuration" -conditionsString "less than or equal||equals||greater than or equal" -expectedValuesString "0||4294967295||900" ) } catch { New-Object CollectedBaselineValue(-1,"LockoutDuration||LockoutDuration||LockoutDuration", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>not_equal_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString ".*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>\<,>null<,>^(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\application<,>file<,>\<#>1</#>hkey_local_machine\system\currentcontrolset\services\eventlog\application<,>file" -AssessorConditionsString "pattern match<#>1</#>pattern match" -AssessorValuesString ".*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$" -McmConditionsString "equals<#>1</#>not equal" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>not_equal_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>equals_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString ".*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine\software\microsoft\windows nt\currentversion<,>systemroot<,>^%.*%(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\application<,>file<,>\<#>1</#>hkey_local_machine\system\currentcontrolset\services\eventlog\application<,>file" -AssessorConditionsString "pattern match<#>1</#>pattern match" -AssessorValuesString ".*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_application<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>equals_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>not_equal_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString ".*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>\<,>null<,>^(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\security<,>file<,>\<#>1</#>hkey_local_machine\system\currentcontrolset\services\eventlog\security<,>file" -AssessorConditionsString "pattern match<#>1</#>pattern match" -AssessorValuesString ".*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$" -McmConditionsString "equals<#>1</#>not equal" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>not_equal_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>equals_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString ".*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine\software\microsoft\windows nt\currentversion<,>systemroot<,>^%.*%(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\security<,>file<,>\<#>1</#>hkey_local_machine\system\currentcontrolset\services\eventlog\security<,>file" -AssessorConditionsString "pattern match<#>1</#>pattern match" -AssessorValuesString ".*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_security<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>equals_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>not_equal_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString ".*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>\<,>null<,>^(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\system<,>file<,>\<#>1</#>hkey_local_machine\system\currentcontrolset\services\eventlog\system<,>file" -AssessorConditionsString "pattern match<#>1</#>pattern match" -AssessorValuesString ".*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$" -McmConditionsString "equals<#>1</#>not equal" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>_<,>null<,>^(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>not_equal_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>equals_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString ".*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine\software\microsoft\windows nt\currentversion<,>systemroot<,>^%.*%(.*)$<,>hkey_local_machine\system\currentcontrolset\services\eventlog\system<,>file<,>\<#>1</#>hkey_local_machine\system\currentcontrolset\services\eventlog\system<,>file" -AssessorConditionsString "pattern match<#>1</#>pattern match" -AssessorValuesString ".*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*$" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckFileEffectiveRight<#>1</#>CheckRegistryValueByPattern_.*<,>S-1-5-80-880578595-1860270145-482643319-2788375705-1540778122||S-1-5-18||S-1-5-32-544||S-1-5-19<,>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>systemroot<,>^%.*%(.*)<,>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file<,>_<#>1</#>hkey_local_machine_system_currentcontrolset_services_eventlog_system<,>file_pattern_match<#>1</#>pattern_match_.*<#>1</#>^%[Ss][Yy][Ss][Tt][Ee][Mm][Rr][Oo][Oo][Tt]%.*_equals<#>1</#>equals_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce923f-69ae-11d9-bed3-505054503030<#>1</#>0cce923f-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce923f-69ae-11d9-bed3-505054503030<#>1</#>0cce923f-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce923f-69ae-11d9-bed3-505054503030<#>1</#>0cce923f-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce923f-69ae-11d9-bed3-505054503030<#>1</#>0cce923f-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce923f-69ae-11d9-bed3-505054503030<#>1</#>0cce923f-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce923f-69ae-11d9-bed3-505054503030<#>1</#>0cce923f-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce923a-69ae-11d9-bed3-505054503030<#>1</#>0cce923a-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce923a-69ae-11d9-bed3-505054503030<#>1</#>0cce923a-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce923a-69ae-11d9-bed3-505054503030<#>1</#>0cce923a-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9237-69ae-11d9-bed3-505054503030<#>1</#>0cce9237-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9237-69ae-11d9-bed3-505054503030<#>1</#>0cce9237-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9237-69ae-11d9-bed3-505054503030<#>1</#>0cce9237-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9235-69ae-11d9-bed3-505054503030<#>1</#>0cce9235-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9235-69ae-11d9-bed3-505054503030<#>1</#>0cce9235-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9235-69ae-11d9-bed3-505054503030<#>1</#>0cce9235-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9235-69ae-11d9-bed3-505054503030<#>1</#>0cce9235-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9235-69ae-11d9-bed3-505054503030<#>1</#>0cce9235-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9235-69ae-11d9-bed3-505054503030<#>1</#>0cce9235-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_FAILURE<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce922b-69ae-11d9-bed3-505054503030<#>1</#>0cce922b-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce922b-69ae-11d9-bed3-505054503030<#>1</#>0cce922b-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce922b-69ae-11d9-bed3-505054503030<#>1</#>0cce922b-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9216-69ae-11d9-bed3-505054503030<#>1</#>0cce9216-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue" -ExecutionParamsString "0cce9216-69ae-11d9-bed3-505054503030<#>1</#>0cce9216-69ae-11d9-bed3-505054503030" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetAuditEventPolicySubcategoriesValue<#>1</#>GetAuditEventPolicySubcategoriesValue_0cce9216-69ae-11d9-bed3-505054503030<#>1</#>0cce9216-69ae-11d9-bed3-505054503030_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_equals<#>1</#>equals_AUDIT_SUCCESS<#>1</#>AUDIT_SUCCESS_FAILURE_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\policies\earlylaunch\driverloadpolicy\1||3||8\true\equals||equals||equals\false" -CollectedDataResult (Compare-RegistryWithMultipleAcceptedValues -RegistryLocation "hkey_local_machine\system\currentcontrolset\policies\earlylaunch" -RegistryKey "driverloadpolicy" -AcceptedValuesString "1||3||8" -RegistryMayNotExist "true" -CompareMethods "equals||equals||equals" -AllValueMustMatch "false" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\policies\earlylaunch\driverloadpolicy\1||3||8\true\equals||equals||equals\false", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\prexpsp2shellprotocolbehavior\0_May_Not_Exist" -CollectedDataResult (Compare-RegistryValueOrNotExist -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer" -RegistryKey "prexpsp2shellprotocolbehavior" -ExpectedValue "0" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\explorer\prexpsp2shellprotocolbehavior\0_May_Not_Exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\internet explorer\feeds\allowbasicauthinclear\0_May_Not_Exist" -CollectedDataResult (Compare-RegistryValueOrNotExist -RegistryLocation "hkey_local_machine\software\policies\microsoft\internet explorer\feeds" -RegistryKey "allowbasicauthinclear" -ExpectedValue "0" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\internet explorer\feeds\allowbasicauthinclear\0_May_Not_Exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\installer\safeforscripting\0_May_Not_Exist" -CollectedDataResult (Compare-RegistryValueOrNotExist -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\installer" -RegistryKey "safeforscripting" -ExpectedValue "0" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\installer\safeforscripting\0_May_Not_Exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria_SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern_match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<#>2</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern_match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern_match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<#>2</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern_match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern_match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<#>2</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern_match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<#>2</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<#>2</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<#>2</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>true<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria<#>1</#>SubCriteria_SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern_match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<#>2</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern_match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern_match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<#>2</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern_match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern_match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<#>2</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<#>3</#>CheckSpecificFileEffectiveRight<!#!>2</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>3</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>2</!#!>equals<#>3</#>equals<#>3</#>pattern_match<!#!>2</!#!>S-1-5-18<#>3</#>S-1-5-32-544<#>3</#>.*<!#!>2</!#!>equals<#>3</#>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<#>3</#>true<!#!>2</!#!>AND<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<!#!>1</!#!>OR<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "senetworklogonright_pattern_match_.*_0_Authenticated_Users__ENTERPRISE_DOMAIN_CONTROLLERS__Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'senetworklogonright'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Authenticated Users||ENTERPRISE DOMAIN CONTROLLERS||Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"senetworklogonright_pattern_match_.*_0_Authenticated_Users__ENTERPRISE_DOMAIN_CONTROLLERS__Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "semachineaccountprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'semachineaccountprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"semachineaccountprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "seremoteinteractivelogonright_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'seremoteinteractivelogonright'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"seremoteinteractivelogonright_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "sedenynetworklogonright_equals_Guests_1_" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'sedenynetworklogonright'  -operations 'equals' -SidRegularExpressions 'Guests' -ShouldHavePrivilege '1' -UserFiltersString '' ) } catch { New-Object CollectedBaselineValue(-1,"sedenynetworklogonright_equals_Guests_1_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "sedenybatchLogonright_equals_Guests_1_" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'sedenybatchLogonright'  -operations 'equals' -SidRegularExpressions 'Guests' -ShouldHavePrivilege '1' -UserFiltersString '' ) } catch { New-Object CollectedBaselineValue(-1,"sedenybatchLogonright_equals_Guests_1_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "sedenyservicelogonright_pattern_match_.*_0_" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'sedenyservicelogonright'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString '' ) } catch { New-Object CollectedBaselineValue(-1,"sedenyservicelogonright_pattern_match_.*_0_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "sedenyinteractivelogonright_equals_Guests_1_" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'sedenyinteractivelogonright'  -operations 'equals' -SidRegularExpressions 'Guests' -ShouldHavePrivilege '1' -UserFiltersString '' ) } catch { New-Object CollectedBaselineValue(-1,"sedenyinteractivelogonright_equals_Guests_1_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "sedenyremoteInteractivelogonright_equals_Guests_1_" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'sedenyremoteInteractivelogonright'  -operations 'equals' -SidRegularExpressions 'Guests' -ShouldHavePrivilege '1' -UserFiltersString '' ) } catch { New-Object CollectedBaselineValue(-1,"sedenyremoteInteractivelogonright_equals_Guests_1_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "seenabledelegationprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'seenabledelegationprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"seenabledelegationprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole_equals_3_equals_3_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue" -ExecutionParamsString "root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole" -AssessorConditionsString "equals" -AssessorValuesString "3" -McmConditionsString "equals" -McmValuesString "3" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole_equals_3_equals_3_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "senetworklogonright_pattern_match_.*_0_Administrators__Authenticated_Users" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'senetworklogonright'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators||Authenticated Users' ) } catch { New-Object CollectedBaselineValue(-1,"senetworklogonright_pattern_match_.*_0_Administrators__Authenticated_Users", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "2<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "2<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria<#>1</#>SubCriteria_sedenynetworklogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenynetworklogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>1</#>sedenynetworklogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>sedenynetworklogonright<,>equals||equals<,>Local_account||NT_AUTHORITY_Local_account<,>1<,><#>2</#>sedenynetworklogonright<,>equals||equals<,>Local_account_and_member_of_Administrators_group||NT_AUTHORITY_Local_account_and_member_of_Administrators_group<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>true<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "sedenynetworklogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenynetworklogonright<,>pattern match||equals<,>^(.*\\)?Domain Admins$||Domain Admins<,>1<,><#>1</#>sedenynetworklogonright<,>pattern match||equals<,>^(.*\\)?Enterprise Admins$||Enterprise Admins<,>1<,><#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>sedenynetworklogonright<,>equals||equals<,>Local account||NT AUTHORITY\Local account<,>1<,><#>2</#>sedenynetworklogonright<,>equals||equals<,>Local account and member of Administrators group||NT AUTHORITY\Local account and member of Administrators group<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>GetWmiValue<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "1<#>1</#>1<#>1</#>1<#>1</#>true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -McmValuesString "1<#>1</#>1<#>1</#>1<#>1</#>true<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria<#>1</#>SubCriteria_sedenynetworklogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenynetworklogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>1</#>sedenynetworklogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>sedenynetworklogonright<,>equals||equals<,>Local_account||NT_AUTHORITY_Local_account<,>1<,><#>2</#>sedenynetworklogonright<,>equals||equals<,>Local_account_and_member_of_Administrators_group||NT_AUTHORITY_Local_account_and_member_of_Administrators_group<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>true<#>1</#>true_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>true<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>1</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<#>1</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "2<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "2<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>1</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria_sedenybatchLogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenybatchLogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>1</#>sedenybatchLogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>1</#>GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>true_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria" -ExecutionParamsString "sedenybatchLogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenybatchLogonright<,>pattern match||equals<,>^(.*\\)?Domain Admins$||Domain Admins<,>1<,><#>1</#>sedenybatchLogonright<,>pattern match||equals<,>^(.*\\)?Enterprise Admins$||Enterprise Admins<,>1<,><#>1</#>GetWmiValue<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "1<#>1</#>1<#>1</#>1<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -McmValuesString "1<#>1</#>1<#>1</#>1<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria_sedenybatchLogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenybatchLogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>1</#>sedenybatchLogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>1</#>GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>true_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>1</#>sedenyservicelogonright<,>pattern_match<,>.*<,>0<,>_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<#>1</#>sedenyservicelogonright<,>pattern match<,>.*<,>0<,>" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "2<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "2<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>1</#>sedenyservicelogonright<,>pattern_match<,>.*<,>0<,>_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria_sedenyservicelogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>1</#>sedenyservicelogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>1</#>GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria" -ExecutionParamsString "sedenyservicelogonright<,>pattern match||equals<,>^(.*\\)?Domain Admins$||Domain Admins<,>1<,><#>1</#>sedenyservicelogonright<,>pattern match||equals<,>^(.*\\)?Enterprise Admins$||Enterprise Admins<,>1<,><#>1</#>GetWmiValue<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "1<#>1</#>1<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals" -McmValuesString "1<#>1</#>1<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria_sedenyservicelogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>1</#>sedenyservicelogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>1</#>GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>true_equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "2<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "2<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria_sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyinteractivelogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>1</#>sedenyinteractivelogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>1</#>GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>true_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria" -ExecutionParamsString "sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyinteractivelogonright<,>pattern match||equals<,>^(.*\\)?Domain Admins$||Domain Admins<,>1<,><#>1</#>sedenyinteractivelogonright<,>pattern match||equals<,>^(.*\\)?Enterprise Admins$||Enterprise Admins<,>1<,><#>1</#>GetWmiValue<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "1<#>1</#>1<#>1</#>1<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -McmValuesString "1<#>1</#>1<#>1</#>1<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria_sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyinteractivelogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>1</#>sedenyinteractivelogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>1</#>GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>true_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>1</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<#>1</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "2<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "2<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<#>1</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_2<#>1</#>1_equals<#>1</#>equals_2<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria_sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>equals||equals<,>Local_account||NT_AUTHORITY_Local_account<,>1<,><#>1</#>GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>true_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria" -ExecutionParamsString "sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>pattern match||equals<,>^(.*\\)?Domain Admins$||Domain Admins<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>pattern match||equals<,>^(.*\\)?Enterprise Admins$||Enterprise Admins<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>equals||equals<,>Local account||NT AUTHORITY\Local account<,>1<,><#>1</#>GetWmiValue<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "1<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>true" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -McmValuesString "1<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>SubCriteria_sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>pattern_match||equals<,>^(.*__)?Domain_Admins||Domain_Admins<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>pattern_match||equals<,>^(.*__)?Enterprise_Admins||Enterprise_Admins<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>equals||equals<,>Local_account||NT_AUTHORITY_Local_account<,>1<,><#>1</#>GetWmiValue<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>domainrole<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>equals<!#!>1</!#!>3<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>true_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "trustee_name_S-1-5-[0-9-]+-500_" -CollectedDataResult (Get-TrusteeName -SidRegulaRExpression '^S-1-5-[0-9-]+-500$' ) } catch { New-Object CollectedBaselineValue(-1,"trustee_name_S-1-5-[0-9-]+-500_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "trustee_name_S-1-5-[0-9-]+-500__domain__Administrator" -CollectedDataResult (Compare-ToDynamicTrusteeName -SidRegulaRExpression '^S-1-5-[0-9-]+-500$' -DynamicExpectedValueField 'domain' -FixedExpectedValue '\Administrator' ) } catch { New-Object CollectedBaselineValue(-1,"trustee_name_S-1-5-[0-9-]+-500__domain__Administrator", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "seinteractivelogonright_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'seinteractivelogonright'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"seinteractivelogonright_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "secreateglobalprivilege_pattern_match_.*_0_Administrators__LOCAL_SERVICE__NETWORK_SERVICE__SERVICE" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'secreateglobalprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators||LOCAL SERVICE||NETWORK SERVICE||SERVICE' ) } catch { New-Object CollectedBaselineValue(-1,"secreateglobalprivilege_pattern_match_.*_0_Administrators__LOCAL_SERVICE__NETWORK_SERVICE__SERVICE", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>GetWmiValue_secreatesymboliclinkprivilege<,>pattern_match<,>.*<,>0<,>Administrators||NT_VIRTUAL_MACHINE_Virtual_Machines<#>1</#>root_cimv2<,>SELECT_name_FROM_Win32_ServerFeature_WHERE_ID_=_20<,>name_equals<#>1</#>equals_1<#>1</#>Hyper-V_equals<#>1</#>equals_1<#>1</#>Hyper-V_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckUsersPrivilegeBySidAndPrivilege<#>1</#>GetWmiValue" -ExecutionParamsString "secreatesymboliclinkprivilege<,>pattern match<,>.*<,>0<,>Administrators||NT VIRTUAL MACHINE\Virtual Machines<#>1</#>root\cimv2<,>SELECT name FROM Win32_ServerFeature WHERE ID = 20<,>name" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "1<#>1</#>Hyper-V" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "1<#>1</#>Hyper-V" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckUsersPrivilegeBySidAndPrivilege<#>1</#>GetWmiValue_secreatesymboliclinkprivilege<,>pattern_match<,>.*<,>0<,>Administrators||NT_VIRTUAL_MACHINE_Virtual_Machines<#>1</#>root_cimv2<,>SELECT_name_FROM_Win32_ServerFeature_WHERE_ID_=_20<,>name_equals<#>1</#>equals_1<#>1</#>Hyper-V_equals<#>1</#>equals_1<#>1</#>Hyper-V_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "seauditprivilege_pattern_match_.*_0_LOCAL_SERVICE__NETWORK_SERVICE" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'seauditprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'LOCAL SERVICE||NETWORK SERVICE' ) } catch { New-Object CollectedBaselineValue(-1,"seauditprivilege_pattern_match_.*_0_LOCAL_SERVICE__NETWORK_SERVICE", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "seimpersonateprivilege_pattern_match_.*_0_Administrators__LOCAL_SERVICE__NETWORK_SERVICE__SERVICE" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'seimpersonateprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators||LOCAL SERVICE||NETWORK SERVICE||SERVICE' ) } catch { New-Object CollectedBaselineValue(-1,"seimpersonateprivilege_pattern_match_.*_0_Administrators__LOCAL_SERVICE__NETWORK_SERVICE__SERVICE", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "seincreasebasepriorityprivilege_pattern_match_.*_0_Administrators" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'seincreasebasepriorityprivilege'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators' ) } catch { New-Object CollectedBaselineValue(-1,"seincreasebasepriorityprivilege_pattern_match_.*_0_Administrators", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_CompareAllWmiObjects<!#!>1</!#!>root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__SMB1Protocol_<,>installstate<,>2<,>all<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>GetRegistryValue<!#!>1</!#!>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentversion<!#!>1</!#!>equals<!#!>1</!#!>6.3<!#!>1</!#!>equals<!#!>1</!#!>6.3<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "CompareAllWmiObjects<!#!>1</!#!>root\cimv2<,>SELECT installstate FROM win32_optionalfeature WHERE name = 'SMB1Protocol'<,>installstate<,>2<,>all<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>GetRegistryValue<!#!>1</!#!>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentversion<!#!>1</!#!>equals<!#!>1</!#!>6.3<!#!>1</!#!>equals<!#!>1</!#!>6.3<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_CompareAllWmiObjects<!#!>1</!#!>root_cimv2<,>SELECT_installstate_FROM_win32_optionalfeature_WHERE_name_=__SMB1Protocol_<,>installstate<,>2<,>all<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>GetRegistryValue<!#!>1</!#!>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentversion<!#!>1</!#!>equals<!#!>1</!#!>6.3<!#!>1</!#!>equals<!#!>1</!#!>6.3<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_GetRegistryValue<!#!>1</!#!>hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>smb1<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>GetRegistryValue<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>hkey_local_machine_system_currentcontrolset_services_mrxsmb10<,>start<#>2</#>hkey_local_machine_system_currentcontrolset_services_lanmanworkstation<,>dependonservice<!#!>1</!#!>equals<#>2</#>pattern_match<!#!>1</!#!>4<#>2</#>^[Mm][Rr][Xx][Ss][Mm][Bb]10<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>4<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "GetRegistryValue<!#!>1</!#!>hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters<,>smb1<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>GetRegistryValue<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>hkey_local_machine\system\currentcontrolset\services\mrxsmb10<,>start<#>2</#>hkey_local_machine\system\currentcontrolset\services\lanmanworkstation<,>dependonservice<!#!>1</!#!>equals<#>2</#>pattern match<!#!>1</!#!>4<#>2</#>^[Mm][Rr][Xx][Ss][Mm][Bb]10$<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>4<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_GetRegistryValue<!#!>1</!#!>hkey_local_machine_system_currentcontrolset_services_lanmanserver_parameters<,>smb1<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>equals<!#!>1</!#!>0<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>GetRegistryValue<#>2</#>CheckRegistryValueByPattern<!#!>1</!#!>hkey_local_machine_system_currentcontrolset_services_mrxsmb10<,>start<#>2</#>hkey_local_machine_system_currentcontrolset_services_lanmanworkstation<,>dependonservice<!#!>1</!#!>equals<#>2</#>pattern_match<!#!>1</!#!>4<#>2</#>^[Mm][Rr][Xx][Ss][Mm][Bb]10<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>4<#>2</#>1<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria_GetRegistryValue<!#!>1</!#!>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentversion<!#!>1</!#!>equals<!#!>1</!#!>6.3<!#!>1</!#!>equals<!#!>1</!#!>6.3<!#!>1</!#!>AND<!#!>1</!#!>2_not_equal_true_not_equal_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria" -ExecutionParamsString "GetRegistryValue<!#!>1</!#!>hkey_local_machine\software\microsoft\windows nt\currentversion<,>currentversion<!#!>1</!#!>equals<!#!>1</!#!>6.3<!#!>1</!#!>equals<!#!>1</!#!>6.3<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "not equal" -AssessorValuesString "true" -McmConditionsString "not equal" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria_GetRegistryValue<!#!>1</!#!>hkey_local_machine_software_microsoft_windows_nt_currentversion<,>currentversion<!#!>1</!#!>equals<!#!>1</!#!>6.3<!#!>1</!#!>equals<!#!>1</!#!>6.3<!#!>1</!#!>AND<!#!>1</!#!>2_not_equal_true_not_equal_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>CheckRegistryValueByPattern_hkey_local_machine_system_currentcontrolset_services_mrxsmb10<,>start<#>1</#>hkey_local_machine_system_currentcontrolset_services_lanmanworkstation<,>dependonservice_equals<#>1</#>pattern_match_4<#>1</#>^[Mm][Rr][Xx][Ss][Mm][Bb]10_equals<#>1</#>equals_4<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>CheckRegistryValueByPattern" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\mrxsmb10<,>start<#>1</#>hkey_local_machine\system\currentcontrolset\services\lanmanworkstation<,>dependonservice" -AssessorConditionsString "equals<#>1</#>pattern match" -AssessorValuesString "4<#>1</#>^[Mm][Rr][Xx][Ss][Mm][Bb]10$" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "4<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>CheckRegistryValueByPattern_hkey_local_machine_system_currentcontrolset_services_mrxsmb10<,>start<#>1</#>hkey_local_machine_system_currentcontrolset_services_lanmanworkstation<,>dependonservice_equals<#>1</#>pattern_match_4<#>1</#>^[Mm][Rr][Xx][Ss][Mm][Bb]10_equals<#>1</#>equals_4<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CompareAllWmiObjects_root_cimv2<,>SELECT_id_FROM_win32_serverfeature<,>id<,>411<,>none_equals_true_equals_true_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CompareAllWmiObjects" -ExecutionParamsString "root\cimv2<,>SELECT id FROM win32_serverfeature<,>id<,>411<,>none" -AssessorConditionsString "equals" -AssessorValuesString "true" -McmConditionsString "equals" -McmValuesString "true" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CompareAllWmiObjects_root_cimv2<,>SELECT_id_FROM_win32_serverfeature<,>id<,>411<,>none_equals_true_equals_true_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_rsop_computer_SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxServiceAge__setting" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\rsop\computer" -Query "SELECT setting FROM RSOP_SecuritySettingNumeric WHERE KeyName='MaxServiceAge'" -OutputFieldName "setting" ) } catch { New-Object CollectedBaselineValue(-1,"root_rsop_computer_SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxServiceAge__setting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_rsop_computer_SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxTicketAge__setting" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\rsop\computer" -Query "SELECT setting FROM RSOP_SecuritySettingNumeric WHERE KeyName='MaxTicketAge'" -OutputFieldName "setting" ) } catch { New-Object CollectedBaselineValue(-1,"root_rsop_computer_SELECT_setting_FROM_RSOP_SecuritySettingNumeric_WHERE_KeyName=_MaxTicketAge__setting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern_match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern_match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>database log files path<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern_match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>database_log_files_path<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern_match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern_match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern_match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>^(.+)\\<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa database file<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern_match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>^(.+)__<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_database_file<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern_match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria_CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern_match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern_match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria" -ExecutionParamsString "CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>\<,>null<,>null<,>hkey_local_machine\system\currentcontrolset\services\ntds\parameters<,>dsa working directory<,>\<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria_CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern_match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<#>2</#>CheckSpecificFileEffectiveRight<!#!>1</!#!>S-1-5-18<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>S-1-5-32-544<,>null<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true||true<#>2</#>.*<,>S-1-5-32-544||S-1-5-18<,>_<,>null<,>null<,>hkey_local_machine_system_currentcontrolset_services_ntds_parameters<,>dsa_working_directory<,>_<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||standard_synchronize||generic_read||generic_write||generic_execute||file_read_data||file_write_data||file_append_data||file_read_ea||file_write_ea||file_execute||file_delete_child||file_read_attributes||file_write_attributes<,>false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false||false<!#!>1</!#!>equals<#>2</#>equals<#>2</#>pattern_match<!#!>1</!#!>S-1-5-18<#>2</#>S-1-5-32-544<#>2</#>.*<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key ".*_S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464_hkey_local_machine_software_microsoft_windows_nt_currentversion_systemroot_null_hkey_local_machine_software_microsoft_windows_nt_currentversion_systemroot__System32_Eventvwr.exe_standard_delete__standard_write_dac__standard_write_owner__generic_write__file_write_data__file_append_data__file_write_ea__file_delete_child__file_write_attributes_false__false__false__false__false__false__false__false__false" -CollectedDataResult (Check-SpecificFileEffectiveRight -SidRegularExpression ".*" -UserFiltersString "S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464" -systemRootRegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion" -systemRootRegistryName "systemroot" -pathToFileRegexCapturePattern "null" -pathToFileRegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion" -pathToFileRegistryName "systemroot" -pathFromSystemRoot "\System32\Eventvwr.exe" -rightsString "standard_delete||standard_write_dac||standard_write_owner||generic_write||file_write_data||file_append_data||file_write_ea||file_delete_child||file_write_attributes" -rightsExpectedStatusString "false||false||false||false||false||false||false||false||false" ) } catch { New-Object CollectedBaselineValue(-1,".*_S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464_hkey_local_machine_software_microsoft_windows_nt_currentversion_systemroot_null_hkey_local_machine_software_microsoft_windows_nt_currentversion_systemroot__System32_Eventvwr.exe_standard_delete__standard_write_dac__standard_write_owner__generic_write__file_write_data__file_append_data__file_write_ea__file_delete_child__file_write_attributes_false__false__false__false__false__false__false__false__false", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\force_tunneling" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition" -RegistryKey "force_tunneling"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\force_tunneling", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\6to4_state" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition" -RegistryKey "6to4_state"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\6to4_state", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\iphttps\iphttpsinterface\iphttps_clienturl_Pattern_match_^.+$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\iphttps\iphttpsinterface" -RegistryKey "iphttps_clienturl" -expectedValue "^.+$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\iphttps\iphttpsinterface\iphttps_clienturl_Pattern_match_^.+$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\iphttps\iphttpsinterface\iphttps_clientstate" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\iphttps\iphttpsinterface" -RegistryKey "iphttps_clientstate"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\iphttps\iphttpsinterface\iphttps_clientstate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\isatap_state" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition" -RegistryKey "isatap_state"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\isatap_state", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\teredo_state" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition" -RegistryKey "teredo_state"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\tcpip\v6transition\teredo_state", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\enableipautoconfigurationlimits" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters" -RegistryKey "enableipautoconfigurationlimits"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\enableipautoconfigurationlimits", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\printers\donotinstallcompatibledriverfromwindowsupdate" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\printers" -RegistryKey "donotinstallcompatibledriverfromwindowsupdate"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\printers\donotinstallcompatibledriverfromwindowsupdate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\servicing\usewindowsupdate" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\servicing" -RegistryKey "usewindowsupdate"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\servicing\usewindowsupdate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\settings\disablesendgenericdrivernotfoundtower" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\settings" -RegistryKey "disablesendgenericdrivernotfoundtower"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\settings\disablesendgenericdrivernotfoundtower", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\settings\disablesystemrestore" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\settings" -RegistryKey "disablesystemrestore"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\settings\disablesystemrestore", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\settings\disablesendrequestadditionalsoftwaretower" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\deviceinstall\settings" -RegistryKey "disablesendrequestadditionalsoftwaretower"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\deviceinstall\settings\disablesendrequestadditionalsoftwaretower", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\driversearching\searchorderconfig" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\driversearching" -RegistryKey "searchorderconfig"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\driversearching\searchorderconfig", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\driversearching\driverserverselection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\driversearching" -RegistryKey "driverserverselection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\driversearching\driverserverselection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\driversearching\dontpromptforwindowsupdate" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\driversearching" -RegistryKey "dontpromptforwindowsupdate"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\driversearching\dontpromptforwindowsupdate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>disablebkgndgrouppolicy<#>1</#>hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>disablebkgndgrouppolicy_equals<#>1</#>equals_null<#>1</#>0_equals<#>1</#>equals_null<#>1</#>0_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>GetRegistryValue" -ExecutionParamsString "hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>disablebkgndgrouppolicy<#>1</#>hkey_local_machine\software\microsoft\windows\currentversion\policies\system<,>disablebkgndgrouppolicy" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "null<#>1</#>0" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "null<#>1</#>0" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>GetRegistryValue_hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>disablebkgndgrouppolicy<#>1</#>hkey_local_machine_software_microsoft_windows_currentversion_policies_system<,>disablebkgndgrouppolicy_equals<#>1</#>equals_null<#>1</#>0_equals<#>1</#>equals_null<#>1</#>0_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>CheckFileExistenceByPathCmd_hkey_local_machine_software_policies_microsoft_windows_explorer<,>nousestoreopenwith<#>1</#>Windows/WinStore_exist_equals<#>1</#>equals_1<#>1</#>True_equals<#>1</#>equals_1<#>1</#>True_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>CheckFileExistenceByPathCmd" -ExecutionParamsString "hkey_local_machine\software\policies\microsoft\windows\explorer<,>nousestoreopenwith<#>1</#>Windows/WinStore exist" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "1<#>1</#>True" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "1<#>1</#>True" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>CheckFileExistenceByPathCmd_hkey_local_machine_software_policies_microsoft_windows_explorer<,>nousestoreopenwith<#>1</#>Windows/WinStore_exist_equals<#>1</#>equals_1<#>1</#>True_equals<#>1</#>equals_1<#>1</#>True_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "Windows/WinStore_exist" -CollectedDataResult (Check-FileExistenceByPath -Path 'Windows/WinStore exist' ) } catch { New-Object CollectedBaselineValue(-1,"Windows/WinStore_exist", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\eventviewer\microsofteventvwrdisablelinks" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\eventviewer" -RegistryKey "microsofteventvwrdisablelinks"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\eventviewer\microsofteventvwrdisablelinks", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\driversearching\dontsearchwindowsupdate" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\driversearching" -RegistryKey "dontsearchwindowsupdate"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\driversearching\dontsearchwindowsupdate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\loggingenabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "loggingenabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\loggingenabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\appcompat\disablepcaui" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\appcompat" -RegistryKey "disablepcaui"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\appcompat\disablepcaui", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\scripteddiagnosticsprovider\policy\enablequeryremoteserver" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\scripteddiagnosticsprovider\policy" -RegistryKey "enablequeryremoteserver"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\scripteddiagnosticsprovider\policy\enablequeryremoteserver", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\appx\allowalltrustedapps" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\appx" -RegistryKey "allowalltrustedapps"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\appx\allowalltrustedapps", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\biometrics\enabled" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\biometrics" -RegistryKey "enabled"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\biometrics\enabled", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\system\enablesmartscreen\1||2\false\equals||equals\false" -CollectedDataResult (Compare-RegistryWithMultipleAcceptedValues -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\system" -RegistryKey "enablesmartscreen" -AcceptedValuesString "1||2" -RegistryMayNotExist "false" -CompareMethods "equals||equals" -AllValueMustMatch "false" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\system\enablesmartscreen\1||2\false\equals||equals\false", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\internet explorer\feeds\allowbasicauthinclear" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\internet explorer\feeds" -RegistryKey "allowbasicauthinclear"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\internet explorer\feeds\allowbasicauthinclear", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\installer\disableluapatching" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\installer" -RegistryKey "disableluapatching"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\installer\disableluapatching", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\wmdrm\disableonline" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\wmdrm" -RegistryKey "disableonline"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\wmdrm\disableonline", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsmediaplayer\groupprivacyacceptance" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsmediaplayer" -RegistryKey "groupprivacyacceptance"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsmediaplayer\groupprivacyacceptance", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsmediaplayer\disableautoupdate" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsmediaplayer" -RegistryKey "disableautoupdate"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsmediaplayer\disableautoupdate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fenablesmartcard" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "fenablesmartcard"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fenablesmartcard", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\currentversion" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion" -RegistryKey "currentversion"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\currentversion", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_state_FROM_Win32_Service_WHERE_Name=_McAfeeFramework__state_Running_all" -CollectedDataResult (Compare-AllWmiObjects -Namespace "root\cimv2" -Query "SELECT state FROM Win32_Service WHERE Name='McAfeeFramework'" -OutputFieldName "state"  -ExpectedValue "Running" -allOrNone "all" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_state_FROM_Win32_Service_WHERE_Name=_McAfeeFramework__state_Running_all", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_state_FROM_Win32_Service_WHERE_Name=_masvc__state_Running_all" -CollectedDataResult (Compare-AllWmiObjects -Namespace "root\cimv2" -Query "SELECT state FROM Win32_Service WHERE Name='masvc'" -OutputFieldName "state"  -ExpectedValue "Running" -allOrNone "all" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_state_FROM_Win32_Service_WHERE_Name=_masvc__state_Running_all", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight_.*<,>S-1-5-32-544||S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464||S-1-5-32-545||S-1-5-18||S-1-15-2-1<,>HKLM<,>SOFTWARE_Microsoft_Windows_NT_CurrentVersion_Winlogon<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||access_system_security||generic_read||generic_write||generic_execute||generic_all||key_query_value||key_set_value||key_create_sub_key||key_enumerate_sub_keys||key_notify||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464||S-1-5-32-545||S-1-5-18||S-1-15-2-1<,>HKLM<,>SOFTWARE_Microsoft_Windows_NT_CurrentVersion_Winlogon_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight" -ExecutionParamsString ".*<,>S-1-5-32-544||S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464||S-1-5-32-545||S-1-5-18||S-1-15-2-1<,>HKLM<,>SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||access_system_security||generic_read||generic_write||generic_execute||generic_all||key_query_value||key_set_value||key_create_sub_key||key_enumerate_sub_keys||key_notify||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464||S-1-5-32-545||S-1-5-18||S-1-15-2-1<,>HKLM<,>SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight_.*<,>S-1-5-32-544||S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464||S-1-5-32-545||S-1-5-18||S-1-15-2-1<,>HKLM<,>SOFTWARE_Microsoft_Windows_NT_CurrentVersion_Winlogon<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||access_system_security||generic_read||generic_write||generic_execute||generic_all||key_query_value||key_set_value||key_create_sub_key||key_enumerate_sub_keys||key_notify||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464||S-1-5-32-545||S-1-5-18||S-1-15-2-1<,>HKLM<,>SOFTWARE_Microsoft_Windows_NT_CurrentVersion_Winlogon_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight_.*<,>S-1-5-32-544||S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464||S-1-5-18<,>HKLM<,>SOFTWARE_Microsoft_Windows_NT_CurrentVersion_Winlogon<,>standard_delete||standard_write_dac||standard_write_owner||access_system_security||generic_write||generic_execute||generic_all||key_set_value||key_create_sub_key||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464||S-1-5-18<,>HKLM<,>SOFTWARE_Microsoft_Windows_NT_CurrentVersion_Winlogon_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight" -ExecutionParamsString ".*<,>S-1-5-32-544||S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464||S-1-5-18<,>HKLM<,>SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon<,>standard_delete||standard_write_dac||standard_write_owner||access_system_security||generic_write||generic_execute||generic_all||key_set_value||key_create_sub_key||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464||S-1-5-18<,>HKLM<,>SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight_.*<,>S-1-5-32-544||S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464||S-1-5-18<,>HKLM<,>SOFTWARE_Microsoft_Windows_NT_CurrentVersion_Winlogon<,>standard_delete||standard_write_dac||standard_write_owner||access_system_security||generic_write||generic_execute||generic_all||key_set_value||key_create_sub_key||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464||S-1-5-18<,>HKLM<,>SOFTWARE_Microsoft_Windows_NT_CurrentVersion_Winlogon_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckRegistryKeyExists_hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\" -CollectedDataResult (Check-AtLeastOneRegistryExists -RegistryLocationsString "hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon" -RegistryKeysString "" ) } catch { New-Object CollectedBaselineValue(-1,"CheckRegistryKeyExists_hkey_local_machine\software\microsoft\windows nt\currentversion\winlogon\", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight_.*<,>S-1-5-32-544||S-1-5-32-545||S-1-5-18||S-1-3-0||S-1-15-2-1<,>HKLM<,>SOFTWARE_Microsoft_Active_Setup_Installed_Components<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||access_system_security||generic_read||generic_write||generic_execute||generic_all||key_query_value||key_set_value||key_create_sub_key||key_enumerate_sub_keys||key_notify||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-32-545||S-1-5-18||S-1-3-0||S-1-15-2-1<,>HKLM<,>SOFTWARE_Microsoft_Active_Setup_Installed_Components_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight" -ExecutionParamsString ".*<,>S-1-5-32-544||S-1-5-32-545||S-1-5-18||S-1-3-0||S-1-15-2-1<,>HKLM<,>SOFTWARE\Microsoft\Active Setup\Installed Components<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||access_system_security||generic_read||generic_write||generic_execute||generic_all||key_query_value||key_set_value||key_create_sub_key||key_enumerate_sub_keys||key_notify||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-32-545||S-1-5-18||S-1-3-0||S-1-15-2-1<,>HKLM<,>SOFTWARE\Microsoft\Active Setup\Installed Components" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight_.*<,>S-1-5-32-544||S-1-5-32-545||S-1-5-18||S-1-3-0||S-1-15-2-1<,>HKLM<,>SOFTWARE_Microsoft_Active_Setup_Installed_Components<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||access_system_security||generic_read||generic_write||generic_execute||generic_all||key_query_value||key_set_value||key_create_sub_key||key_enumerate_sub_keys||key_notify||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-32-545||S-1-5-18||S-1-3-0||S-1-15-2-1<,>HKLM<,>SOFTWARE_Microsoft_Active_Setup_Installed_Components_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight_.*<,>S-1-5-32-544||S-1-5-18||S-1-3-0<,>HKLM<,>SOFTWARE_Microsoft_Active_Setup_Installed_Components<,>standard_delete||standard_write_dac||standard_write_owner||access_system_security||generic_write||generic_execute||generic_all||key_set_value||key_create_sub_key||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-18||S-1-3-0<,>HKLM<,>SOFTWARE_Microsoft_Active_Setup_Installed_Components_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight" -ExecutionParamsString ".*<,>S-1-5-32-544||S-1-5-18||S-1-3-0<,>HKLM<,>SOFTWARE\Microsoft\Active Setup\Installed Components<,>standard_delete||standard_write_dac||standard_write_owner||access_system_security||generic_write||generic_execute||generic_all||key_set_value||key_create_sub_key||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-18||S-1-3-0<,>HKLM<,>SOFTWARE\Microsoft\Active Setup\Installed Components" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight_.*<,>S-1-5-32-544||S-1-5-18||S-1-3-0<,>HKLM<,>SOFTWARE_Microsoft_Active_Setup_Installed_Components<,>standard_delete||standard_write_dac||standard_write_owner||access_system_security||generic_write||generic_execute||generic_all||key_set_value||key_create_sub_key||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-18||S-1-3-0<,>HKLM<,>SOFTWARE_Microsoft_Active_Setup_Installed_Components_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue<#>1</#>SubCriteria_root_cimv2<,>SELECT_AddressWidth_FROM_win32_processor<,>addresswidth<#>1</#>GetWmiValue<#>2</#>CheckAtLeastOneRegistryExists<#>2</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>root_cimv2<,>SELECT_AddressWidth_FROM_win32_processor<,>addresswidth<#>2</#>hkey_local_machine_software_wow6432node_microsoft_active_setup_installed_components<,><#>2</#>CheckSpecificRegEffectiveRight<#>3</#>CheckRegEffectiveRight<!#!>2</!#!>.*<,>S-1-5-32-544||S-1-5-32-545||S-1-5-18||S-1-3-0||S-1-15-2-1<,>HKLM<,>SOFTWARE_Wow6432Node_Microsoft_Active_Setup_Installed_Components<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||access_system_security||generic_read||generic_write||generic_execute||generic_all||key_query_value||key_set_value||key_create_sub_key||key_enumerate_sub_keys||key_notify||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0<#>3</#>.*<,>S-1-5-32-544||S-1-5-32-545||S-1-5-18||S-1-3-0||S-1-15-2-1<,>HKLM<,>SOFTWARE_Wow6432Node_Microsoft_Active_Setup_Installed_Components<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<#>2</#>CheckSpecificRegEffectiveRight<#>3</#>CheckRegEffectiveRight<!#!>2</!#!>.*<,>S-1-5-32-544||S-1-5-18||S-1-3-0<,>HKLM<,>SOFTWARE_Wow6432Node_Microsoft_Active_Setup_Installed_Components<,>standard_delete||standard_write_dac||standard_write_owner||access_system_security||generic_write||generic_execute||generic_all||key_set_value||key_create_sub_key||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0<#>3</#>.*<,>S-1-5-32-544||S-1-5-18||S-1-3-0<,>HKLM<,>SOFTWARE_Wow6432Node_Microsoft_Active_Setup_Installed_Components<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>64<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>64<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2_not_equal<#>1</#>equals_64<#>1</#>true_not_equal<#>1</#>equals_64<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue<#>1</#>SubCriteria" -ExecutionParamsString "root\cimv2<,>SELECT AddressWidth FROM win32_processor<,>addresswidth<#>1</#>GetWmiValue<#>2</#>CheckAtLeastOneRegistryExists<#>2</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>root\cimv2<,>SELECT AddressWidth FROM win32_processor<,>addresswidth<#>2</#>hkey_local_machine\software\wow6432node\microsoft\active setup\installed components<,><#>2</#>CheckSpecificRegEffectiveRight<#>3</#>CheckRegEffectiveRight<!#!>2</!#!>.*<,>S-1-5-32-544||S-1-5-32-545||S-1-5-18||S-1-3-0||S-1-15-2-1<,>HKLM<,>SOFTWARE\Wow6432Node\Microsoft\Active Setup\Installed Components<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||access_system_security||generic_read||generic_write||generic_execute||generic_all||key_query_value||key_set_value||key_create_sub_key||key_enumerate_sub_keys||key_notify||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0<#>3</#>.*<,>S-1-5-32-544||S-1-5-32-545||S-1-5-18||S-1-3-0||S-1-15-2-1<,>HKLM<,>SOFTWARE\Wow6432Node\Microsoft\Active Setup\Installed Components<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<#>2</#>CheckSpecificRegEffectiveRight<#>3</#>CheckRegEffectiveRight<!#!>2</!#!>.*<,>S-1-5-32-544||S-1-5-18||S-1-3-0<,>HKLM<,>SOFTWARE\Wow6432Node\Microsoft\Active Setup\Installed Components<,>standard_delete||standard_write_dac||standard_write_owner||access_system_security||generic_write||generic_execute||generic_all||key_set_value||key_create_sub_key||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0<#>3</#>.*<,>S-1-5-32-544||S-1-5-18||S-1-3-0<,>HKLM<,>SOFTWARE\Wow6432Node\Microsoft\Active Setup\Installed Components<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>64<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>64<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "64<#>1</#>true" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "64<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue<#>1</#>SubCriteria_root_cimv2<,>SELECT_AddressWidth_FROM_win32_processor<,>addresswidth<#>1</#>GetWmiValue<#>2</#>CheckAtLeastOneRegistryExists<#>2</#>SubCriteria<#>2</#>SubCriteria<!#!>1</!#!>root_cimv2<,>SELECT_AddressWidth_FROM_win32_processor<,>addresswidth<#>2</#>hkey_local_machine_software_wow6432node_microsoft_active_setup_installed_components<,><#>2</#>CheckSpecificRegEffectiveRight<#>3</#>CheckRegEffectiveRight<!#!>2</!#!>.*<,>S-1-5-32-544||S-1-5-32-545||S-1-5-18||S-1-3-0||S-1-15-2-1<,>HKLM<,>SOFTWARE_Wow6432Node_Microsoft_Active_Setup_Installed_Components<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||access_system_security||generic_read||generic_write||generic_execute||generic_all||key_query_value||key_set_value||key_create_sub_key||key_enumerate_sub_keys||key_notify||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0<#>3</#>.*<,>S-1-5-32-544||S-1-5-32-545||S-1-5-18||S-1-3-0||S-1-15-2-1<,>HKLM<,>SOFTWARE_Wow6432Node_Microsoft_Active_Setup_Installed_Components<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<#>2</#>CheckSpecificRegEffectiveRight<#>3</#>CheckRegEffectiveRight<!#!>2</!#!>.*<,>S-1-5-32-544||S-1-5-18||S-1-3-0<,>HKLM<,>SOFTWARE_Wow6432Node_Microsoft_Active_Setup_Installed_Components<,>standard_delete||standard_write_dac||standard_write_owner||access_system_security||generic_write||generic_execute||generic_all||key_set_value||key_create_sub_key||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0<#>3</#>.*<,>S-1-5-32-544||S-1-5-18||S-1-3-0<,>HKLM<,>SOFTWARE_Wow6432Node_Microsoft_Active_Setup_Installed_Components<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>equals<#>3</#>equals<!#!>2</!#!>true<#>3</#>true<!#!>2</!#!>OR<!#!>2</!#!>3<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>64<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>equals<#>2</#>equals<#>2</#>equals<#>2</#>equals<!#!>1</!#!>64<#>2</#>true<#>2</#>true<#>2</#>true<!#!>1</!#!>AND<!#!>1</!#!>2_not_equal<#>1</#>equals_64<#>1</#>true_not_equal<#>1</#>equals_64<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckRegistryKeyExists_hkey_local_machine\software\microsoft\active setup\installed components\" -CollectedDataResult (Check-AtLeastOneRegistryExists -RegistryLocationsString "hkey_local_machine\software\microsoft\active setup\installed components" -RegistryKeysString "" ) } catch { New-Object CollectedBaselineValue(-1,"CheckRegistryKeyExists_hkey_local_machine\software\microsoft\active setup\installed components\", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight_.*<,>S-1-5-32-544||S-1-5-32-551||S-1-5-18||S-1-5-19<,>HKLM<,>System_CurrentControlSet_Control_SecurePipeServers_Winreg<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||access_system_security||generic_read||generic_write||generic_execute||generic_all||key_query_value||key_set_value||key_create_sub_key||key_enumerate_sub_keys||key_notify||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-32-551||S-1-5-18||S-1-5-19<,>HKLM<,>System_CurrentControlSet_Control_SecurePipeServers_Winreg_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight" -ExecutionParamsString ".*<,>S-1-5-32-544||S-1-5-32-551||S-1-5-18||S-1-5-19<,>HKLM<,>System\CurrentControlSet\Control\SecurePipeServers\Winreg<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||access_system_security||generic_read||generic_write||generic_execute||generic_all||key_query_value||key_set_value||key_create_sub_key||key_enumerate_sub_keys||key_notify||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-32-551||S-1-5-18||S-1-5-19<,>HKLM<,>System\CurrentControlSet\Control\SecurePipeServers\Winreg" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight_.*<,>S-1-5-32-544||S-1-5-32-551||S-1-5-18||S-1-5-19<,>HKLM<,>System_CurrentControlSet_Control_SecurePipeServers_Winreg<,>standard_delete||standard_read_control||standard_write_dac||standard_write_owner||access_system_security||generic_read||generic_write||generic_execute||generic_all||key_query_value||key_set_value||key_create_sub_key||key_enumerate_sub_keys||key_notify||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-32-551||S-1-5-18||S-1-5-19<,>HKLM<,>System_CurrentControlSet_Control_SecurePipeServers_Winreg_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight_.*<,>S-1-5-32-544||S-1-5-18<,>HKLM<,>System_CurrentControlSet_Control_SecurePipeServers_Winreg<,>standard_delete||standard_write_dac||standard_write_owner||access_system_security||generic_write||generic_execute||generic_all||key_set_value||key_create_sub_key||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-18<,>HKLM<,>System_CurrentControlSet_Control_SecurePipeServers_Winreg_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight" -ExecutionParamsString ".*<,>S-1-5-32-544||S-1-5-18<,>HKLM<,>System\CurrentControlSet\Control\SecurePipeServers\Winreg<,>standard_delete||standard_write_dac||standard_write_owner||access_system_security||generic_write||generic_execute||generic_all||key_set_value||key_create_sub_key||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-18<,>HKLM<,>System\CurrentControlSet\Control\SecurePipeServers\Winreg" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>true" -SubCriteriaOperator "OR" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckSpecificRegEffectiveRight<#>1</#>CheckRegEffectiveRight_.*<,>S-1-5-32-544||S-1-5-18<,>HKLM<,>System_CurrentControlSet_Control_SecurePipeServers_Winreg<,>standard_delete||standard_write_dac||standard_write_owner||access_system_security||generic_write||generic_execute||generic_all||key_set_value||key_create_sub_key||key_create_link||key_wow64_64key||key_wow64_32key||key_wow64_res<,>0||0||0||0||0||0||0||0||0||0||0||0||0<#>1</#>.*<,>S-1-5-32-544||S-1-5-18<,>HKLM<,>System_CurrentControlSet_Control_SecurePipeServers_Winreg_equals<#>1</#>equals_true<#>1</#>true_equals<#>1</#>equals_true<#>1</#>true_OR_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckRegistryKeyExists_hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\" -CollectedDataResult (Check-AtLeastOneRegistryExists -RegistryLocationsString "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg" -RegistryKeysString "" ) } catch { New-Object CollectedBaselineValue(-1,"CheckRegistryKeyExists_hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "_S-1-5-[0-9-]+-501__disabled_True_false" -CollectedDataResult (Get-LocalUserCountBySid -SidRegulaRExpression '^S-1-5-[0-9-]+-501$' -PropertyNameToCheck "disabled" -PropertyValueToCheck "True" -useMatchRegexToCompare "false" ) } catch { New-Object CollectedBaselineValue(-1,"_S-1-5-[0-9-]+-501__disabled_True_false", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "_S-1-5-[0-9-]+-501__SID__S-1-5-[0-9-]+-501__true" -CollectedDataResult (Get-LocalUserCountBySid -SidRegulaRExpression '^S-1-5-[0-9-]+-501$' -PropertyNameToCheck "SID" -PropertyValueToCheck "^S-1-5-[0-9-]+-501$" -useMatchRegexToCompare "true" ) } catch { New-Object CollectedBaselineValue(-1,"_S-1-5-[0-9-]+-501__SID__S-1-5-[0-9-]+-501__true", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "_S-1-5-[0-9-]+-500__Name__.*__[Aa]dministrator_|_[Aa]dministrator__true" -CollectedDataResult (Get-LocalUserCountBySid -SidRegulaRExpression '^S-1-5-[0-9-]+-500$' -PropertyNameToCheck "Name" -PropertyValueToCheck "^.*\\[Aa]dministrator$|^[Aa]dministrator$" -useMatchRegexToCompare "true" ) } catch { New-Object CollectedBaselineValue(-1,"_S-1-5-[0-9-]+-500__Name__.*__[Aa]dministrator_|_[Aa]dministrator__true", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "_S-1-5-[0-9-]+-501__Name__.*__[Gg]uest_|_[Gg]uest__true" -CollectedDataResult (Get-LocalUserCountBySid -SidRegulaRExpression '^S-1-5-[0-9-]+-501$' -PropertyNameToCheck "Name" -PropertyValueToCheck "^.*\\[Gg]uest$|^[Gg]uest$" -useMatchRegexToCompare "true" ) } catch { New-Object CollectedBaselineValue(-1,"_S-1-5-[0-9-]+-501__Name__.*__[Gg]uest_|_[Gg]uest__true", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\auditbaseobjects" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "auditbaseobjects"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\auditbaseobjects", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\fullprivilegeauditing" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "fullprivilegeauditing"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\fullprivilegeauditing", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\domain" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters" -RegistryKey "domain"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\tcpip\parameters\domain", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\ipsec\nodefaultexempt" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\ipsec" -RegistryKey "nodefaultexempt"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\ipsec\nodefaultexempt", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionpipes\^((^|[Nn][Ee][Tt][Ll][Oo][Gg][Oo][Nn])|([Ss][Aa][Mm][Rr])|([Ll][Ss][Aa][Rr][Pp][Cc]))$||^([Nn][Ee][Tt][Ll][Oo][Gg][Oo][Nn])$||^([Ss][Aa][Mm][Rr])$||^([Ll][Ss][Aa][Rr][Pp][Cc])$\false\pattern match||pattern match||pattern match||pattern match\true" -CollectedDataResult (Compare-RegistryWithMultipleAcceptedValues -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "nullsessionpipes" -AcceptedValuesString "^((^|[Nn][Ee][Tt][Ll][Oo][Gg][Oo][Nn])|([Ss][Aa][Mm][Rr])|([Ll][Ss][Aa][Rr][Pp][Cc]))$||^([Nn][Ee][Tt][Ll][Oo][Gg][Oo][Nn])$||^([Ss][Aa][Mm][Rr])$||^([Ll][Ss][Aa][Rr][Pp][Cc])$" -RegistryMayNotExist "false" -CompareMethods "pattern match||pattern match||pattern match||pattern match" -AllValueMustMatch "true" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionpipes\^((^|[Nn][Ee][Tt][Ll][Oo][Gg][Oo][Nn])|([Ss][Aa][Mm][Rr])|([Ll][Ss][Aa][Rr][Pp][Cc]))$||^([Nn][Ee][Tt][Ll][Oo][Gg][Oo][Nn])$||^([Ss][Aa][Mm][Rr])$||^([Ll][Ss][Aa][Rr][Pp][Cc])$\false\pattern match||pattern match||pattern match||pattern match\true", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedexactpaths\machine_Pattern_match_^((System\\CurrentControlSet\\Control\\ProductOptions)|(System\\CurrentControlSet\\Control\\Server Applications)|(Software\\Microsoft\\Windows NT\\CurrentVersion)|())$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedexactpaths" -RegistryKey "machine" -expectedValue "^((System\\CurrentControlSet\\Control\\ProductOptions)|(System\\CurrentControlSet\\Control\\Server Applications)|(Software\\Microsoft\\Windows NT\\CurrentVersion)|())$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedexactpaths\machine_Pattern_match_^((System\\CurrentControlSet\\Control\\ProductOptions)|(System\\CurrentControlSet\\Control\\Server Applications)|(Software\\Microsoft\\Windows NT\\CurrentVersion)|())$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedexactpaths\machine_Pattern_match_.+" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedexactpaths" -RegistryKey "machine" -expectedValue ".+" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedexactpaths\machine_Pattern_match_.+", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedexactpaths\machine" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedexactpaths" -RegistryKey "machine"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedexactpaths\machine", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths\machine_Pattern_match_^((Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows)|(System\\CurrentControlSet\\Control\\Print\\Printers)|(System\\CurrentControlSet\\Services\\Eventlog)|(Software\\Microsoft\\OLAP Server)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Print)|(System\\CurrentControlSet\\Control\\ContentIndex)|(System\\CurrentControlSet\\Control\\Terminal Server)|(System\\CurrentControlSet\\Control\\Terminal Server\\UserConfig)|(System\\CurrentControlSet\\Control\\Terminal Server\\DefaultUserConfiguration)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Perflib)|(System\\CurrentControlSet\\Services\\Sysmon[Ll]og)|())$" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths" -RegistryKey "machine" -expectedValue "^((Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows)|(System\\CurrentControlSet\\Control\\Print\\Printers)|(System\\CurrentControlSet\\Services\\Eventlog)|(Software\\Microsoft\\OLAP Server)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Print)|(System\\CurrentControlSet\\Control\\ContentIndex)|(System\\CurrentControlSet\\Control\\Terminal Server)|(System\\CurrentControlSet\\Control\\Terminal Server\\UserConfig)|(System\\CurrentControlSet\\Control\\Terminal Server\\DefaultUserConfiguration)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Perflib)|(System\\CurrentControlSet\\Services\\Sysmon[Ll]og)|())$" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths\machine_Pattern_match_^((Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows)|(System\\CurrentControlSet\\Control\\Print\\Printers)|(System\\CurrentControlSet\\Services\\Eventlog)|(Software\\Microsoft\\OLAP Server)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Print)|(System\\CurrentControlSet\\Control\\ContentIndex)|(System\\CurrentControlSet\\Control\\Terminal Server)|(System\\CurrentControlSet\\Control\\Terminal Server\\UserConfig)|(System\\CurrentControlSet\\Control\\Terminal Server\\DefaultUserConfiguration)|(Software\\Microsoft\\Windows NT\\CurrentVersion\\Perflib)|(System\\CurrentControlSet\\Services\\Sysmon[Ll]og)|())$", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths\machine" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths" -RegistryKey "machine"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths\machine", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths\machine_Pattern_match_.+" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths" -RegistryKey "machine" -expectedValue ".+" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\securepipeservers\winreg\allowedpaths\machine_Pattern_match_.+", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionshares_Pattern_match_.+" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "nullsessionshares" -expectedValue ".+" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionshares_Pattern_match_.+", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\validateadmincodesignatures" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system" -RegistryKey "validateadmincodesignatures"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\validateadmincodesignatures", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\session manager\subsystems\optional_Pattern_match_.+" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\session manager\subsystems" -RegistryKey "optional" -expectedValue ".+" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\session manager\subsystems\optional_Pattern_match_.+", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_Fax__startmode" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='Fax'" -OutputFieldName "startmode" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_Fax__startmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_Fax_" -CollectedDataResult (Get-WmiObjectCount -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='Fax'" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_Fax_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_p2pimsvc__startmode" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='p2pimsvc'" -OutputFieldName "startmode" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_p2pimsvc__startmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_p2pimsvc_" -CollectedDataResult (Get-WmiObjectCount -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='p2pimsvc'" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_p2pimsvc_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_tlntsvr__startmode" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='tlntsvr'" -OutputFieldName "startmode" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_tlntsvr__startmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_tlntsvr_" -CollectedDataResult (Get-WmiObjectCount -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='tlntsvr'" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_tlntsvr_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_SCPolicySvc__startmode" -CollectedDataResult (Get-WmiObjectValue -Namespace "root\cimv2" -Query "SELECT startmode FROM Win32_Service WHERE name='SCPolicySvc'" -OutputFieldName "startmode" ) } catch { New-Object CollectedBaselineValue(-1,"root_cimv2_SELECT_startmode_FROM_Win32_Service_WHERE_name=_SCPolicySvc__startmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "senetworklogonright_pattern_match_.*_0_Administrators__Authenticated_Users__ENTERPRISE_DOMAIN_CONTROLLERS" -CollectedDataResult (Check-UsersPrivilegeBySidAndPrivilege -PrivilegeName 'senetworklogonright'  -operations 'pattern match' -SidRegularExpressions '.*' -ShouldHavePrivilege '0' -UserFiltersString 'Administrators||Authenticated Users||ENTERPRISE DOMAIN CONTROLLERS' ) } catch { New-Object CollectedBaselineValue(-1,"senetworklogonright_pattern_match_.*_0_Administrators__Authenticated_Users__ENTERPRISE_DOMAIN_CONTROLLERS", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_name_FROM_Win32_ServerFeature_WHERE_ID_=_20<,>name<#>1</#>secreatesymboliclinkprivilege<,>pattern_match<,>.*<,>0<,>Administrators||NT_VIRTUAL_MACHINE_Virtual_Machines_equals<#>1</#>equals_Hyper-V<#>1</#>1_equals<#>1</#>equals_Hyper-V<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "root\cimv2<,>SELECT name FROM Win32_ServerFeature WHERE ID = 20<,>name<#>1</#>secreatesymboliclinkprivilege<,>pattern match<,>.*<,>0<,>Administrators||NT VIRTUAL MACHINE\Virtual Machines" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "Hyper-V<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "Hyper-V<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_name_FROM_Win32_ServerFeature_WHERE_ID_=_20<,>name<#>1</#>secreatesymboliclinkprivilege<,>pattern_match<,>.*<,>0<,>Administrators||NT_VIRTUAL_MACHINE_Virtual_Machines_equals<#>1</#>equals_Hyper-V<#>1</#>1_equals<#>1</#>equals_Hyper-V<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_id_FROM_Win32_ServerFeature_WHERE_name=_Remote_Desktop_Services_<,>id<#>1</#>seremoteinteractivelogonright<,>pattern_match<,>.*<,>0<,>Administrators_not_equal<#>1</#>equals_18<#>1</#>1_not_equal<#>1</#>equals_18<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "root\cimv2<,>SELECT id FROM Win32_ServerFeature WHERE name='Remote Desktop Services'<,>id<#>1</#>seremoteinteractivelogonright<,>pattern match<,>.*<,>0<,>Administrators" -AssessorConditionsString "not equal<#>1</#>equals" -AssessorValuesString "18<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals" -McmValuesString "18<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_id_FROM_Win32_ServerFeature_WHERE_name=_Remote_Desktop_Services_<,>id<#>1</#>seremoteinteractivelogonright<,>pattern_match<,>.*<,>0<,>Administrators_not_equal<#>1</#>equals_18<#>1</#>1_not_equal<#>1</#>equals_18<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_id_FROM_Win32_ServerFeature_WHERE_name=_Remote_Desktop_Services_<,>id<#>1</#>seremoteinteractivelogonright<,>pattern_match<,>.*<,>0<,>Administrators||Remote_Desktop_Users_equals<#>1</#>equals_18<#>1</#>1_equals<#>1</#>equals_18<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "root\cimv2<,>SELECT id FROM Win32_ServerFeature WHERE name='Remote Desktop Services'<,>id<#>1</#>seremoteinteractivelogonright<,>pattern match<,>.*<,>0<,>Administrators||Remote Desktop Users" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "18<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "18<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetWmiValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_root_cimv2<,>SELECT_id_FROM_Win32_ServerFeature_WHERE_name=_Remote_Desktop_Services_<,>id<#>1</#>seremoteinteractivelogonright<,>pattern_match<,>.*<,>0<,>Administrators||Remote_Desktop_Users_equals<#>1</#>equals_18<#>1</#>1_equals<#>1</#>equals_18<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>sedenynetworklogonright<,>equals||equals<,>NT_Authority_Local_account||Local_account<,>1<,><#>2</#>sedenynetworklogonright<,>equals||equals<,>Local_account_and_member_of_Administrators_group||NT_Authority_Local_account_and_member_of_Administrators_group<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenynetworklogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenynetworklogonright<,>pattern_match||equals<,>^.*__Enterprise_Admins||Enterprise_Admins<,>1<,>_equals<#>1</#>not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>1<#>1</#>1<#>1</#>1_equals<#>1</#>not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>1<#>1</#>1<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>sedenynetworklogonright<,>equals||equals<,>NT Authority\Local account||Local account<,>1<,><#>2</#>sedenynetworklogonright<,>equals||equals<,>Local account and member of Administrators group||NT Authority\Local account and member of Administrators group<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenynetworklogonright<,>equals||pattern match<,>Domain Admins||^.*\\Domain Admins$<,>1<,><#>1</#>sedenynetworklogonright<,>pattern match||equals<,>^.*\\Enterprise Admins$||Enterprise Admins<,>1<,>" -AssessorConditionsString "equals<#>1</#>not equal<#>1</#>equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>true<#>1</#>1<#>1</#>1<#>1</#>1" -McmConditionsString "equals<#>1</#>not equal<#>1</#>equals<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>true<#>1</#>1<#>1</#>1<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CheckUsersPrivilegeBySidAndPrivilege<#>2</#>CheckUsersPrivilegeBySidAndPrivilege<!#!>1</!#!>sedenynetworklogonright<,>equals||equals<,>NT_Authority_Local_account||Local_account<,>1<,><#>2</#>sedenynetworklogonright<,>equals||equals<,>Local_account_and_member_of_Administrators_group||NT_Authority_Local_account_and_member_of_Administrators_group<,>1<,><!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<!#!>1</!#!>equals<#>2</#>equals<!#!>1</!#!>1<#>2</#>1<!#!>1</!#!>OR<!#!>1</!#!>2<#>1</#>CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenynetworklogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenynetworklogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenynetworklogonright<,>pattern_match||equals<,>^.*__Enterprise_Admins||Enterprise_Admins<,>1<,>_equals<#>1</#>not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>1<#>1</#>1<#>1</#>1_equals<#>1</#>not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>true<#>1</#>1<#>1</#>1<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>domain<#>1</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_<#>1</#>1_equals<#>1</#>equals_<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters<,>domain<#>1</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>domain<#>1</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_<#>1</#>1_equals<#>1</#>equals_<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckRegistryValueByPattern<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>domain<#>1</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenybatchLogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenybatchLogonright<,>pattern_match||equals<,>^.*__Enterprise_Admins||Enterprise_Admins<,>1<,>_pattern_match<#>1</#>equals<#>1</#>equals<#>1</#>equals_^.+<#>1</#>1<#>1</#>1<#>1</#>1_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckRegistryValueByPattern<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters<,>domain<#>1</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenybatchLogonright<,>equals||pattern match<,>Domain Admins||^.*\\Domain Admins$<,>1<,><#>1</#>sedenybatchLogonright<,>pattern match||equals<,>^.*\\Enterprise Admins$||Enterprise Admins<,>1<,>" -AssessorConditionsString "pattern match<#>1</#>equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "^.+$<#>1</#>1<#>1</#>1<#>1</#>1" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -McmValuesString "1<#>1</#>1<#>1</#>1<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckRegistryValueByPattern<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>domain<#>1</#>sedenybatchLogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenybatchLogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenybatchLogonright<,>pattern_match||equals<,>^.*__Enterprise_Admins||Enterprise_Admins<,>1<,>_pattern_match<#>1</#>equals<#>1</#>equals<#>1</#>equals_^.+<#>1</#>1<#>1</#>1<#>1</#>1_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>domain<#>1</#>sedenyservicelogonright<,>pattern_match<,>.*<,>0<,>_equals<#>1</#>equals_<#>1</#>1_equals<#>1</#>equals_<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters<,>domain<#>1</#>sedenyservicelogonright<,>pattern match<,>.*<,>0<,>" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>domain<#>1</#>sedenyservicelogonright<,>pattern_match<,>.*<,>0<,>_equals<#>1</#>equals_<#>1</#>1_equals<#>1</#>equals_<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckRegistryValueByPattern<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>domain<#>1</#>sedenyservicelogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenyservicelogonright<,>pattern_match||equals<,>^.*__Enterprise_Admins||Enterprise_Admins<,>1<,>_pattern_match<#>1</#>equals<#>1</#>equals_^.+<#>1</#>1<#>1</#>1_equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckRegistryValueByPattern<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters<,>domain<#>1</#>sedenyservicelogonright<,>equals||pattern match<,>Domain Admins||^.*\\Domain Admins$<,>1<,><#>1</#>sedenyservicelogonright<,>pattern match||equals<,>^.*\\Enterprise Admins$||Enterprise Admins<,>1<,>" -AssessorConditionsString "pattern match<#>1</#>equals<#>1</#>equals" -AssessorValuesString "^.+$<#>1</#>1<#>1</#>1" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals" -McmValuesString "1<#>1</#>1<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckRegistryValueByPattern<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>domain<#>1</#>sedenyservicelogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenyservicelogonright<,>pattern_match||equals<,>^.*__Enterprise_Admins||Enterprise_Admins<,>1<,>_pattern_match<#>1</#>equals<#>1</#>equals_^.+<#>1</#>1<#>1</#>1_equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "GetRegistryValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>domain<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_<#>1</#>1_equals<#>1</#>equals_<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "GetRegistryValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters<,>domain<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"GetRegistryValue<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>domain<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_<#>1</#>1_equals<#>1</#>equals_<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "CheckRegistryValueByPattern<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>domain<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyinteractivelogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenyinteractivelogonright<,>pattern_match||equals<,>^.*__Enterprise_Admins||Enterprise_Admins<,>1<,>_pattern_match<#>1</#>equals<#>1</#>equals<#>1</#>equals_^.+<#>1</#>1<#>1</#>1<#>1</#>1_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "CheckRegistryValueByPattern<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "hkey_local_machine\system\currentcontrolset\services\tcpip\parameters<,>domain<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyinteractivelogonright<,>equals||pattern match<,>Domain Admins||^.*\\Domain Admins$<,>1<,><#>1</#>sedenyinteractivelogonright<,>pattern match||equals<,>^.*\\Enterprise Admins$||Enterprise Admins<,>1<,>" -AssessorConditionsString "pattern match<#>1</#>equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "^.+$<#>1</#>1<#>1</#>1<#>1</#>1" -McmConditionsString "equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -McmValuesString "1<#>1</#>1<#>1</#>1<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"CheckRegistryValueByPattern<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_hkey_local_machine_system_currentcontrolset_services_tcpip_parameters<,>domain<#>1</#>sedenyinteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyinteractivelogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenyinteractivelogonright<,>pattern_match||equals<,>^.*__Enterprise_Admins||Enterprise_Admins<,>1<,>_pattern_match<#>1</#>equals<#>1</#>equals<#>1</#>equals_^.+<#>1</#>1<#>1</#>1<#>1</#>1_equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_1<#>1</#>1<#>1</#>1<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,>" -AssessorConditionsString "equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>1" -McmConditionsString "equals<#>1</#>equals" -McmValuesString "true<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,>_equals<#>1</#>equals_true<#>1</#>1_equals<#>1</#>equals_true<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>pattern_match||equals<,>^.*__Enterprise_Admins||Enterprise_Admins<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>equals||equals<,>NT_Authority_Local_account||Local_account<,>1<,>_not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>1_not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>1_AND_1" -CollectedDataResult (Check-SubCriteriaTest -CommandsString "SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege" -ExecutionParamsString "CompareWmiWithMultipleValues<!#!>1</!#!>root\cimv2<,>SELECT DomainRole FROM win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>equals||pattern match<,>Domain Admins||^.*\\Domain Admins$<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>pattern match||equals<,>^.*\\Enterprise Admins$||Enterprise Admins<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>equals||equals<,>NT Authority\Local account||Local account<,>1<,>" -AssessorConditionsString "not equal<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -AssessorValuesString "true<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>1" -McmConditionsString "not equal<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals" -McmValuesString "true<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>1" -SubCriteriaOperator "AND" -NestingLevel "1" ) } catch { New-Object CollectedBaselineValue(-1,"SubCriteria<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege<#>1</#>CheckUsersPrivilegeBySidAndPrivilege_CompareWmiWithMultipleValues<!#!>1</!#!>root_cimv2<,>SELECT_DomainRole_FROM_win32_computersystem<,>DomainRole||DomainRole<,>0||2<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>equals<!#!>1</!#!>true<!#!>1</!#!>AND<!#!>1</!#!>2<#>1</#>sedenyremoteInteractivelogonright<,>equals<,>Guests<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>equals||pattern_match<,>Domain_Admins||^.*__Domain_Admins<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>pattern_match||equals<,>^.*__Enterprise_Admins||Enterprise_Admins<,>1<,><#>1</#>sedenyremoteInteractivelogonright<,>equals||equals<,>NT_Authority_Local_account||Local_account<,>1<,>_not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>1_not_equal<#>1</#>equals<#>1</#>equals<#>1</#>equals<#>1</#>equals_true<#>1</#>1<#>1</#>1<#>1</#>1<#>1</#>1_AND_1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system:disablecad\enabledcad" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system:disablecad" -RegistryKey "enabledcad"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system:disablecad\enabledcad", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system:inactivitytimeoutsecs\inactivitytimeoutsecs" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system:inactivitytimeoutsecs" -RegistryKey "inactivitytimeoutsecs"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system:inactivitytimeoutsecs\inactivitytimeoutsecs", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters:requiresecuritysignature\requiresecuritysignature" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters:requiresecuritysignature" -RegistryKey "requiresecuritysignature"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters:requiresecuritysignature\requiresecuritysignature", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters:enablesecuritysignature\enablesecuritysignature" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters:enablesecuritysignature" -RegistryKey "enablesecuritysignature"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters:enablesecuritysignature\enablesecuritysignature", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters:enableplaintextpassword\enableplaintextpassword" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters:enableplaintextpassword" -RegistryKey "enableplaintextpassword"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanworkstation\parameters:enableplaintextpassword\enableplaintextpassword", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters:requiresecuritysignature\requiresecuritysignature" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters:requiresecuritysignature" -RegistryKey "requiresecuritysignature"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters:requiresecuritysignature\requiresecuritysignature", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters:enablesecuritysignature\enablesecuritysignature" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters:enablesecuritysignature" -RegistryKey "enablesecuritysignature"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters:enablesecuritysignature\enablesecuritysignature", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa:disabledomaincreds\disabledomaincreds" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa:disabledomaincreds" -RegistryKey "disabledomaincreds"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa:disabledomaincreds\disabledomaincreds", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters:nullsessionshares\nullsessionshares" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters:nullsessionshares" -RegistryKey "nullsessionshares"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters:nullsessionshares\nullsessionshares", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters:supportedencryptiontypes\supportedencryptiontypes" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters:supportedencryptiontypes" -RegistryKey "supportedencryptiontypes"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kerberos\parameters:supportedencryptiontypes\supportedencryptiontypes", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa:nolmhash\nolmhash" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa:nolmhash" -RegistryKey "nolmhash"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa:nolmhash\nolmhash", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa:lmcompatibilitylevel\lmcompatibilitylevel" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa:lmcompatibilitylevel" -RegistryKey "lmcompatibilitylevel"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa:lmcompatibilitylevel\lmcompatibilitylevel", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system:consentpromptbehavioruser\consentpromptbehavioruser" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system:consentpromptbehavioruser" -RegistryKey "consentpromptbehavioruser"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system:consentpromptbehavioruser\consentpromptbehavioruser", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system:enableinstallerdetection\enableinstallerdetection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system:enableinstallerdetection" -RegistryKey "enableinstallerdetection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system:enableinstallerdetection\enableinstallerdetection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\ software\microsoft\windows\currentversion\policies\system:validateadmincodesignatures\validateadmincodesignatures" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\ software\microsoft\windows\currentversion\policies\system:validateadmincodesignatures" -RegistryKey "validateadmincodesignatures"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\ software\microsoft\windows\currentversion\policies\system:validateadmincodesignatures\validateadmincodesignatures", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system:enablelua\enablelua" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system:enablelua" -RegistryKey "enablelua"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system:enablelua\enablelua", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system:promptonsecuredesktop\promptonsecuredesktop" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system:promptonsecuredesktop" -RegistryKey "promptonsecuredesktop"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system:promptonsecuredesktop\promptonsecuredesktop", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvenforcepassphrase" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvenforcepassphrase"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvenforcepassphrase", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvpassphrasecomplexity" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvpassphrasecomplexity"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvpassphrasecomplexity", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\fve\fdvpassphraselength" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\fve" -RegistryKey "fdvpassphraselength"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\fve\fdvpassphraselength", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\setup\recoveryconsole\securitylevel" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\setup\recoveryconsole" -RegistryKey "securitylevel"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\setup\recoveryconsole\securitylevel", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\group policy\{827d319e-6eac-11d2-a4ea-00c04f79f83a}\nobackgroundpolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\group policy\{827d319e-6eac-11d2-a4ea-00c04f79f83a}" -RegistryKey "nobackgroundpolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\group policy\{827d319e-6eac-11d2-a4ea-00c04f79f83a}\nobackgroundpolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\group policy\{827d319e-6eac-11d2-a4ea-00c04f79f83a}\nogpolistchanges" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\group policy\{827d319e-6eac-11d2-a4ea-00c04f79f83a}" -RegistryKey "nogpolistchanges"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\group policy\{827d319e-6eac-11d2-a4ea-00c04f79f83a}\nogpolistchanges", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_users\[user sid]\hkey_local_machine\\software\policies\microsoft\windows\installer\alwaysinstallelevated" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_users\[user sid]\hkey_local_machine\\software\policies\microsoft\windows\installer" -RegistryKey "alwaysinstallelevated"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_users\[user sid]\hkey_local_machine\\software\policies\microsoft\windows\installer\alwaysinstallelevated", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\internetmanagement\restrictcommunication" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\internetmanagement" -RegistryKey "restrictcommunication"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\internetmanagement\restrictcommunication", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kdc\parameters\enableticketsizethreshold" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kdc\parameters" -RegistryKey "enableticketsizethreshold"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kdc\parameters\enableticketsizethreshold", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\kerberos\parameters\enablemaxtokensize" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa\kerberos\parameters" -RegistryKey "enablemaxtokensize"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\kerberos\parameters\enablemaxtokensize", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\mitigationoptions\fontbocking" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\mitigationoptions" -RegistryKey "fontbocking"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\mitigationoptions\fontbocking", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\frequencycorrectrate" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "frequencycorrectrate"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\frequencycorrectrate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\holdperiod" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "holdperiod"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\holdperiod", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\largephaseoffset" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "largephaseoffset"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\largephaseoffset", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\maxallowedphaseoffset" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "maxallowedphaseoffset"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\maxallowedphaseoffset", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\maxnegphasecorrection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "maxnegphasecorrection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\maxnegphasecorrection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\maxposphasecorrection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "maxposphasecorrection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\maxposphasecorrection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\phasecorrectrate" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "phasecorrectrate"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\phasecorrectrate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\polladjustfactor" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "polladjustfactor"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\polladjustfactor", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\spikewatchperiod" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "spikewatchperiod"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\spikewatchperiod", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\updateinterval" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "updateinterval"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\updateinterval", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\announceflags" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "announceflags"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\announceflags", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\eventlogflags" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "eventlogflags"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\eventlogflags", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\localclockdispersion" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "localclockdispersion"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\localclockdispersion", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\maxpollinterval" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "maxpollinterval"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\maxpollinterval", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\minpollinterval" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "minpollinterval"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\minpollinterval", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\clockholdoverperiod" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "clockholdoverperiod"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\clockholdoverperiod", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\requiresecuretimesyncrequests" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "requiresecuretimesyncrequests"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\requiresecuretimesyncrequests", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\utilizessltimedata" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "utilizessltimedata"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\utilizessltimedata", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\software\policies\microsoft\w32time\config\clockadjustmentauditlimit" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\software\policies\microsoft\w32time\config" -RegistryKey "clockadjustmentauditlimit"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\software\policies\microsoft\w32time\config\clockadjustmentauditlimit", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\software\policies\microsoft\w32time\config\chainentrytimeout" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\software\policies\microsoft\w32time\config" -RegistryKey "chainentrytimeout"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\software\policies\microsoft\w32time\config\chainentrytimeout", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\software\policies\microsoft\w32time\config\chainmaxentries" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\software\policies\microsoft\w32time\config" -RegistryKey "chainmaxentries"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\software\policies\microsoft\w32time\config\chainmaxentries", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\software\policies\microsoft\w32time\config\chainmaxhostentries" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\software\policies\microsoft\w32time\config" -RegistryKey "chainmaxhostentries"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\software\policies\microsoft\w32time\config\chainmaxhostentries", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\software\policies\microsoft\w32time\config\chaindisable" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\software\policies\microsoft\w32time\config" -RegistryKey "chaindisable"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\software\policies\microsoft\w32time\config\chaindisable", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\software\policies\microsoft\w32time\config\chainloggingrate" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\software\policies\microsoft\w32time\config" -RegistryKey "chainloggingrate"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\software\policies\microsoft\w32time\config\chainloggingrate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\software\policies\microsoft\windows\explorer\nousestoreopenwith" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\software\policies\microsoft\windows\explorer" -RegistryKey "nousestoreopenwith"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\software\policies\microsoft\windows\explorer\nousestoreopenwith", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\software\policies\microsoft\windows\winrm\service\allowbasic" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\software\policies\microsoft\windows\winrm\service" -RegistryKey "allowbasic"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\software\policies\microsoft\windows\winrm\service\allowbasic", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\software\policies\microsoft\windows_nt\dcom\machineaccessrestriction" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\software\policies\microsoft\windows_nt\dcom" -RegistryKey "machineaccessrestriction"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\software\policies\microsoft\windows_nt\dcom\machineaccessrestriction", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\software\policies\microsoft\windows nt\dcom\machinelaunchrestriction" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\software\policies\microsoft\windows nt\dcom" -RegistryKey "machinelaunchrestriction"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\software\policies\microsoft\windows nt\dcom\machinelaunchrestriction", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionpipes" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters" -RegistryKey "nullsessionpipes"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\lanmanserver\parameters\nullsessionpipes", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\credui\enablesecurecredentialprompting" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\credui" -RegistryKey "enablesecurecredentialprompting"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\credui\enablesecurecredentialprompting", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\restrictntlmindomain" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\netlogon\parameters" -RegistryKey "restrictntlmindomain"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\netlogon\parameters\restrictntlmindomain", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\setup\recoveryconsole\setcommand" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\setup\recoveryconsole" -RegistryKey "setcommand"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\setup\recoveryconsole\setcommand", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\session manager\memory management\clearpagefileatshutdown" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\session manager\memory management" -RegistryKey "clearpagefileatshutdown"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\session manager\memory management\clearpagefileatshutdown", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\computer configuration\windows settings\security settings\local policies\user rights assignment\bypass traverse checking" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\computer configuration\windows settings\security settings\local policies\user rights assignment" -RegistryKey "bypass traverse checking"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\computer configuration\windows settings\security settings\local policies\user rights assignment\bypass traverse checking", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "Se_Service_Logon_Right_list_pattern_match_S-1-5-_19-20__at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'Se_Service_Logon_Right' ) } catch { New-Object CollectedBaselineValue(-1,"Se_Service_Logon_Right_list_pattern_match_S-1-5-_19-20__at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "Se_Delegate_Session_User_Impersonate_Privilege_list_pattern_match_S-1-5-_32-544__at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'Se_Delegate_Session_User_Impersonate_Privilege' ) } catch { New-Object CollectedBaselineValue(-1,"Se_Delegate_Session_User_Impersonate_Privilege_list_pattern_match_S-1-5-_32-544__at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\tokenleakdetectdelaysecs" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "tokenleakdetectdelaysecs"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\tokenleakdetectdelaysecs", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\ntds\parameters\strict replication consistency" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\ntds\parameters" -RegistryKey "strict replication consistency"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\ntds\parameters\strict replication consistency", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\lsalookuprestrictisolatednamelevel" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "lsalookuprestrictisolatednamelevel"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\lsalookuprestrictisolatednamelevel", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\dfs\preferlogondc" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\dfs" -RegistryKey "preferlogondc"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\dfs\preferlogondc", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\disablerestrictedadmin" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "disablerestrictedadmin"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\disablerestrictedadmin", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\runasppl" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "runasppl"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\runasppl", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\kdc\nonforwardabledelegation " -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\kdc" -RegistryKey "nonforwardabledelegation "  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\kdc\nonforwardabledelegation ", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows nt\currentversion\secedit\reg values\machine\system\currentcontrolset\control\lsa\suppressextendedprotection " -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows nt\currentversion\secedit\reg values\machine\system\currentcontrolset\control\lsa" -RegistryKey "suppressextendedprotection "  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows nt\currentversion\secedit\reg values\machine\system\currentcontrolset\control\lsa\suppressextendedprotection ", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\ntds\parameters\strictreplicationconsistency" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\ntds\parameters" -RegistryKey "strictreplicationconsistency"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\ntds\parameters\strictreplicationconsistency", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\kdc\nonforwardabledelegation" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\kdc" -RegistryKey "nonforwardabledelegation"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\kdc\nonforwardabledelegation", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\suppressextendedprotection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa" -RegistryKey "suppressextendedprotection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\suppressextendedprotection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kdc\parameters\ticketsizethreshold" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kdc\parameters" -RegistryKey "ticketsizethreshold"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\kdc\parameters\ticketsizethreshold", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\control\lsa\kerberos\parameters\maxtokensize" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\control\lsa\kerberos\parameters" -RegistryKey "maxtokensize"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\control\lsa\kerberos\parameters\maxtokensize", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\clockadjustmentauditlimit" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config" -RegistryKey "clockadjustmentauditlimit"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\clockadjustmentauditlimit", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\chainentrytimeout\chainentrytimeout" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config\chainentrytimeout" -RegistryKey "chainentrytimeout"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\chainentrytimeout\chainentrytimeout", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\chainmaxentries\chainmaxentries" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config\chainmaxentries" -RegistryKey "chainmaxentries"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\chainmaxentries\chainmaxentries", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\chainmaxhostentries\chainmaxhostentries" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config\chainmaxhostentries" -RegistryKey "chainmaxhostentries"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\chainmaxhostentries\chainmaxhostentries", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\chaindisable\chaindisable" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config\chaindisable" -RegistryKey "chaindisable"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\chaindisable\chaindisable", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\w32time\config\chainloggingrate\chainloggingrate" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\w32time\config\chainloggingrate" -RegistryKey "chainloggingrate"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\w32time\config\chainloggingrate\chainloggingrate", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\dcom\machinelaunchrestriction" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\dcom" -RegistryKey "machinelaunchrestriction"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\dcom\machinelaunchrestriction", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\audit\processcreationincludecmdline" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\microsoft\windows\currentversion\policies\system\audit" -RegistryKey "processcreationincludecmdline"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\microsoft\windows\currentversion\policies\system\audit\processcreationincludecmdline", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths\netlogon_Pattern_match_[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1.*[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths" -RegistryKey "netlogon" -expectedValue "[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1.*[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths\netlogon_Pattern_match_[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1.*[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths\sysvol_Pattern_match_[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1.*[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1" -CollectedDataResult (Check-RegistryValueByPattern -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths" -RegistryKey "sysvol" -expectedValue "[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1.*[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1" ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\networkprovider\hardenedpaths\sysvol_Pattern_match_[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1.*[Rr]equire([Mm]utual[Aa]uthentication|[Ii]ntegrity)=1", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\group policy\{827d319e-6eac-11d2-a4ea-00c04f79f83a}!nobackgroundpolicy" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\group policy" -RegistryKey "{827d319e-6eac-11d2-a4ea-00c04f79f83a}!nobackgroundpolicy"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\group policy\{827d319e-6eac-11d2-a4ea-00c04f79f83a}!nobackgroundpolicy", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_SERVICE_LOGON_NAME_equals_S-1-5-19_at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_SERVICE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_SERVICE_LOGON_NAME_equals_S-1-5-19_at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DELEGATE_SESSION_USER_IMPERSONATE_PRIVILEGE_equals_S-1-5-32-544_at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DELEGATE_SESSION_USER_IMPERSONATE_PRIVILEGE' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DELEGATE_SESSION_USER_IMPERSONATE_PRIVILEGE_equals_S-1-5-32-544_at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_CHANGE_NOTIFY_PRIVILEDGE_equals_S-1-5-11_at_least_one" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_CHANGE_NOTIFY_PRIVILEDGE' ) } catch { New-Object CollectedBaselineValue(-1,"SE_CHANGE_NOTIFY_PRIVILEDGE_equals_S-1-5-11_at_least_one", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\cloudcontent\disableconsumeraccountstatecontent" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\cloudcontent" -RegistryKey "disableconsumeraccountstatecontent"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\cloudcontent\disableconsumeraccountstatecontent", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\datacollection\disableonesettingsdownloads" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\datacollection" -RegistryKey "disableonesettingsdownloads"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\datacollection\disableonesettingsdownloads", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\datacollection\enableonesettingsauditing" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\datacollection" -RegistryKey "enableonesettingsauditing"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\datacollection\enableonesettingsauditing", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\datacollection\limitdiagnosticlogcollection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\datacollection" -RegistryKey "limitdiagnosticlogcollection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\datacollection\limitdiagnosticlogcollection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\datacollection\limitdumpcollection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\datacollection" -RegistryKey "limitdumpcollection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\datacollection\limitdumpcollection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\enableuiaredirection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "enableuiaredirection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\enableuiaredirection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fdisablelocationredir" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\terminal services" -RegistryKey "fdisablelocationredir"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\terminal services\fdisablelocationredir", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\dsh\allownewsandinterests" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\dsh" -RegistryKey "allownewsandinterests"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\dsh\allownewsandinterests", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\sandbox\allowclipboardredirection" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\sandbox" -RegistryKey "allowclipboardredirection"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\sandbox\allowclipboardredirection", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\sandbox\allownetworking" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\sandbox" -RegistryKey "allownetworking"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\sandbox\allownetworking", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\cloudcontent\disablespotlightcollectionondesktop" -CollectedDataResult (Get-UsersRegistryValuesByUserPattern -UsersSidPattern "^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$" -RegistryLocation "\software\policies\microsoft\windows\cloudcontent" -RegistryKey "disablespotlightcollectionondesktop" ) } catch { New-Object CollectedBaselineValue(-1,"HKEY_USERS\^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]{3,}$\\software\policies\microsoft\windows\cloudcontent\disablespotlightcollectionondesktop", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windowsfirewall\policyversion" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windowsfirewall" -RegistryKey "policyversion"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windowsfirewall\policyversion", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\enforcementmode" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe" -RegistryKey "enforcementmode"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\enforcementmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\5e3ec135-b5af-4961-ae4d-cde98710afc9\value" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\5e3ec135-b5af-4961-ae4d-cde98710afc9" -RegistryKey "value"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\5e3ec135-b5af-4961-ae4d-cde98710afc9\value", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\6db6c8f3-cf7c-4754-a438-94c95345bb53\value" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\6db6c8f3-cf7c-4754-a438-94c95345bb53" -RegistryKey "value"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\6db6c8f3-cf7c-4754-a438-94c95345bb53\value", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\881d54fe-3848-4d6a-95fd-42d48ebe60b8\value" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\881d54fe-3848-4d6a-95fd-42d48ebe60b8" -RegistryKey "value"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\881d54fe-3848-4d6a-95fd-42d48ebe60b8\value", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\921cc481-6e17-4653-8f75-050b80acca20\value" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\921cc481-6e17-4653-8f75-050b80acca20" -RegistryKey "value"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\921cc481-6e17-4653-8f75-050b80acca20\value", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\a61c8b2c-a319-4cd0-9690-d2177cad7b51\value" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\a61c8b2c-a319-4cd0-9690-d2177cad7b51" -RegistryKey "value"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\a61c8b2c-a319-4cd0-9690-d2177cad7b51\value", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\fd686d83-a829-4351-8ff4-27c7de5755d2\value" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\fd686d83-a829-4351-8ff4-27c7de5755d2" -RegistryKey "value"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\fd686d83-a829-4351-8ff4-27c7de5755d2\value", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\appx\enforcementmode" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\appx" -RegistryKey "enforcementmode"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\appx\enforcementmode", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\appx\a9e18c21-ff8f-43cf-b9fc-db40eed693ba\value" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\appx\a9e18c21-ff8f-43cf-b9fc-db40eed693ba" -RegistryKey "value"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\appx\a9e18c21-ff8f-43cf-b9fc-db40eed693ba\value", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows nt\mitigationoptions\mitigationoptions_fontbocking" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows nt\mitigationoptions" -RegistryKey "mitigationoptions_fontbocking"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows nt\mitigationoptions\mitigationoptions_fontbocking", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_NETWORK_LOGON_NAME_list_pattern_match_S-1-5-_11_32-544_9_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_NETWORK_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_NETWORK_LOGON_NAME_list_pattern_match_S-1-5-_11_32-544_9_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_NETWORK_LOGON_NAME_equals_S-1-5-32-546" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_NETWORK_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_NETWORK_LOGON_NAME_equals_S-1-5-32-546", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_INTERACTIVE_LOGON_NAME_equals_S-1-5-32-546" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_INTERACTIVE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_INTERACTIVE_LOGON_NAME_equals_S-1-5-32-546", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME_equals_S-1-5-32-546" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME_equals_S-1-5-32-546", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\system\currentcontrolset\services\appidsvc\start" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\system\currentcontrolset\services\appidsvc" -RegistryKey "start"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\system\currentcontrolset\services\appidsvc\start", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_NETWORK_LOGON_NAME_list_pattern_match_S-1-5-_11_32-544_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_NETWORK_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_NETWORK_LOGON_NAME_list_pattern_match_S-1-5-_11_32-544_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_NETWORK_LOGON_NAME_list_pattern_match_S-1-5-_114_32-546_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_NETWORK_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_NETWORK_LOGON_NAME_list_pattern_match_S-1-5-_114_32-546_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME_list_pattern_match_S-1-5-_113_32-546_" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME_list_pattern_match_S-1-5-_113_32-546_", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "SE_DENY_NETWORK_LOGON_NAME_equals_S-1-5-114" -CollectedDataResult (Get-PrivilegeUsers -PrivilegeName 'SE_DENY_NETWORK_LOGON_NAME' ) } catch { New-Object CollectedBaselineValue(-1,"SE_DENY_NETWORK_LOGON_NAME_equals_S-1-5-114", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\dll\allowwindows" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\dll" -RegistryKey "allowwindows"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\dll\allowwindows", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\61bd6501-5227-446f-b233-faffc7620c58\value" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\61bd6501-5227-446f-b233-faffc7620c58" -RegistryKey "value"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\61bd6501-5227-446f-b233-faffc7620c58\value", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\61cc3c42-eee8-438a-8c78-a80da093d621\value" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\61cc3c42-eee8-438a-8c78-a80da093d621" -RegistryKey "value"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\61cc3c42-eee8-438a-8c78-a80da093d621\value", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\6676be6c-419b-41a8-8943-39715b98f77a\value" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\6676be6c-419b-41a8-8943-39715b98f77a" -RegistryKey "value"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\6676be6c-419b-41a8-8943-39715b98f77a\value", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\allowwindows" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\exe" -RegistryKey "allowwindows"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\exe\allowwindows", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\appx\allowwindows" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\appx" -RegistryKey "allowwindows"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\appx\allowwindows", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\script\allowwindows" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\script" -RegistryKey "allowwindows"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\script\allowwindows", $null) }
$collectedBaselineValues += Try { Create-CollectedBaselineValueObject -Key "hkey_local_machine\software\policies\microsoft\windows\srpv2\msi\allowwindows" -CollectedDataResult (Get-RegistryValue -RegistryLocation "hkey_local_machine\software\policies\microsoft\windows\srpv2\msi" -RegistryKey "allowwindows"  ) } catch { New-Object CollectedBaselineValue(-1,"hkey_local_machine\software\policies\microsoft\windows\srpv2\msi\allowwindows", $null) }



##########################################################################################################################################
# Section 4 - Process generated data and send to ETW
##########################################################################################################################################
$CollectedBaselineValuesProvider = [TvmBaselineAssessorEtwProvider]::log

# Take all results and create a json out of it
# Send report on every 25 results in order to to get to the ETW size limit (64k)
$reportsCountInGenericETW = 25
for ($i = 0; $i -lt $collectedBaselineValues.length; $i += $reportsCountInGenericETW) {
    $splittedCollectedBaselineValues = @($collectedBaselineValues[$i..($i+$reportsCountInGenericETW-1)])

    # Prepare the CollectedBaselineValues object to send to ETW
    $splittedCollectedBaselineValuesAsJson = ConvertTo-Json -InputObject $splittedCollectedBaselineValues -Compress
    $splittedCollectedBaselineValuesObject = New-Object CollectedBaselineValues($splittedCollectedBaselineValuesAsJson)

    # Send data to ETW
    $CollectedBaselineValuesProvider.Write("CollectedBaselineValues", $splittedCollectedBaselineValuesObject)  
}



# SIG # Begin signature block
# MIIntAYJKoZIhvcNAQcCoIInpTCCJ6ECAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCCPH4/v8tm51Tsu
# GcaL7GKtdqlGrHLS3tbnvnAncVssmqCCDZcwggYVMIID/aADAgECAhMzAAADEBr/
# fXDbjW9DAAAAAAMQMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMjIwODA0MjAyNjM5WhcNMjMwODAzMjAyNjM5WjCBlDEL
# MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
# bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjE+MDwGA1UEAxM1TWlj
# cm9zb2Z0IFdpbmRvd3MgRGVmZW5kZXIgQWR2YW5jZWQgVGhyZWF0IFByb3RlY3Rp
# b24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC0y67idUrLERDl3ls1
# 1XkmCQNGqDqXUbrM7xeQ3MDX2TI2X7/wxqqVBo5wjSGMUEUxZpgrQRj7fyyeQWvy
# OKx7cxcBYXxRWjOQRSYWqk+hcaLj7E9CkuYyM1tuVxuAehDD1jqwLGS5LfFG9iE9
# tXCQHI59kCLocKMNm2C8RWNNKlPYN0dkN/pcEIpf6L+P+GXYN76jL+k7uXY0Vgpu
# uKvUZdxukyqhYbWy8aNr8BasPSOudq2+1VzK52kbUq79M7F3lN+JfDdyiG5YoSdc
# XDrvOU1fnP1Kc4PtUJL7tSHFuBylTiNyDnHfSORQeZPFg971CeZS7I8ZFojDLgTY
# kDQDAgMBAAGjggFzMIIBbzAfBgNVHSUEGDAWBggrBgEFBQcDAwYKKwYBBAGCN0wv
# ATAdBgNVHQ4EFgQU0X7BWbJmeu82AxuDs7MBJC8zJ8swRQYDVR0RBD4wPKQ6MDgx
# HjAcBgNVBAsTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEWMBQGA1UEBRMNNDUxODk0
# KzQ3MjIyMDAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8E
# TTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9N
# aWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEGCCsGAQUFBwEBBFUwUzBR
# BggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0
# cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0MAwGA1UdEwEB/wQCMAAw
# DQYJKoZIhvcNAQELBQADggIBAIXZp9/puv2exE6jflkfuJ3E8xrXA1ch9bnCloXS
# 01xOXTauGU/+1peumenJbgwCzn/iwGIJkuoHSx5F85n7OG9InPRApTNcYmAkGPIk
# /x5SNl67Su8eHlLGd8erjoEcseZBckRENr5mBHtELtOWR80cAH9dbALlY/gJ5FDq
# jOxA9Q6UDeaT9oeIJwSy/LD9sUKrUZ4zSvqFBjjEBx3g2TfmRe3qLfKJEOL1mzCk
# 06RHYwcU2uU1s5USCeePuafeQ159io+FVdW5f7703UeD4pzXOp4eZTtWl0875By+
# bWxAR8/dc41v2MEQoy0WplbGfkBm9BWT0w0pL3itBYcXRlzIfPForBPK2aIQOMPL
# CH8JR3uJXvbTJ5apXBAFOWl6dU1JqGTT/iuWsVznHBqDmq6zKf38QYocac0o7qL3
# RG1/eiQdbPQisNpFiqTzTd6lyUaXrPtk+BniKT4bVXJ2FrfsmLiXIcFhC6FAidok
# spWZVHS8T4WwSPVpmhjEgubZlhldva/wOT/OjtGzoy6L7yNKjcSadVou4VroLLK9
# qwYgKnjyzX8KEcGkKUXScwZIp8uWDp5bmKYh+5SQEa26bzHcX0a1iqmsUoP5JhYL
# xwloQM2AgY9AEAIHSFXfCo17ae/cxV3sEaLfuL09Z1sSQC5wm32hV3YyyEgsRDXE
# zXRCMIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDEL
# MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
# bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWlj
# cm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4
# MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
# IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBD
# QSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3Y
# bqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUB
# FDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnbo
# MlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT
# +OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuy
# e4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEh
# NSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2
# z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3
# s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78Ic
# V9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E
# 11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5P
# M4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcV
# AQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3
# FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAf
# BgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBL
# hklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNS
# b29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggr
# BgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNS
# b29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsG
# AQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
# L3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwA
# ZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0G
# CSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDB
# ZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc
# 8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYq
# wooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu
# 5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWI
# UUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01mC8CzTfXh
# j38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yH
# PgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtI
# EJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4Guzq
# N5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgR
# MiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQ
# zTGCGXMwghlvAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
# dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
# YXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTEC
# EzMAAAMQGv99cNuNb0MAAAAAAxAwDQYJYIZIAWUDBAIBBQCgga4wGQYJKoZIhvcN
# AQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARUw
# LwYJKoZIhvcNAQkEMSIEIMJ9neYVXCfXrtHLt6y4NKlmp65BkA2ir1GrMeRwGc4B
# MEIGCisGAQQBgjcCAQwxNDAyoBSAEgBNAGkAYwByAG8AcwBvAGYAdKEagBhodHRw
# Oi8vd3d3Lm1pY3Jvc29mdC5jb20wDQYJKoZIhvcNAQEBBQAEggEAk4I8ni7JXuI/
# CVkO/m94jKtCn7wnYmojgXt8OsPAPczkBseEuHnr1EgOCP/gC7cNTYXLEP2jNlFV
# lxFhIi7OWJZ4fJ3iNImbLQgjxK0h7nEhChFZIDhuYrQ5XclCtUEF1I4OhC6sS0JR
# qg2rV6PKqOVrGgLCsoOrsWN2BIcUreFQjPfiGmxHoZTzNDXQ7zViuFkl/DcZ6Fep
# ZWckqEYQnvg44ExI+t5U+hbe22Mg+GijKv7aIPuXptTy8gQn6ticSKhLu9mKA4NV
# bNSFulpX+EQQxxEwB+mBmF0WrcWD5oqgp39jYurVTqCrpqoeHHJjWsPjHcMCQEom
# RcURCPLUkqGCFv0wghb5BgorBgEEAYI3AwMBMYIW6TCCFuUGCSqGSIb3DQEHAqCC
# FtYwghbSAgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFRBgsqhkiG9w0BCRABBKCCAUAE
# ggE8MIIBOAIBAQYKKwYBBAGEWQoDATAxMA0GCWCGSAFlAwQCAQUABCDDrx4MhDGB
# fsai6Fuy3Cy/Kc5egkUcugeAng3EWriDxAIGZBMzaBRAGBMyMDIzMDQwMzE2MDg1
# OC4xODFaMASAAgH0oIHQpIHNMIHKMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
# aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
# cnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25z
# MSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjoxMkJDLUUzQUUtNzRFQjElMCMGA1UE
# AxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaCCEVQwggcMMIIE9KADAgEC
# AhMzAAAByk/Cs+0DDRhsAAEAAAHKMA0GCSqGSIb3DQEBCwUAMHwxCzAJBgNVBAYT
# AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
# VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
# aW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIyMTEwNDE5MDE0MFoXDTI0MDIwMjE5MDE0
# MFowgcoxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
# EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNV
# BAsTHE1pY3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMxJjAkBgNVBAsTHVRoYWxl
# cyBUU1MgRVNOOjEyQkMtRTNBRS03NEVCMSUwIwYDVQQDExxNaWNyb3NvZnQgVGlt
# ZS1TdGFtcCBTZXJ2aWNlMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
# wwGcq9j50rWEkcLSlGZLweUVfxXRaUjiPsyaNVxPdMRs3CVe58siu/EkaVt7t7PN
# TPko/s8lNtusAeLEnzki44yxk2c9ekm8E1SQ2YV9b8/LOxfKapZ8tVlPyxw6DmFz
# NFQjifVm8EiZ7lFRoY448vpcbBD18qjYNF/2Z3SQchcsdV1N9Y6V2WGl55VmLqFR
# X5+dptdjreBXzi3WW9TsoCEWcYCBK5wYgS9tT2SSSTzae3jmdw40g+LOIyrVPF2D
# ozkStv6JBDPvwahXWpKGpO7rHrKF+o7ECN/ViQFMZyp/vxePiUABDNqzEUI8s7kl
# YmeHXvjeQOq/CM3C/Y8bj3fJObnZH7eAXvRDnxT8R6W/uD1mGUJvv9M9BMu3nhKp
# KmSxzzO5LtcMEh2tMXxhMGGNMUP3DOEK3X+2/LD1Z03usJTk5pHNoH/gDIvbp787
# Cw40tsApiAvtrHYwub0TqIv8Zy62l8n8s/Mv/P764CTqrxcXzalBHh+Xy4XPjmad
# nPkZJycp3Kczbkg9QbvJp0H/0FswHS+efFofpDNJwLh1hs/aMi1K/ozEv7/WLIPs
# DgK16fU/axybqMKk0NOxgelUjAYKl4wU0Y6Q4q9N/9PwAS0csifQhY1ooQfAI0iD
# CCSEATslD8bTO0tRtqdcIdavOReqzoPdvAv3Dr1XXQ8CAwEAAaOCATYwggEyMB0G
# A1UdDgQWBBT6x/6lS4ESQ8KZhd0RgU7RYXM8fzAfBgNVHSMEGDAWgBSfpxVdAF5i
# XYP05dJlpxtTNRnpcjBfBgNVHR8EWDBWMFSgUqBQhk5odHRwOi8vd3d3Lm1pY3Jv
# c29mdC5jb20vcGtpb3BzL2NybC9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENB
# JTIwMjAxMCgxKS5jcmwwbAYIKwYBBQUHAQEEYDBeMFwGCCsGAQUFBzAChlBodHRw
# Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NlcnRzL01pY3Jvc29mdCUyMFRp
# bWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNydDAMBgNVHRMBAf8EAjAAMBMGA1Ud
# JQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBCwUAA4ICAQDY0HkqCS3KuKefFX8/
# rm/dtD9066dKEleNqriwZqsM4Ym8Ew4QiqOqO7mWoYYY4K5y8eXSOHKNXOfpO6Rb
# aYj8jCOcJAB5tqLl5hiMgaMbAVLrl1hlix9sloO45LON0JphKva3D6AVKA7P78mA
# 9iRHZYUVrRiyfvQjWxmUnxhis8fom92+/RHcEZ1Dh5+p4gzeeL84Yl00Wyq9EcgB
# KKfgq0lCjWNSq1AUG1sELlgXOSvKZ4/lXXH+MfhcHe91WLIaZkS/Hu9wdTT6I14B
# C97yhDsZWXAl0IJ801I6UtEFpCsTeOyZBJ7CF0rf5lxJ8tE9ojNsyqXJKuwVn0ew
# CMkZqz/cEwv9FEx8QmsZ0ZNodTtsl+V9dZm+eUrMKZk6PKsKArtQ+jHkfVsHgKOD
# loelpOmHqgX7UbO0NVnIlpP55gQTqV76vU7wRXpUfz7KhE3BZXNgwG05dRnCXDwr
# hhYz+Itbzs1K1R8I4YMDJjW90ASCg9Jf+xygRKZGKHjo2Bs2XyaKuN1P6FFCIVXN
# 7KgHl/bZiakGq7k5TQ4OXK5xkhCHhjdgHuxj3hK5AaOy+GXxO/jbyqGRqeSxf+TT
# PuWhDWurIo33RMDGe5DbImjcbcj6dVhQevqHClR1OHSfr+8m1hWRJGlC1atcOWKa
# jArwOURqJSVlThwVgIyzGNmjzjCCB3EwggVZoAMCAQICEzMAAAAVxedrngKbSZkA
# AAAAABUwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
# YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
# Q29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRl
# IEF1dGhvcml0eSAyMDEwMB4XDTIxMDkzMDE4MjIyNVoXDTMwMDkzMDE4MzIyNVow
# fDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl
# ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMd
# TWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwggIiMA0GCSqGSIb3DQEBAQUA
# A4ICDwAwggIKAoICAQDk4aZM57RyIQt5osvXJHm9DtWC0/3unAcH0qlsTnXIyjVX
# 9gF/bErg4r25PhdgM/9cT8dm95VTcVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjoYH1q
# UoNEt6aORmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N7dcP2CZTfDlhAnrEqv1yaa8d
# q6z2Nr41JmTamDu6GnszrYBbfowQHJ1S/rboYiXcag/PXfT+jlPP1uyFVk3v3byN
# pOORj7I5LFGc6XBpDco2LXCOMcg1KL3jtIckw+DJj361VI/c+gVVmG1oO5pGve2k
# rnopN6zL64NF50ZuyjLVwIYwXE8s4mKyzbnijYjklqwBSru+cakXW2dg3viSkR4d
# Pf0gz3N9QZpGdc3EXzTdEonW/aUgfX782Z5F37ZyL9t9X4C626p+Nuw2TPYrbqgS
# Uei/BQOj0XOmTTd0lBw0gg/wEPK3Rxjtp+iZfD9M269ewvPV2HM9Q07BMzlMjgK8
# QmguEOqEUUbi0b1qGFphAXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdjbwzJNmSLW6Cm
# gyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb3BvR/bLUHMVr9lxSUV0S2yW6r1AFemzF
# ER1y7435UsSFF5PAPBXbGjfHCBUYP3irRbb1Hode2o+eFnJpxq57t7c+auIurQID
# AQABo4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUCAwEAATAjBgkrBgEEAYI3FQIEFgQU
# KqdS/mTEmr6CkTxGNSnPEP8vBO4wHQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWnG1M1
# GelyMFwGA1UdIARVMFMwUQYMKwYBBAGCN0yDfQEBMEEwPwYIKwYBBQUHAgEWM2h0
# dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvRG9jcy9SZXBvc2l0b3J5Lmh0
# bTATBgNVHSUEDDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMA
# QTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbL
# j+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1p
# Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAxMC0w
# Ni0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3
# Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIz
# LmNydDANBgkqhkiG9w0BAQsFAAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL/Klv6lwU
# tj5OR2R4sQaTlz0xM7U518JxNj/aZGx80HU5bbsPMeTCj/ts0aGUGCLu6WZnOlNN
# 3Zi6th542DYunKmCVgADsAW+iehp4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1bSNU
# 5HhTdSRXud2f8449xvNo32X2pFaq95W2KFUn0CS9QKC/GbYSEhFdPSfgQJY4rPf5
# KYnDvBewVIVCs/wMnosZiefwC2qBwoEZQhlSdYo2wh3DYXMuLGt7bj8sCXgU6ZGy
# qVvfSaN0DLzskYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbOxnT99kxybxCrdTDFNLB6
# 2FD+CljdQDzHVG2dY3RILLFORy3BFARxv2T5JL5zbcqOCb2zAVdJVGTZc9d/HltE
# AY5aGZFrDZ+kKNxnGSgkujhLmm77IVRrakURR6nxt67I6IleT53S0Ex2tVdUCbFp
# AUR+fKFhbHP+CrvsQWY9af3LwUFJfn6Tvsv4O+S3Fb+0zj6lMVGEvL8CwYKiexcd
# FYmNcP7ntdAoGokLjzbaukz5m/8K6TT4JDVnK+ANuOaMmdbhIurwJ0I9JZTmdHRb
# atGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6ijoIYn/ZcGNTTY3ugm2lBRDBcQZqELQd
# VTNYs6FwZvKhggLLMIICNAIBATCB+KGB0KSBzTCByjELMAkGA1UEBhMCVVMxEzAR
# BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
# Y3Jvc29mdCBDb3Jwb3JhdGlvbjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2Eg
# T3BlcmF0aW9uczEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046MTJCQy1FM0FFLTc0
# RUIxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoBATAH
# BgUrDgMCGgMVAKOO55cMT4syPP6nClg2IWfajMqkoIGDMIGApH4wfDELMAkGA1UE
# BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
# BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0
# IFRpbWUtU3RhbXAgUENBIDIwMTAwDQYJKoZIhvcNAQEFBQACBQDn1WwDMCIYDzIw
# MjMwNDAzMjMxNTE1WhgPMjAyMzA0MDQyMzE1MTVaMHQwOgYKKwYBBAGEWQoEATEs
# MCowCgIFAOfVbAMCAQAwBwIBAAICIt4wBwIBAAICEc0wCgIFAOfWvYMCAQAwNgYK
# KwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAwehIKEKMAgCAQAC
# AwGGoDANBgkqhkiG9w0BAQUFAAOBgQCDOoHNrhC04nS8RfNVRI6wa2wz01qvgiS3
# s1imZwApe0oFbrvXlkG3YKo9YUITQm82EEbzsFQR0UBOTI7yQnSWL66KDveMv/J8
# DN/+dlYsGeng+z7V9EVnwYBJT9csuJ28ipUZAOHwZhJz7KfwhOAZOC/+F8/eg3oR
# HXbNFILiGDGCBA0wggQJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
# YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
# Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
# MDEwAhMzAAAByk/Cs+0DDRhsAAEAAAHKMA0GCWCGSAFlAwQCAQUAoIIBSjAaBgkq
# hkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQwLwYJKoZIhvcNAQkEMSIEIPSzz8eCuFON
# n5MQCDEb4qwUrUaNRTTiKFh7uOQfM3EZMIH6BgsqhkiG9w0BCRACLzGB6jCB5zCB
# 5DCBvQQgEz0b85vrVU2slZAk4jt1SDEk6IzZAwVCoWwF3KzcGuAwgZgwgYCkfjB8
# MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVk
# bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1N
# aWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAcpPwrPtAw0YbAABAAAB
# yjAiBCCMejYacCABw1ElwmA08UamBQtIVIV/5jLY7zXe6nSCnTANBgkqhkiG9w0B
# AQsFAASCAgBLZNMqox2t8dzD3dxRI6DLjOWPYJzmk0Chegih25z0ClxgbR27+V46
# q4dePRhSZQSgKPovuYwDsN9mVSZKlZO4f7ygZ59CJysT4lK0cRo4E8IZ+zfnIrfP
# AlwQhdkUUh4o5mIUgMk91zbhOWPisQ8e0FjMCtxFusZXU6P6Gz+LTONOmxGmMv+y
# bMKG8iyUKYWV2XWd2s4omH3QvDXKAufaXIWKr8Df1XGCXl4jhUhN5Ga35hxVBo8r
# Y/3t+jTrq+aswEBNAAESy6dbyuHF3YfOcejyu/1ApL1bDzXY3YgG/ZSpRJWkhW7T
# O6c0n5bvSkwcSXy+qDTViK6TdU28TZZuo3QFWpbno7SDXx78bXJ+EO5d/QXWxdMo
# 86JOsAngvWBFFVrUSkYU9g9ehER416tUcPVKS27IrSCnr7usVbrCyTUHOr7Vxsuh
# aeI3Z/zcpl8Ez124BTEgOXCZZso2ZjeprX51gqHb9m3IC8Qbjg/XzGUJmNWHpJPD
# Y+g/7dg5/l70agRdkYa7zpFmcOC744GpXvk4dh0bOOfexAptugH+iA/ZVyYQqDBY
# ed0YO6GTJeTerydAAu3VgMYxNo0c8TbgD87La7FVRP/L78dni2+leNaGGb1MCq+K
# yCzgXvnzPIlFGZjTFKqQwYYw95HGKmOgDEjurG0M81BAFg04kQngog==
# SIG # End signature block
